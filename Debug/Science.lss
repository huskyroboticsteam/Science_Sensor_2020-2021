
Science.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000155c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800100  00800100  0000155c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000158c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e0  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004668  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d8a  00000000  00000000  00006114  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002738  00000000  00000000  00007e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d88  00000000  00000000  0000a5d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000117f  00000000  00000000  0000b360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003cbf  00000000  00000000  0000c4df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e8  00000000  00000000  0001019e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	7b c1       	rjmp	.+758    	; 0x304 <__vector_3>
       e:	00 00       	nop
      10:	e1 c1       	rjmp	.+962    	; 0x3d4 <__vector_4>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a3 c0       	rjmp	.+326    	; 0x164 <__vector_7>
      1e:	00 00       	nop
      20:	09 c1       	rjmp	.+530    	; 0x234 <__vector_8>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c0       	rjmp	.+158    	; 0xd0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__vector_15>
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	da c5       	rjmp	.+2996   	; 0xbfe <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__vector_21>
      58:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__vector_22>
      5c:	39 c0       	rjmp	.+114    	; 0xd0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c0       	rjmp	.+78     	; 0xd0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c0       	rjmp	.+70     	; 0xd0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e8 ee       	ldi	r30, 0xE8	; 232
      a8:	f4 e1       	ldi	r31, 0x14	; 20
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a0 30       	cpi	r26, 0x00	; 0
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	21 e0       	ldi	r18, 0x01	; 1
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a8 34       	cpi	r26, 0x48	; 72
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	6a d4       	rcall	.+2260   	; 0x9a0 <main>
      cc:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <read_ADC>:
void externalAREF(){
	if((ADMUX & 0xC0) == 0xC0){
		ADMUX &= ~0xC0;
		ADMUX = (1<<6);
		delay_mS(5);
		read_ADC(0);
      d2:	ec e7       	ldi	r30, 0x7C	; 124
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	90 81       	ld	r25, Z
      d8:	90 7c       	andi	r25, 0xC0	; 192
      da:	87 70       	andi	r24, 0x07	; 7
      dc:	89 2b       	or	r24, r25
      de:	80 83       	st	Z, r24
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 64       	ori	r24, 0x40	; 64
      e8:	80 83       	st	Z, r24
      ea:	80 81       	ld	r24, Z
      ec:	86 fd       	sbrc	r24, 6
      ee:	fd cf       	rjmp	.-6      	; 0xea <read_ADC+0x18>
      f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      f4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	92 2b       	or	r25, r18
      fc:	08 95       	ret

000000fe <read_gas_sensor>:
	}
}

uint16_t read_gas_sensor(){
	return read_ADC(2);
      fe:	82 e0       	ldi	r24, 0x02	; 2
     100:	e8 cf       	rjmp	.-48     	; 0xd2 <read_ADC>
}
     102:	08 95       	ret

00000104 <mars_moisture>:

uint16_t mars_moisture(){
	return read_ADC(3);
     104:	83 e0       	ldi	r24, 0x03	; 3
     106:	e5 cf       	rjmp	.-54     	; 0xd2 <read_ADC>
}
     108:	08 95       	ret

0000010a <init_encoders>:
			encoder0_ticks = 0;
		case 1:
			encoder1_ticks = 0;
			break;
	}
	EIMSK |= 0xCC; //Enable pin change interrupt on PE6, PE7
     10a:	8d b3       	in	r24, 0x1d	; 29
     10c:	83 73       	andi	r24, 0x33	; 51
     10e:	8d bb       	out	0x1d, r24	; 29
     110:	8d b1       	in	r24, 0x0d	; 13
     112:	8f 73       	andi	r24, 0x3F	; 63
     114:	8d b9       	out	0x0d, r24	; 13
     116:	8a b1       	in	r24, 0x0a	; 10
     118:	83 7f       	andi	r24, 0xF3	; 243
     11a:	8a b9       	out	0x0a, r24	; 10
     11c:	8e b1       	in	r24, 0x0e	; 14
     11e:	80 6c       	ori	r24, 0xC0	; 192
     120:	8e b9       	out	0x0e, r24	; 14
     122:	8b b1       	in	r24, 0x0b	; 11
     124:	8c 60       	ori	r24, 0x0C	; 12
     126:	8b b9       	out	0x0b, r24	; 11
     128:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     12c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     130:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     134:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     138:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <encoder1_ticks>
     13c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <encoder1_ticks+0x1>
     140:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <encoder1_ticks+0x2>
     144:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <encoder1_ticks+0x3>
     148:	ea e6       	ldi	r30, 0x6A	; 106
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	80 65       	ori	r24, 0x50	; 80
     150:	80 83       	st	Z, r24
     152:	e9 e6       	ldi	r30, 0x69	; 105
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	80 65       	ori	r24, 0x50	; 80
     15a:	80 83       	st	Z, r24
     15c:	8d b3       	in	r24, 0x1d	; 29
     15e:	8c 6c       	ori	r24, 0xCC	; 204
     160:	8d bb       	out	0x1d, r24	; 29
     162:	08 95       	ret

00000164 <__vector_7>:
}

ISR(INT6_vect){ //PE6, A
     164:	1f 92       	push	r1
     166:	0f 92       	push	r0
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	0f 92       	push	r0
     16c:	11 24       	eor	r1, r1
     16e:	8f 93       	push	r24
     170:	9f 93       	push	r25
     172:	af 93       	push	r26
     174:	bf 93       	push	r27
	uint8_t state = PINE;
     176:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE6)){ //A rising
     178:	86 ff       	sbrs	r24, 6
     17a:	2a c0       	rjmp	.+84     	; 0x1d0 <__vector_7+0x6c>
		if(state & (1<<PE7)){ //B high
     17c:	88 23       	and	r24, r24
     17e:	a4 f4       	brge	.+40     	; 0x1a8 <__vector_7+0x44>
			encoder0_ticks++;
     180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     184:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     188:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     18c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	a1 1d       	adc	r26, r1
     194:	b1 1d       	adc	r27, r1
     196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     19a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     19e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     1a2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     1a6:	3d c0       	rjmp	.+122    	; 0x222 <__vector_7+0xbe>
		} else { //B low
			encoder0_ticks--;
     1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1b0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     1b4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	a1 09       	sbc	r26, r1
     1bc:	b1 09       	sbc	r27, r1
     1be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     1c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1c6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     1ca:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     1ce:	29 c0       	rjmp	.+82     	; 0x222 <__vector_7+0xbe>
		}
	} else { //A falling
		if(state & (1<<PE7)){ //B high
     1d0:	88 23       	and	r24, r24
     1d2:	a4 f4       	brge	.+40     	; 0x1fc <__vector_7+0x98>
			encoder0_ticks--;
     1d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1dc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     1e0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	a1 09       	sbc	r26, r1
     1e8:	b1 09       	sbc	r27, r1
     1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     1ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1f2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     1f6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     1fa:	13 c0       	rjmp	.+38     	; 0x222 <__vector_7+0xbe>
		} else { //B low
			encoder0_ticks++;
     1fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     200:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     204:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     208:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     20c:	01 96       	adiw	r24, 0x01	; 1
     20e:	a1 1d       	adc	r26, r1
     210:	b1 1d       	adc	r27, r1
     212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     216:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     21a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     21e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		}
	}
}
     222:	bf 91       	pop	r27
     224:	af 91       	pop	r26
     226:	9f 91       	pop	r25
     228:	8f 91       	pop	r24
     22a:	0f 90       	pop	r0
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	0f 90       	pop	r0
     230:	1f 90       	pop	r1
     232:	18 95       	reti

00000234 <__vector_8>:

ISR(INT7_vect){ //PE7, B
     234:	1f 92       	push	r1
     236:	0f 92       	push	r0
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	0f 92       	push	r0
     23c:	11 24       	eor	r1, r1
     23e:	8f 93       	push	r24
     240:	9f 93       	push	r25
     242:	af 93       	push	r26
     244:	bf 93       	push	r27
	uint8_t state = PINE;
     246:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE7)){ //B rising
     248:	88 23       	and	r24, r24
     24a:	54 f5       	brge	.+84     	; 0x2a0 <__vector_8+0x6c>
		if(state & (1<<PE6)){ //A high
     24c:	86 ff       	sbrs	r24, 6
     24e:	14 c0       	rjmp	.+40     	; 0x278 <__vector_8+0x44>
			encoder0_ticks--;
     250:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     254:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     258:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     25c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	a1 09       	sbc	r26, r1
     264:	b1 09       	sbc	r27, r1
     266:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     26a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     26e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     272:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     276:	3d c0       	rjmp	.+122    	; 0x2f2 <__vector_8+0xbe>
		} else { //A low
			encoder0_ticks++;
     278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     27c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     280:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     284:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	a1 1d       	adc	r26, r1
     28c:	b1 1d       	adc	r27, r1
     28e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     292:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     296:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     29a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     29e:	29 c0       	rjmp	.+82     	; 0x2f2 <__vector_8+0xbe>
		}
	} else { //B falling
		if(state & (1<<PE6)){ //A high
     2a0:	86 ff       	sbrs	r24, 6
     2a2:	14 c0       	rjmp	.+40     	; 0x2cc <__vector_8+0x98>
			encoder0_ticks++;
     2a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2ac:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2b0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	a1 1d       	adc	r26, r1
     2b8:	b1 1d       	adc	r27, r1
     2ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     2be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2c2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2c6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2ca:	13 c0       	rjmp	.+38     	; 0x2f2 <__vector_8+0xbe>
		} else { //A low
			encoder0_ticks--;
     2cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2d4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2d8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	a1 09       	sbc	r26, r1
     2e0:	b1 09       	sbc	r27, r1
     2e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     2e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2ea:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2ee:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		}
	}
}
     2f2:	bf 91       	pop	r27
     2f4:	af 91       	pop	r26
     2f6:	9f 91       	pop	r25
     2f8:	8f 91       	pop	r24
     2fa:	0f 90       	pop	r0
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	0f 90       	pop	r0
     300:	1f 90       	pop	r1
     302:	18 95       	reti

00000304 <__vector_3>:

ISR(INT2_vect){ //PD2, A
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	8f 93       	push	r24
     310:	9f 93       	push	r25
     312:	af 93       	push	r26
     314:	bf 93       	push	r27
	uint8_t state = PIND;
     316:	89 b1       	in	r24, 0x09	; 9
	if(state & (1<<PD2)){ //A rising
     318:	82 ff       	sbrs	r24, 2
     31a:	2a c0       	rjmp	.+84     	; 0x370 <__vector_3+0x6c>
		if(state & (1<<PD3)){ //B high
     31c:	83 ff       	sbrs	r24, 3
     31e:	14 c0       	rjmp	.+40     	; 0x348 <__vector_3+0x44>
			encoder1_ticks++;
     320:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     324:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     328:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     32c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	a1 1d       	adc	r26, r1
     334:	b1 1d       	adc	r27, r1
     336:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     33a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     33e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     342:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
     346:	3d c0       	rjmp	.+122    	; 0x3c2 <__vector_3+0xbe>
			} else { //B low
			encoder1_ticks--;
     348:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     34c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     350:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     354:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	a1 09       	sbc	r26, r1
     35c:	b1 09       	sbc	r27, r1
     35e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     362:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     366:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     36a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
     36e:	29 c0       	rjmp	.+82     	; 0x3c2 <__vector_3+0xbe>
		}
		} else { //A falling
		if(state & (1<<PD3)){ //B high
     370:	83 ff       	sbrs	r24, 3
     372:	14 c0       	rjmp	.+40     	; 0x39c <__vector_3+0x98>
			encoder1_ticks--;
     374:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     378:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     37c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     380:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	a1 09       	sbc	r26, r1
     388:	b1 09       	sbc	r27, r1
     38a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     38e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     392:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     396:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
     39a:	13 c0       	rjmp	.+38     	; 0x3c2 <__vector_3+0xbe>
			} else { //B low
			encoder1_ticks++;
     39c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     3a0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     3a4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     3a8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	a1 1d       	adc	r26, r1
     3b0:	b1 1d       	adc	r27, r1
     3b2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     3b6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     3ba:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     3be:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
		}
	}
}
     3c2:	bf 91       	pop	r27
     3c4:	af 91       	pop	r26
     3c6:	9f 91       	pop	r25
     3c8:	8f 91       	pop	r24
     3ca:	0f 90       	pop	r0
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	0f 90       	pop	r0
     3d0:	1f 90       	pop	r1
     3d2:	18 95       	reti

000003d4 <__vector_4>:

ISR(INT3_vect){ //PD3, B
     3d4:	1f 92       	push	r1
     3d6:	0f 92       	push	r0
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	0f 92       	push	r0
     3dc:	11 24       	eor	r1, r1
     3de:	8f 93       	push	r24
     3e0:	9f 93       	push	r25
     3e2:	af 93       	push	r26
     3e4:	bf 93       	push	r27
	uint8_t state = PIND;
     3e6:	89 b1       	in	r24, 0x09	; 9
	if(state & (1<<PD3)){ //B rising
     3e8:	83 ff       	sbrs	r24, 3
     3ea:	2a c0       	rjmp	.+84     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		if(state & (1<<PD2)){ //A high
     3ec:	82 ff       	sbrs	r24, 2
     3ee:	14 c0       	rjmp	.+40     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			encoder1_ticks--;
     3f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     3f4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     3f8:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     3fc:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	a1 09       	sbc	r26, r1
     404:	b1 09       	sbc	r27, r1
     406:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     40a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     40e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     412:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
     416:	3d c0       	rjmp	.+122    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			} else { //A low
			encoder1_ticks++;
     418:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     41c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     420:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     424:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	a1 1d       	adc	r26, r1
     42c:	b1 1d       	adc	r27, r1
     42e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     432:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     436:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     43a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
     43e:	29 c0       	rjmp	.+82     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		}
		} else { //B falling
		if(state & (1<<PD2)){ //A high
     440:	82 ff       	sbrs	r24, 2
     442:	14 c0       	rjmp	.+40     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			encoder1_ticks++;
     444:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     448:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     44c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     450:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	a1 1d       	adc	r26, r1
     458:	b1 1d       	adc	r27, r1
     45a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     45e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     462:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     466:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
     46a:	13 c0       	rjmp	.+38     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			} else { //A low
			encoder1_ticks--;
     46c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     470:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     474:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     478:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	a1 09       	sbc	r26, r1
     480:	b1 09       	sbc	r27, r1
     482:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     486:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     48a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     48e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
		}
	}
     492:	bf 91       	pop	r27
     494:	af 91       	pop	r26
     496:	9f 91       	pop	r25
     498:	8f 91       	pop	r24
     49a:	0f 90       	pop	r0
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	0f 90       	pop	r0
     4a0:	1f 90       	pop	r1
     4a2:	18 95       	reti

000004a4 <handle_telemetry_packet>:
#include "CANCommon.h"
#include "CANMotorUnit.h"
#include "CANSerialNumbers.h"
#include "Port.h"

void handle_telemetry_packet(CANPacket *packet){
     4a4:	df 92       	push	r13
     4a6:	ef 92       	push	r14
     4a8:	ff 92       	push	r15
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	2b 97       	sbiw	r28, 0x0b	; 11
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
	int32_t sensor_val = 0;
	CANPacket new_packet;
	uint8_t type;
	switch(type = DecodeTelemetryType(packet)){
     4c2:	ba d0       	rcall	.+372    	; 0x638 <DecodeTelemetryType>
     4c4:	d8 2e       	mov	r13, r24
     4c6:	84 e1       	ldi	r24, 0x14	; 20
     4c8:	d8 16       	cp	r13, r24
     4ca:	39 f0       	breq	.+14     	; 0x4da <handle_telemetry_packet+0x36>
     4cc:	86 e1       	ldi	r24, 0x16	; 22
     4ce:	d8 16       	cp	r13, r24
     4d0:	81 f0       	breq	.+32     	; 0x4f2 <handle_telemetry_packet+0x4e>
     4d2:	83 e1       	ldi	r24, 0x13	; 19
     4d4:	d8 12       	cpse	r13, r24
     4d6:	12 c0       	rjmp	.+36     	; 0x4fc <handle_telemetry_packet+0x58>
     4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <handle_telemetry_packet+0x44>
		case CAN_SCIENCE_SENSOR_GAS:
			sensor_val = read_gas_sensor();
			break;
		case CAN_SCIENCE_SENSOR_UV:
			sensor_val = 666;//read_uv_sensor();
     4da:	1a e9       	ldi	r17, 0x9A	; 154
     4dc:	e1 2e       	mov	r14, r17
     4de:	12 e0       	ldi	r17, 0x02	; 2
     4e0:	f1 2e       	mov	r15, r17
     4e2:	00 e0       	ldi	r16, 0x00	; 0
     4e4:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sensor_val = 0;
	CANPacket new_packet;
	uint8_t type;
	switch(type = DecodeTelemetryType(packet)){
		case CAN_SCIENCE_SENSOR_GAS:
			sensor_val = read_gas_sensor();
     4e6:	0d c0       	rjmp	.+26     	; 0x502 <handle_telemetry_packet+0x5e>
     4e8:	0a de       	rcall	.-1004   	; 0xfe <read_gas_sensor>
     4ea:	7c 01       	movw	r14, r24
     4ec:	00 e0       	ldi	r16, 0x00	; 0
			break;
     4ee:	10 e0       	ldi	r17, 0x00	; 0
		case CAN_SCIENCE_SENSOR_UV:
			sensor_val = 666;//read_uv_sensor();
			break;
		case CAN_SCIENCE_SENSOR_MOISTURE:
			sensor_val = mars_moisture();
     4f0:	08 c0       	rjmp	.+16     	; 0x502 <handle_telemetry_packet+0x5e>
     4f2:	08 de       	rcall	.-1008   	; 0x104 <mars_moisture>
     4f4:	7c 01       	movw	r14, r24
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	10 e0       	ldi	r17, 0x00	; 0
			break;
     4fa:	03 c0       	rjmp	.+6      	; 0x502 <handle_telemetry_packet+0x5e>
#include "CANMotorUnit.h"
#include "CANSerialNumbers.h"
#include "Port.h"

void handle_telemetry_packet(CANPacket *packet){
	int32_t sensor_val = 0;
     4fc:	e1 2c       	mov	r14, r1
     4fe:	f1 2c       	mov	r15, r1
     500:	87 01       	movw	r16, r14
			break;
		case CAN_SCIENCE_SENSOR_AIR_QUALITY:
			//sensor_val = read_aq_sensor();
			break;
	}
	AssembleTelemetryReportPacket(&new_packet, DEVICE_GROUP_MASTER, DEVICE_SERIAL_JETSON, type, sensor_val);
     502:	2d 2d       	mov	r18, r13
     504:	41 e0       	ldi	r20, 0x01	; 1
     506:	62 e0       	ldi	r22, 0x02	; 2
     508:	ce 01       	movw	r24, r28
     50a:	01 96       	adiw	r24, 0x01	; 1
	SendCANPacket(&new_packet);
     50c:	68 d0       	rcall	.+208    	; 0x5de <AssembleTelemetryReportPacket>
     50e:	ce 01       	movw	r24, r28
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	a2 d4       	rcall	.+2372   	; 0xe58 <SendCANPacket>
}
     514:	2b 96       	adiw	r28, 0x0b	; 11
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	df 90       	pop	r13
     52e:	08 95       	ret

00000530 <handle_CAN_packet>:

void handle_CAN_packet(CANPacket *packet){
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	29 97       	sbiw	r28, 0x09	; 9
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	8c 01       	movw	r16, r24
	switch(GetPacketID(packet)){
     54c:	95 d0       	rcall	.+298    	; 0x678 <GetPacketID>
     54e:	8d 30       	cpi	r24, 0x0D	; 13
     550:	91 05       	cpc	r25, r1
     552:	a1 f0       	breq	.+40     	; 0x57c <handle_CAN_packet+0x4c>
     554:	1c f4       	brge	.+6      	; 0x55c <handle_CAN_packet+0x2c>
     556:	03 97       	sbiw	r24, 0x03	; 3
     558:	41 f0       	breq	.+16     	; 0x56a <handle_CAN_packet+0x3a>
     55a:	35 c0       	rjmp	.+106    	; 0x5c6 <handle_CAN_packet+0x96>
     55c:	85 3f       	cpi	r24, 0xF5	; 245
     55e:	91 05       	cpc	r25, r1
     560:	81 f1       	breq	.+96     	; 0x5c2 <handle_CAN_packet+0x92>
     562:	87 3f       	cpi	r24, 0xF7	; 247
     564:	91 05       	cpc	r25, r1
     566:	b1 f0       	breq	.+44     	; 0x594 <handle_CAN_packet+0x64>
     568:	2e c0       	rjmp	.+92     	; 0x5c6 <handle_CAN_packet+0x96>
		case ID_MOTOR_UNIT_PWM_DIR_SET: ;
			uint8_t motor = GetScienceMotorIDFromPacket(packet);
     56a:	c8 01       	movw	r24, r16
     56c:	f1 d0       	rcall	.+482    	; 0x750 <GetScienceMotorIDFromPacket>
     56e:	f8 2e       	mov	r15, r24
			int16_t pwm = GetScienceMotorPWMFromPacket(packet);
     570:	c8 01       	movw	r24, r16
     572:	e3 d0       	rcall	.+454    	; 0x73a <GetScienceMotorPWMFromPacket>
			set_motor_power(motor, pwm);
     574:	bc 01       	movw	r22, r24
     576:	8f 2d       	mov	r24, r15
     578:	ab d2       	rcall	.+1366   	; 0xad0 <set_motor_power>
			break;
     57a:	25 c0       	rjmp	.+74     	; 0x5c6 <handle_CAN_packet+0x96>
		case ID_MOTOR_UNIT_SERVO_SET: ;
			uint8_t servo = GetScienceServoIDFromPacket(packet);
     57c:	c8 01       	movw	r24, r16
     57e:	eb d0       	rcall	.+470    	; 0x756 <GetScienceServoIDFromPacket>
     580:	f8 2e       	mov	r15, r24
			int8_t angle = GetScienceServoAngleFromPacket(packet);
     582:	c8 01       	movw	r24, r16
     584:	e2 d0       	rcall	.+452    	; 0x74a <GetScienceServoAngleFromPacket>
			set_servo_position(servo, angle);
     586:	68 2f       	mov	r22, r24
     588:	88 0f       	add	r24, r24
     58a:	77 0b       	sbc	r23, r23
     58c:	8f 2d       	mov	r24, r15
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	f6 d5       	rcall	.+3052   	; 0x117e <set_servo_position>
     592:	19 c0       	rjmp	.+50     	; 0x5c6 <handle_CAN_packet+0x96>
			break;
     594:	f8 01       	movw	r30, r16
		case ID_LED_COLOR: ;
			uint8_t r = packet->data[1];
     596:	94 81       	ldd	r25, Z+4	; 0x04
     598:	25 81       	ldd	r18, Z+5	; 0x05
			uint8_t g = packet->data[2];
     59a:	86 81       	ldd	r24, Z+6	; 0x06
			uint8_t b = packet->data[3];
     59c:	9f 83       	std	Y+7, r25	; 0x07
			uint8_t R[3] = {r, r, r};
     59e:	98 87       	std	Y+8, r25	; 0x08
     5a0:	99 87       	std	Y+9, r25	; 0x09
     5a2:	2c 83       	std	Y+4, r18	; 0x04
			uint8_t G[3] = {g, g, b};
     5a4:	2d 83       	std	Y+5, r18	; 0x05
     5a6:	8e 83       	std	Y+6, r24	; 0x06
     5a8:	89 83       	std	Y+1, r24	; 0x01
			uint8_t B[3] = {b, b, b};
     5aa:	8a 83       	std	Y+2, r24	; 0x02
     5ac:	8b 83       	std	Y+3, r24	; 0x03
     5ae:	ae 01       	movw	r20, r28
			set_RGB(R, G, B);
     5b0:	4f 5f       	subi	r20, 0xFF	; 255
     5b2:	5f 4f       	sbci	r21, 0xFF	; 255
     5b4:	be 01       	movw	r22, r28
     5b6:	6c 5f       	subi	r22, 0xFC	; 252
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	ce 01       	movw	r24, r28
     5bc:	07 96       	adiw	r24, 0x07	; 7
     5be:	8c d1       	rcall	.+792    	; 0x8d8 <set_RGB>
			break;
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <handle_CAN_packet+0x96>
		case ID_TELEMETRY_PULL:
			handle_telemetry_packet(packet);
     5c2:	c8 01       	movw	r24, r16
     5c4:	6f df       	rcall	.-290    	; 0x4a4 <handle_telemetry_packet>
     5c6:	29 96       	adiw	r28, 0x09	; 9
			break;
	}
}
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	08 95       	ret

000005de <AssembleTelemetryReportPacket>:
     5de:	bf 92       	push	r11
}

uint32_t DecodeTelemetryDataUnsigned(CANPacket *packet)
{
    return (uint32_t) DecodeTelemetryDataSigned(packet);
}
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
     5f2:	b2 2e       	mov	r11, r18
     5f4:	67 01       	movw	r12, r14
     5f6:	78 01       	movw	r14, r16
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	21 d0       	rcall	.+66     	; 0x63e <ConstructCANID>
     5fc:	99 83       	std	Y+1, r25	; 0x01
     5fe:	88 83       	st	Y, r24
     600:	88 e0       	ldi	r24, 0x08	; 8
     602:	8a 83       	std	Y+2, r24	; 0x02
     604:	8e 01       	movw	r16, r28
     606:	0d 5f       	subi	r16, 0xFD	; 253
     608:	1f 4f       	sbci	r17, 0xFF	; 255
     60a:	66 ef       	ldi	r22, 0xF6	; 246
     60c:	c8 01       	movw	r24, r16
     60e:	27 d0       	rcall	.+78     	; 0x65e <WriteSenderSerialAndPacketID>
     610:	c8 0f       	add	r28, r24
     612:	d9 1f       	adc	r29, r25
     614:	bb 82       	std	Y+3, r11	; 0x03
     616:	9c 01       	movw	r18, r24
     618:	2f 5f       	subi	r18, 0xFF	; 255
     61a:	3f 4f       	sbci	r19, 0xFF	; 255
     61c:	b7 01       	movw	r22, r14
     61e:	a6 01       	movw	r20, r12
     620:	c8 01       	movw	r24, r16
     622:	2e d0       	rcall	.+92     	; 0x680 <PackIntIntoDataMSBFirst>
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	bf 90       	pop	r11
     636:	08 95       	ret

00000638 <DecodeTelemetryType>:

uint8_t DecodeTelemetryType(CANPacket *packet)
{
    return packet->data[3];
}
     638:	fc 01       	movw	r30, r24
     63a:	86 81       	ldd	r24, Z+6	; 0x06
     63c:	08 95       	ret

0000063e <ConstructCANID>:
}

void PackShortIntoDataMSBFirst(uint8_t *data, int16_t dataToPack, int startIndex)
{
	data[startIndex + 0] = (dataToPack & 0xFF00) >> 8;
	data[startIndex + 1] = (dataToPack & 0x00FF);
     63e:	6f 70       	andi	r22, 0x0F	; 15
     640:	90 e4       	ldi	r25, 0x40	; 64
     642:	69 9f       	mul	r22, r25
     644:	b0 01       	movw	r22, r0
     646:	11 24       	eor	r1, r1
     648:	4f 73       	andi	r20, 0x3F	; 63
     64a:	64 2b       	or	r22, r20
     64c:	81 70       	andi	r24, 0x01	; 1
     64e:	38 2f       	mov	r19, r24
     650:	33 0f       	add	r19, r19
     652:	33 0f       	add	r19, r19
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	cb 01       	movw	r24, r22
     658:	82 2b       	or	r24, r18
     65a:	93 2b       	or	r25, r19
     65c:	08 95       	ret

0000065e <WriteSenderSerialAndPacketID>:
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	ec 01       	movw	r28, r24
     664:	68 83       	st	Y, r22
     666:	d6 d4       	rcall	.+2476   	; 0x1014 <getLocalDeviceGroup>
     668:	89 83       	std	Y+1, r24	; 0x01
     66a:	d1 d4       	rcall	.+2466   	; 0x100e <getLocalDeviceSerial>
     66c:	8a 83       	std	Y+2, r24	; 0x02
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <GetPacketID>:
     678:	fc 01       	movw	r30, r24
     67a:	83 81       	ldd	r24, Z+3	; 0x03
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	08 95       	ret

00000680 <PackIntIntoDataMSBFirst>:
     680:	fc 01       	movw	r30, r24
     682:	e2 0f       	add	r30, r18
     684:	f3 1f       	adc	r31, r19
     686:	70 83       	st	Z, r23
     688:	61 83       	std	Z+1, r22	; 0x01
     68a:	52 83       	std	Z+2, r21	; 0x02
     68c:	43 83       	std	Z+3, r20	; 0x03
     68e:	08 95       	ret

00000690 <DecodeBytesToIntMSBFirst>:
}

int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
    int length = 4;
    int32_t decodedData = 0; 

    if (endIndex > 0 && startIndex >= 0) {
     69c:	14 16       	cp	r1, r20
     69e:	15 06       	cpc	r1, r21
     6a0:	9c f4       	brge	.+38     	; 0x6c8 <DecodeBytesToIntMSBFirst+0x38>
     6a2:	77 23       	and	r23, r23
     6a4:	a4 f0       	brlt	.+40     	; 0x6ce <DecodeBytesToIntMSBFirst+0x3e>
        length = endIndex - startIndex + 1;
     6a6:	ea 01       	movw	r28, r20
     6a8:	c6 1b       	sub	r28, r22
     6aa:	d7 0b       	sbc	r29, r23
     6ac:	21 96       	adiw	r28, 0x01	; 1
     6ae:	c5 30       	cpi	r28, 0x05	; 5
     6b0:	d1 05       	cpc	r29, r1
     6b2:	14 f0       	brlt	.+4      	; 0x6b8 <DecodeBytesToIntMSBFirst+0x28>
     6b4:	c4 e0       	ldi	r28, 0x04	; 4
     6b6:	d0 e0       	ldi	r29, 0x00	; 0
     6b8:	dd 23       	and	r29, r29
     6ba:	14 f4       	brge	.+4      	; 0x6c0 <DecodeBytesToIntMSBFirst+0x30>
     6bc:	c0 e0       	ldi	r28, 0x00	; 0
     6be:	d0 e0       	ldi	r29, 0x00	; 0
        if (length > 4) { length = 4; }
        if (length < 1) { length = 0; }
    }

    for (int i = 0; i < length; i++) 
     6c0:	1c 16       	cp	r1, r28
     6c2:	1d 06       	cpc	r1, r29
     6c4:	34 f0       	brlt	.+12     	; 0x6d2 <DecodeBytesToIntMSBFirst+0x42>
     6c6:	2d c0       	rjmp	.+90     	; 0x722 <DecodeBytesToIntMSBFirst+0x92>
     6c8:	c4 e0       	ldi	r28, 0x04	; 4
     6ca:	d0 e0       	ldi	r29, 0x00	; 0
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DecodeBytesToIntMSBFirst+0x42>
     6ce:	c4 e0       	ldi	r28, 0x04	; 4
     6d0:	d0 e0       	ldi	r29, 0x00	; 0
     6d2:	dc 01       	movw	r26, r24
     6d4:	a6 0f       	add	r26, r22
     6d6:	b7 1f       	adc	r27, r23
     6d8:	9e 01       	movw	r18, r28
     6da:	21 50       	subi	r18, 0x01	; 1
     6dc:	31 09       	sbc	r19, r1
     6de:	22 0f       	add	r18, r18
     6e0:	33 1f       	adc	r19, r19
     6e2:	22 0f       	add	r18, r18
     6e4:	33 1f       	adc	r19, r19
     6e6:	22 0f       	add	r18, r18
     6e8:	33 1f       	adc	r19, r19
     6ea:	e0 e0       	ldi	r30, 0x00	; 0
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	c1 2c       	mov	r12, r1
     6f0:	d1 2c       	mov	r13, r1
     6f2:	76 01       	movw	r14, r12
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
     6f4:	4d 91       	ld	r20, X+
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	02 2e       	mov	r0, r18
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <DecodeBytesToIntMSBFirst+0x70>
     6fc:	44 0f       	add	r20, r20
     6fe:	55 1f       	adc	r21, r21
     700:	0a 94       	dec	r0
     702:	e2 f7       	brpl	.-8      	; 0x6fc <DecodeBytesToIntMSBFirst+0x6c>
     704:	05 2e       	mov	r0, r21
     706:	00 0c       	add	r0, r0
     708:	66 0b       	sbc	r22, r22
     70a:	77 0b       	sbc	r23, r23
     70c:	c4 2a       	or	r12, r20
     70e:	d5 2a       	or	r13, r21
     710:	e6 2a       	or	r14, r22
     712:	f7 2a       	or	r15, r23
        length = endIndex - startIndex + 1;
        if (length > 4) { length = 4; }
        if (length < 1) { length = 0; }
    }

    for (int i = 0; i < length; i++) 
     714:	31 96       	adiw	r30, 0x01	; 1
     716:	28 50       	subi	r18, 0x08	; 8
     718:	31 09       	sbc	r19, r1
     71a:	ec 17       	cp	r30, r28
     71c:	fd 07       	cpc	r31, r29
     71e:	54 f3       	brlt	.-44     	; 0x6f4 <DecodeBytesToIntMSBFirst+0x64>
     720:	03 c0       	rjmp	.+6      	; 0x728 <DecodeBytesToIntMSBFirst+0x98>
}

int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
    int length = 4;
    int32_t decodedData = 0; 
     722:	c1 2c       	mov	r12, r1
     724:	d1 2c       	mov	r13, r1
     726:	76 01       	movw	r14, r12
    for (int i = 0; i < length; i++) 
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
    }
    return decodedData;
}
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	df 90       	pop	r13
     736:	cf 90       	pop	r12
     738:	08 95       	ret

0000073a <GetScienceMotorPWMFromPacket>:
	packetToAssemble->data[1] = servo;
	packetToAssemble->data[2] = degrees;
}

int16_t GetScienceMotorPWMFromPacket(CANPacket *packet){
	return DecodeBytesToIntMSBFirst(packet->data, 1, 2);
     73a:	42 e0       	ldi	r20, 0x02	; 2
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	61 e0       	ldi	r22, 0x01	; 1
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	03 96       	adiw	r24, 0x03	; 3
     744:	a5 df       	rcall	.-182    	; 0x690 <DecodeBytesToIntMSBFirst>
}
     746:	cb 01       	movw	r24, r22
     748:	08 95       	ret

0000074a <GetScienceServoAngleFromPacket>:

uint8_t GetScienceServoAngleFromPacket(CANPacket *packet){
	return packet->data[2];
}
     74a:	fc 01       	movw	r30, r24
     74c:	85 81       	ldd	r24, Z+5	; 0x05
     74e:	08 95       	ret

00000750 <GetScienceMotorIDFromPacket>:

uint8_t GetScienceMotorIDFromPacket(CANPacket *packet){
	return packet->data[3];
}
     750:	fc 01       	movw	r30, r24
     752:	86 81       	ldd	r24, Z+6	; 0x06
     754:	08 95       	ret

00000756 <GetScienceServoIDFromPacket>:

uint8_t GetScienceServoIDFromPacket(CANPacket *packet){
	return packet->data[1];
     756:	fc 01       	movw	r30, r24
     758:	84 81       	ldd	r24, Z+4	; 0x04
     75a:	08 95       	ret

0000075c <I2C_init>:
/*Initialize I2C
  The bitrate of the I2C bus in KHz
*/
void I2C_init(uint16_t bitrate){
	//PORTD |= 3; //Enable pullup
	TWSR = 0; //No Prescaling
     75c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = ((16000L / bitrate) - 16) / 2;
     760:	9c 01       	movw	r18, r24
     762:	40 e0       	ldi	r20, 0x00	; 0
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	60 e8       	ldi	r22, 0x80	; 128
     768:	7e e3       	ldi	r23, 0x3E	; 62
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	7b d6       	rcall	.+3318   	; 0x1466 <__divmodsi4>
     770:	ba 01       	movw	r22, r20
     772:	a9 01       	movw	r20, r18
     774:	40 51       	subi	r20, 0x10	; 16
     776:	51 09       	sbc	r21, r1
     778:	61 09       	sbc	r22, r1
     77a:	71 09       	sbc	r23, r1
     77c:	db 01       	movw	r26, r22
     77e:	ca 01       	movw	r24, r20
     780:	1a f4       	brpl	.+6      	; 0x788 <I2C_init+0x2c>
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	a1 1d       	adc	r26, r1
     786:	b1 1d       	adc	r27, r1
     788:	b5 95       	asr	r27
     78a:	a7 95       	ror	r26
     78c:	97 95       	ror	r25
     78e:	87 95       	ror	r24
     790:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR = 1 << TWEN; //Enable I2C
     794:	84 e0       	ldi	r24, 0x04	; 4
     796:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     79a:	08 95       	ret

0000079c <I2C_start>:
}

/*Start an I2C transaction*/
void I2C_start(){
	TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
     79c:	84 ea       	ldi	r24, 0xA4	; 164
     79e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     7a2:	ec eb       	ldi	r30, 0xBC	; 188
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	88 23       	and	r24, r24
     7aa:	ec f7       	brge	.-6      	; 0x7a6 <I2C_start+0xa>
}
     7ac:	08 95       	ret

000007ae <I2C_stop>:

/*Stop an I2C transaction*/
void I2C_stop(){
    TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
     7ae:	84 e9       	ldi	r24, 0x94	; 148
     7b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7b4:	08 95       	ret

000007b6 <I2C_write>:
	//_delay_us(10);
}

/*Write a byte to a I2C device*/
void I2C_write(uint8_t byte){
	TWDR = byte;
     7b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = ((1<< TWINT) | (1<<TWEN));
     7ba:	84 e8       	ldi	r24, 0x84	; 132
     7bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1 <<TWINT))); //Wait for write to complete
     7c0:	ec eb       	ldi	r30, 0xBC	; 188
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	88 23       	and	r24, r24
     7c8:	ec f7       	brge	.-6      	; 0x7c4 <I2C_write+0xe>
}
     7ca:	08 95       	ret

000007cc <I2C_read>:

/*Read a byte from an I2C device
	Setting ack to one enables sending an acknowledge pulse*/
uint8_t I2C_read(uint8_t ack){
	TWCR = ((1<< TWINT) | (1<<TWEN) | ((!!ack)<<TWEA));
     7cc:	81 11       	cpse	r24, r1
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <I2C_read+0x8>
     7d0:	84 e8       	ldi	r24, 0x84	; 132
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <I2C_read+0xa>
     7d4:	84 ec       	ldi	r24, 0xC4	; 196
     7d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1 <<TWINT))); //Wait for something to read
     7da:	ec eb       	ldi	r30, 0xBC	; 188
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 81       	ld	r24, Z
     7e0:	88 23       	and	r24, r24
     7e2:	ec f7       	brge	.-6      	; 0x7de <I2C_read+0x12>
	return TWDR;
     7e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     7e8:	08 95       	ret

000007ea <update_LEDS>:

/*Call this from a timer interrupt to update the debug LEDs
Parameters:
uint16_t count: The timer count
*/
void inline update_LEDS(uint16_t count){
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
	int i;
	uint8_t v;
	if(!LED_states){
     7ee:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <LED_states>
     7f2:	21 11       	cpse	r18, r1
     7f4:	0c c0       	rjmp	.+24     	; 0x80e <update_LEDS+0x24>
		PORTG &= ~3;
     7f6:	84 b3       	in	r24, 0x14	; 20
     7f8:	8c 7f       	andi	r24, 0xFC	; 252
     7fa:	84 bb       	out	0x14, r24	; 20
		PORTB &= ~(7 | 6);
     7fc:	85 b1       	in	r24, 0x05	; 5
     7fe:	88 7f       	andi	r24, 0xF8	; 248
     800:	85 b9       	out	0x05, r24	; 5
		return;
     802:	67 c0       	rjmp	.+206    	; 0x8d2 <update_LEDS+0xe8>
     804:	4f 5f       	subi	r20, 0xFF	; 255
     806:	5f 4f       	sbci	r21, 0xFF	; 255
     808:	6f 5f       	subi	r22, 0xFF	; 255
     80a:	7f 4f       	sbci	r23, 0xFF	; 255
     80c:	0b c0       	rjmp	.+22     	; 0x824 <update_LEDS+0x3a>
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
				} else { //i == 2
					PORTG &= ~(1<<3);
				}
				break;
			case 1:
				if(count % 4 != 0){
     816:	dc 01       	movw	r26, r24
     818:	a3 70       	andi	r26, 0x03	; 3
     81a:	bb 27       	eor	r27, r27
				if(i == 0){
					PORTB ^= 1<<6;
					} else if(i == 1){
					PORTB ^= 1<<7;
					} else { //i == 2
					PORTG ^= 1<<3;
     81c:	c8 e0       	ldi	r28, 0x08	; 8
			case 1:
				if(count % 4 != 0){
					return;
				}
				if(i == 0){
					PORTB ^= 1<<6;
     81e:	d0 e4       	ldi	r29, 0x40	; 64
					} else { //i == 2
					PORTG ^= 1<<3;
				}
				break;
			case 2:
				if(count % 2 != 0){
     820:	81 70       	andi	r24, 0x01	; 1
     822:	99 27       	eor	r25, r25
		PORTB &= ~(7 | 6);
		return;
	}
	for(i = 0;i < 3;i++){
		v = (LED_states >> (2*i)) & 3;
		switch(v){
     824:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <LED_states>
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	fa 01       	movw	r30, r20
     82c:	ee 0f       	add	r30, r30
     82e:	ff 1f       	adc	r31, r31
     830:	02 c0       	rjmp	.+4      	; 0x836 <update_LEDS+0x4c>
     832:	35 95       	asr	r19
     834:	27 95       	ror	r18
     836:	ea 95       	dec	r30
     838:	e2 f7       	brpl	.-8      	; 0x832 <update_LEDS+0x48>
     83a:	23 70       	andi	r18, 0x03	; 3
     83c:	21 30       	cpi	r18, 0x01	; 1
     83e:	91 f0       	breq	.+36     	; 0x864 <update_LEDS+0x7a>
     840:	28 f0       	brcs	.+10     	; 0x84c <update_LEDS+0x62>
     842:	22 30       	cpi	r18, 0x02	; 2
     844:	19 f1       	breq	.+70     	; 0x88c <update_LEDS+0xa2>
     846:	23 30       	cpi	r18, 0x03	; 3
     848:	a9 f1       	breq	.+106    	; 0x8b4 <update_LEDS+0xca>
     84a:	3f c0       	rjmp	.+126    	; 0x8ca <update_LEDS+0xe0>
			case 0:
				if(i == 0){
     84c:	41 15       	cp	r20, r1
     84e:	51 05       	cpc	r21, r1
     850:	11 f4       	brne	.+4      	; 0x856 <update_LEDS+0x6c>
					PORTB &= ~(1<<6);
     852:	2e 98       	cbi	0x05, 6	; 5
     854:	d7 cf       	rjmp	.-82     	; 0x804 <update_LEDS+0x1a>
				} else if(i == 1){
     856:	41 30       	cpi	r20, 0x01	; 1
     858:	51 05       	cpc	r21, r1
     85a:	11 f4       	brne	.+4      	; 0x860 <update_LEDS+0x76>
					PORTB &= ~(1<<7);
     85c:	2f 98       	cbi	0x05, 7	; 5
     85e:	d2 cf       	rjmp	.-92     	; 0x804 <update_LEDS+0x1a>
				} else { //i == 2
					PORTG &= ~(1<<3);
     860:	a3 98       	cbi	0x14, 3	; 20
     862:	33 c0       	rjmp	.+102    	; 0x8ca <update_LEDS+0xe0>
				}
				break;
			case 1:
				if(count % 4 != 0){
     864:	10 97       	sbiw	r26, 0x00	; 0
     866:	a9 f5       	brne	.+106    	; 0x8d2 <update_LEDS+0xe8>
					return;
				}
				if(i == 0){
     868:	41 15       	cp	r20, r1
     86a:	51 05       	cpc	r21, r1
     86c:	21 f4       	brne	.+8      	; 0x876 <update_LEDS+0x8c>
					PORTB ^= 1<<6;
     86e:	25 b1       	in	r18, 0x05	; 5
     870:	2d 27       	eor	r18, r29
     872:	25 b9       	out	0x05, r18	; 5
     874:	c7 cf       	rjmp	.-114    	; 0x804 <update_LEDS+0x1a>
					} else if(i == 1){
     876:	41 30       	cpi	r20, 0x01	; 1
     878:	51 05       	cpc	r21, r1
     87a:	21 f4       	brne	.+8      	; 0x884 <update_LEDS+0x9a>
					PORTB ^= 1<<7;
     87c:	25 b1       	in	r18, 0x05	; 5
     87e:	20 58       	subi	r18, 0x80	; 128
     880:	25 b9       	out	0x05, r18	; 5
     882:	c0 cf       	rjmp	.-128    	; 0x804 <update_LEDS+0x1a>
					} else { //i == 2
					PORTG ^= 1<<3;
     884:	24 b3       	in	r18, 0x14	; 20
     886:	2c 27       	eor	r18, r28
     888:	24 bb       	out	0x14, r18	; 20
     88a:	1f c0       	rjmp	.+62     	; 0x8ca <update_LEDS+0xe0>
				}
				break;
			case 2:
				if(count % 2 != 0){
     88c:	00 97       	sbiw	r24, 0x00	; 0
     88e:	09 f5       	brne	.+66     	; 0x8d2 <update_LEDS+0xe8>
					return;
				}
				if(i == 0){
     890:	41 15       	cp	r20, r1
     892:	51 05       	cpc	r21, r1
     894:	21 f4       	brne	.+8      	; 0x89e <update_LEDS+0xb4>
					PORTB ^= 1<<6;
     896:	25 b1       	in	r18, 0x05	; 5
     898:	2d 27       	eor	r18, r29
     89a:	25 b9       	out	0x05, r18	; 5
     89c:	b3 cf       	rjmp	.-154    	; 0x804 <update_LEDS+0x1a>
				} else if(i == 1){
     89e:	41 30       	cpi	r20, 0x01	; 1
     8a0:	51 05       	cpc	r21, r1
     8a2:	21 f4       	brne	.+8      	; 0x8ac <update_LEDS+0xc2>
					PORTB ^= 1<<7;
     8a4:	25 b1       	in	r18, 0x05	; 5
     8a6:	20 58       	subi	r18, 0x80	; 128
     8a8:	25 b9       	out	0x05, r18	; 5
     8aa:	ac cf       	rjmp	.-168    	; 0x804 <update_LEDS+0x1a>
				} else { //i == 2
					PORTG ^= 1<<3;
     8ac:	24 b3       	in	r18, 0x14	; 20
     8ae:	2c 27       	eor	r18, r28
     8b0:	24 bb       	out	0x14, r18	; 20
     8b2:	0b c0       	rjmp	.+22     	; 0x8ca <update_LEDS+0xe0>
				}
				break;
			case 3:
				if(i == 0){
     8b4:	41 15       	cp	r20, r1
     8b6:	51 05       	cpc	r21, r1
     8b8:	11 f4       	brne	.+4      	; 0x8be <update_LEDS+0xd4>
					PORTB |= 1<<6;
     8ba:	2e 9a       	sbi	0x05, 6	; 5
     8bc:	a3 cf       	rjmp	.-186    	; 0x804 <update_LEDS+0x1a>
				} else if(i == 1){
     8be:	41 30       	cpi	r20, 0x01	; 1
     8c0:	51 05       	cpc	r21, r1
     8c2:	11 f4       	brne	.+4      	; 0x8c8 <update_LEDS+0xde>
					PORTB |= 1<<7;
     8c4:	2f 9a       	sbi	0x05, 7	; 5
     8c6:	9e cf       	rjmp	.-196    	; 0x804 <update_LEDS+0x1a>
				} else { //i == 2
					PORTG |= 1<<3;
     8c8:	a3 9a       	sbi	0x14, 3	; 20
	if(!LED_states){
		PORTG &= ~3;
		PORTB &= ~(7 | 6);
		return;
	}
	for(i = 0;i < 3;i++){
     8ca:	63 30       	cpi	r22, 0x03	; 3
     8cc:	71 05       	cpc	r23, r1
     8ce:	0c f4       	brge	.+2      	; 0x8d2 <update_LEDS+0xe8>
     8d0:	99 cf       	rjmp	.-206    	; 0x804 <update_LEDS+0x1a>
				}
				break;
				
		}
	}
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <set_RGB>:
 Where <led> is the led number from 0-2
 R[led] = the red value (0-255) for LED <led>
 G[led] = the green value (0-255) for LED <led>
 B[led] = the blue value (0-255) for LED <led>
*/
void set_RGB(uint8_t *R, uint8_t *G, uint8_t *B){
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
	cli();
     8dc:	f8 94       	cli
     8de:	fc 01       	movw	r30, r24
     8e0:	c6 2f       	mov	r28, r22
     8e2:	d7 2f       	mov	r29, r23
     8e4:	a4 2f       	mov	r26, r20
     8e6:	b5 2f       	mov	r27, r21
     8e8:	bc 01       	movw	r22, r24
     8ea:	6d 5f       	subi	r22, 0xFD	; 253
     8ec:	7f 4f       	sbci	r23, 0xFF	; 255
	for(int led = 0;led < 3;led++){
		uint8_t r = R[led];
     8ee:	31 91       	ld	r19, Z+
		uint8_t g = G[led];
     8f0:	49 91       	ld	r20, Y+
		uint8_t b = B[led];
     8f2:	2d 91       	ld	r18, X+
     8f4:	98 e0       	ldi	r25, 0x08	; 8
		uint8_t count = 8;
		while(count--){
			uint8_t res = g & 128;
     8f6:	54 2f       	mov	r21, r20
     8f8:	50 78       	andi	r21, 0x80	; 128
			PORTG |= 1<<4;
     8fa:	a4 9a       	sbi	0x14, 4	; 20
			g <<= 1;
     8fc:	44 0f       	add	r20, r20
			if(res){
     8fe:	55 23       	and	r21, r21
     900:	09 f4       	brne	.+2      	; 0x904 <set_RGB+0x2c>
     902:	36 c0       	rjmp	.+108    	; 0x970 <set_RGB+0x98>
	...
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
     910:	00 00       	nop
			}
			PORTG &= ~(1<<4);
     912:	a4 98       	cbi	0x14, 4	; 20
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
			}
			asm("nop");
     914:	00 00       	nop
     916:	91 50       	subi	r25, 0x01	; 1
	for(int led = 0;led < 3;led++){
		uint8_t r = R[led];
		uint8_t g = G[led];
		uint8_t b = B[led];
		uint8_t count = 8;
		while(count--){
     918:	71 f7       	brne	.-36     	; 0x8f6 <set_RGB+0x1e>
     91a:	98 e0       	ldi	r25, 0x08	; 8
			}
			asm("nop");
		}
		count = 8;
		while(count--){
			uint8_t res = r & 128;
     91c:	43 2f       	mov	r20, r19
     91e:	40 78       	andi	r20, 0x80	; 128
			PORTG |= 1<<4;
     920:	a4 9a       	sbi	0x14, 4	; 20
			r <<= 1;
     922:	33 0f       	add	r19, r19
			if(res){
     924:	44 23       	and	r20, r20
     926:	09 f4       	brne	.+2      	; 0x92a <set_RGB+0x52>
     928:	2a c0       	rjmp	.+84     	; 0x97e <set_RGB+0xa6>
	...
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
     936:	00 00       	nop
			}
			PORTG &= ~(1<<4);
     938:	a4 98       	cbi	0x14, 4	; 20
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
			}
			asm("nop");
     93a:	00 00       	nop
     93c:	91 50       	subi	r25, 0x01	; 1
				asm("nop");
			}
			asm("nop");
		}
		count = 8;
		while(count--){
     93e:	71 f7       	brne	.-36     	; 0x91c <set_RGB+0x44>
     940:	98 e0       	ldi	r25, 0x08	; 8
			}
			asm("nop");
		}
		count = 8;
		while(count--){
			uint8_t res = b & 128;
     942:	32 2f       	mov	r19, r18
     944:	30 78       	andi	r19, 0x80	; 128
			PORTG |= 1<<4;
     946:	a4 9a       	sbi	0x14, 4	; 20
			b <<= 1;
     948:	22 0f       	add	r18, r18
			if(res){
     94a:	33 23       	and	r19, r19
     94c:	f9 f0       	breq	.+62     	; 0x98c <set_RGB+0xb4>
	...
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
     95a:	00 00       	nop
			}
			PORTG &= ~(1<<4);
     95c:	a4 98       	cbi	0x14, 4	; 20
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
			}
			asm("nop");
     95e:	00 00       	nop
     960:	91 50       	subi	r25, 0x01	; 1
				asm("nop");
			}
			asm("nop");
		}
		count = 8;
		while(count--){
     962:	79 f7       	brne	.-34     	; 0x942 <set_RGB+0x6a>
 G[led] = the green value (0-255) for LED <led>
 B[led] = the blue value (0-255) for LED <led>
*/
void set_RGB(uint8_t *R, uint8_t *G, uint8_t *B){
	cli();
	for(int led = 0;led < 3;led++){
     964:	e6 17       	cp	r30, r22
     966:	f7 07       	cpc	r31, r23
     968:	09 f0       	breq	.+2      	; 0x96c <set_RGB+0x94>
     96a:	c1 cf       	rjmp	.-126    	; 0x8ee <set_RGB+0x16>
				asm("nop");
			}
			asm("nop");
		}
	}
	sei();
     96c:	78 94       	sei
     96e:	15 c0       	rjmp	.+42     	; 0x99a <set_RGB+0xc2>
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
			}
			PORTG &= ~(1<<4);
     970:	a4 98       	cbi	0x14, 4	; 20
	...
			if(!res){
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
     97a:	00 00       	nop
     97c:	cb cf       	rjmp	.-106    	; 0x914 <set_RGB+0x3c>
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
			}
			PORTG &= ~(1<<4);
     97e:	a4 98       	cbi	0x14, 4	; 20
	...
			if(!res){
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
     988:	00 00       	nop
     98a:	d7 cf       	rjmp	.-82     	; 0x93a <set_RGB+0x62>
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
			}
			PORTG &= ~(1<<4);
     98c:	a4 98       	cbi	0x14, 4	; 20
	...
			if(!res){
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
     996:	00 00       	nop
     998:	e2 cf       	rjmp	.-60     	; 0x95e <set_RGB+0x86>
			}
			asm("nop");
		}
	}
	sei();
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <main>:
#include "dac.h"
#include "meow.h"

void handle_CAN_packet(CANPacket *packet);

int main(){
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	61 97       	sbiw	r28, 0x11	; 17
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
	DDRD = 1<<4;
     9b4:	80 e1       	ldi	r24, 0x10	; 16
     9b6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 1<<4;
     9b8:	8b b9       	out	0x0b, r24	; 11
	DDRB = 1<<6;
     9ba:	80 e4       	ldi	r24, 0x40	; 64
     9bc:	84 b9       	out	0x04, r24	; 4
	PORTB = 1<<6;
     9be:	85 b9       	out	0x05, r24	; 5
	PORTA = 0xF0; //Enable DIP switch pullups
     9c0:	90 ef       	ldi	r25, 0xF0	; 240
     9c2:	92 b9       	out	0x02, r25	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c4:	2f ef       	ldi	r18, 0xFF	; 255
     9c6:	34 e3       	ldi	r19, 0x34	; 52
     9c8:	9c e0       	ldi	r25, 0x0C	; 12
     9ca:	21 50       	subi	r18, 0x01	; 1
     9cc:	30 40       	sbci	r19, 0x00	; 0
     9ce:	90 40       	sbci	r25, 0x00	; 0
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <main+0x2a>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <main+0x34>
     9d4:	00 00       	nop
	_delay_ms(250);
	DDRG |= 1<<4;
     9d6:	9c 9a       	sbi	0x13, 4	; 19
	PORTB = 0;
     9d8:	15 b8       	out	0x05, r1	; 5
	uint8_t H[3] = {64, 64, 64};
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	8a 83       	std	Y+2, r24	; 0x02
     9de:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t L[3] = {0, 0, 0};
     9e0:	1c 82       	std	Y+4, r1	; 0x04
     9e2:	1d 82       	std	Y+5, r1	; 0x05
     9e4:	1e 82       	std	Y+6, r1	; 0x06
	setup_timers();
     9e6:	46 d4       	rcall	.+2188   	; 0x1274 <setup_timers>
	I2C_init(333);
     9e8:	8d e4       	ldi	r24, 0x4D	; 77
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	b7 de       	rcall	.-658    	; 0x75c <I2C_init>
	cli();
     9ee:	f8 94       	cli
	set_RGB(H, L, L);
     9f0:	ae 01       	movw	r20, r28
     9f2:	4c 5f       	subi	r20, 0xFC	; 252
     9f4:	5f 4f       	sbci	r21, 0xFF	; 255
     9f6:	ba 01       	movw	r22, r20
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	6d df       	rcall	.-294    	; 0x8d8 <set_RGB>
     9fe:	2f ef       	ldi	r18, 0xFF	; 255
     a00:	31 ee       	ldi	r19, 0xE1	; 225
     a02:	84 e0       	ldi	r24, 0x04	; 4
     a04:	21 50       	subi	r18, 0x01	; 1
     a06:	30 40       	sbci	r19, 0x00	; 0
     a08:	80 40       	sbci	r24, 0x00	; 0
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <main+0x64>
     a0c:	00 c0       	rjmp	.+0      	; 0xa0e <main+0x6e>
     a0e:	00 00       	nop
	_delay_ms(100);
	//play_audio(meow, sizeof(meow));
	set_RGB(L, L, L);
     a10:	ae 01       	movw	r20, r28
     a12:	4c 5f       	subi	r20, 0xFC	; 252
     a14:	5f 4f       	sbci	r21, 0xFF	; 255
     a16:	ba 01       	movw	r22, r20
     a18:	ca 01       	movw	r24, r20
     a1a:	5e df       	rcall	.-324    	; 0x8d8 <set_RGB>
	//dac_write(0);
	PORTD = 0;
     a1c:	1b b8       	out	0x0b, r1	; 11
	sei();
     a1e:	78 94       	sei
#define USART_TX_BUF_SZ 16 //UART TX buffer size
#define USART_RX_BUF_SZ 16 //UART RX buffer size

/*Returns the value of the binary representation of the dipswitch*/
uint8_t inline get_dip_switch(){
	return ((~PINA) >> 4) & 0xF;
     a20:	80 b1       	in	r24, 0x00	; 0
	//wdt_enable(WDTO_2S);
	InitCAN(DEVICE_GROUP_SCIENCE, get_dip_switch());
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	80 95       	com	r24
     a26:	90 95       	com	r25
     a28:	95 95       	asr	r25
     a2a:	87 95       	ror	r24
     a2c:	95 95       	asr	r25
     a2e:	87 95       	ror	r24
     a30:	95 95       	asr	r25
     a32:	87 95       	ror	r24
     a34:	95 95       	asr	r25
     a36:	87 95       	ror	r24
     a38:	8f 70       	andi	r24, 0x0F	; 15
     a3a:	68 2f       	mov	r22, r24
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	87 e0       	ldi	r24, 0x07	; 7
	init_servos();
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	02 d2       	rcall	.+1028   	; 0xe48 <InitCAN>
	init_motor();
     a44:	97 d3       	rcall	.+1838   	; 0x1174 <init_servos>
     a46:	0b d0       	rcall	.+22     	; 0xa5e <init_motor>
		//PORTE = 8;
		write_PWM(3, 10);
		while(1);*/
	CANPacket packet;
	while(1){
		if(PollAndReceiveCANPacket(&packet) == 0){
     a48:	ce 01       	movw	r24, r28
     a4a:	07 96       	adiw	r24, 0x07	; 7
     a4c:	4d d2       	rcall	.+1178   	; 0xee8 <PollAndReceiveCANPacket>
     a4e:	89 2b       	or	r24, r25
			//set_LED(LED_CAN, 3);
		//	update_LEDS(get_mS()/40);
			handle_CAN_packet(&packet);
     a50:	19 f4       	brne	.+6      	; 0xa58 <main+0xb8>
     a52:	ce 01       	movw	r24, r28
     a54:	07 96       	adiw	r24, 0x07	; 7
     a56:	6c dd       	rcall	.-1320   	; 0x530 <handle_CAN_packet>
			//set_LED(LED_CAN, 0);
			//update_LEDS(get_mS()/40);
		}
		motor_control_tick();
     a58:	64 d0       	rcall	.+200    	; 0xb22 <motor_control_tick>
     a5a:	a8 95       	wdr
		wdt_reset();
     a5c:	f5 cf       	rjmp	.-22     	; 0xa48 <main+0xa8>

00000a5e <init_motor>:

int16_t motor_powers[3];
int32_t last_update[3];

/*Initializes the motor controller and sets some reasonable defaults*/
void init_motor(){
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
	DDRE |= (1 << 3) | (1 << 4) | (1 << 5); //set motor pwm pins to outputs
     a62:	8d b1       	in	r24, 0x0d	; 13
     a64:	88 63       	ori	r24, 0x38	; 56
     a66:	8d b9       	out	0x0d, r24	; 13
	DDRB |= (1 << 3) | (1 << 4) | (1 << 5); //set motor direction pins to outputs
     a68:	84 b1       	in	r24, 0x04	; 4
     a6a:	88 63       	ori	r24, 0x38	; 56
     a6c:	84 b9       	out	0x04, r24	; 4
	for(int m = 0;m < 3;m++){
		motor_powers[m] = 0;
     a6e:	c9 e0       	ldi	r28, 0x09	; 9
     a70:	d1 e0       	ldi	r29, 0x01	; 1
     a72:	19 82       	std	Y+1, r1	; 0x01
     a74:	18 82       	st	Y, r1
		write_PWM(m + 3, 0);
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	ce d2       	rcall	.+1436   	; 0x101a <write_PWM>
/*Initializes the motor controller and sets some reasonable defaults*/
void init_motor(){
	DDRE |= (1 << 3) | (1 << 4) | (1 << 5); //set motor pwm pins to outputs
	DDRB |= (1 << 3) | (1 << 4) | (1 << 5); //set motor direction pins to outputs
	for(int m = 0;m < 3;m++){
		motor_powers[m] = 0;
     a7e:	1b 82       	std	Y+3, r1	; 0x03
     a80:	1a 82       	std	Y+2, r1	; 0x02
		write_PWM(m + 3, 0);
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	c8 d2       	rcall	.+1424   	; 0x101a <write_PWM>
/*Initializes the motor controller and sets some reasonable defaults*/
void init_motor(){
	DDRE |= (1 << 3) | (1 << 4) | (1 << 5); //set motor pwm pins to outputs
	DDRB |= (1 << 3) | (1 << 4) | (1 << 5); //set motor direction pins to outputs
	for(int m = 0;m < 3;m++){
		motor_powers[m] = 0;
     a8a:	1d 82       	std	Y+5, r1	; 0x05
     a8c:	1c 82       	std	Y+4, r1	; 0x04
		write_PWM(m + 3, 0);
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	85 e0       	ldi	r24, 0x05	; 5
	}
	init_encoders();
     a94:	c2 d2       	rcall	.+1412   	; 0x101a <write_PWM>
     a96:	39 db       	rcall	.-2446   	; 0x10a <init_encoders>
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <set_motor_direction>:

void set_motor_direction(uint8_t motor, uint8_t dir){
	dir = !!dir;
	if(motor > 2){
     a9e:	83 30       	cpi	r24, 0x03	; 3
     aa0:	b0 f4       	brcc	.+44     	; 0xace <set_motor_direction+0x30>
		return;
	}
	motor += 3;
	dir <<= motor;
     aa2:	21 e0       	ldi	r18, 0x01	; 1
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	61 11       	cpse	r22, r1
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <set_motor_direction+0x10>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	8d 5f       	subi	r24, 0xFD	; 253
     ab0:	a9 01       	movw	r20, r18
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <set_motor_direction+0x1a>
     ab4:	44 0f       	add	r20, r20
     ab6:	55 1f       	adc	r21, r21
     ab8:	8a 95       	dec	r24
     aba:	e2 f7       	brpl	.-8      	; 0xab4 <set_motor_direction+0x16>
     abc:	ca 01       	movw	r24, r20
	PORTB &= ~dir;
     abe:	95 b1       	in	r25, 0x05	; 5
     ac0:	28 2f       	mov	r18, r24
     ac2:	20 95       	com	r18
     ac4:	92 23       	and	r25, r18
     ac6:	95 b9       	out	0x05, r25	; 5
	PORTB |= dir;
     ac8:	95 b1       	in	r25, 0x05	; 5
     aca:	89 2b       	or	r24, r25
     acc:	85 b9       	out	0x05, r24	; 5
     ace:	08 95       	ret

00000ad0 <set_motor_power>:
/*Sets the motor power more safely
  Parameters:
  uint8_t motor: selects which motor to set the power of
  int16_t power: the motor power to set -1023 to +1023
  Negative values reverse the motor*/
void set_motor_power(uint8_t motor, int16_t power){
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
	if(motor < 0 || motor > 2){
     ad4:	83 30       	cpi	r24, 0x03	; 3
     ad6:	10 f5       	brcc	.+68     	; 0xb1c <set_motor_power+0x4c>
     ad8:	26 2f       	mov	r18, r22
     ada:	37 2f       	mov	r19, r23
     adc:	21 30       	cpi	r18, 0x01	; 1
     ade:	9c ef       	ldi	r25, 0xFC	; 252
     ae0:	39 07       	cpc	r19, r25
     ae2:	14 f4       	brge	.+4      	; 0xae8 <set_motor_power+0x18>
     ae4:	21 e0       	ldi	r18, 0x01	; 1
     ae6:	3c ef       	ldi	r19, 0xFC	; 252
		power = -1023;
	}
	if(power > 1023){
		power = 1023;
	}
	motor_powers[motor] = power;
     ae8:	c8 2f       	mov	r28, r24
     aea:	d0 e0       	ldi	r29, 0x00	; 0
     aec:	fe 01       	movw	r30, r28
     aee:	ee 0f       	add	r30, r30
     af0:	ff 1f       	adc	r31, r31
     af2:	e7 5f       	subi	r30, 0xF7	; 247
     af4:	fe 4f       	sbci	r31, 0xFE	; 254
     af6:	21 15       	cp	r18, r1
     af8:	84 e0       	ldi	r24, 0x04	; 4
     afa:	38 07       	cpc	r19, r24
     afc:	14 f0       	brlt	.+4      	; 0xb02 <set_motor_power+0x32>
     afe:	2f ef       	ldi	r18, 0xFF	; 255
     b00:	33 e0       	ldi	r19, 0x03	; 3
     b02:	31 83       	std	Z+1, r19	; 0x01
     b04:	20 83       	st	Z, r18
	last_update[motor] = get_mS();
     b06:	d8 d3       	rcall	.+1968   	; 0x12b8 <get_mS>
     b08:	cc 0f       	add	r28, r28
     b0a:	dd 1f       	adc	r29, r29
     b0c:	cc 0f       	add	r28, r28
     b0e:	dd 1f       	adc	r29, r29
     b10:	c1 5f       	subi	r28, 0xF1	; 241
     b12:	de 4f       	sbci	r29, 0xFE	; 254
     b14:	68 83       	st	Y, r22
     b16:	79 83       	std	Y+1, r23	; 0x01
     b18:	8a 83       	std	Y+2, r24	; 0x02
     b1a:	9b 83       	std	Y+3, r25	; 0x03
}
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <motor_control_tick>:

/*Update the motors. Call in a loop*/
void motor_control_tick(){
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	0f 2e       	mov	r0, r31
     b2e:	f9 e0       	ldi	r31, 0x09	; 9
     b30:	ef 2e       	mov	r14, r31
     b32:	f1 e0       	ldi	r31, 0x01	; 1
     b34:	ff 2e       	mov	r15, r31
     b36:	f0 2d       	mov	r31, r0
	for(uint8_t motor = 0;motor < 3;motor++){
     b38:	c0 e0       	ldi	r28, 0x00	; 0
		if(get_mS() - last_update[motor] > MOTOR_SET_TIMEOUT){
     b3a:	be d3       	rcall	.+1916   	; 0x12b8 <get_mS>
			/*If more than set time has elapsed without an update to this motor, turn it off*/
			//motor_powers[motor] = 0;
		}
		int16_t power = motor_powers[motor];
     b3c:	f7 01       	movw	r30, r14
     b3e:	01 91       	ld	r16, Z+
     b40:	11 91       	ld	r17, Z+
     b42:	7f 01       	movw	r14, r30
		if(power < 0){
     b44:	11 23       	and	r17, r17
     b46:	3c f4       	brge	.+14     	; 0xb56 <motor_control_tick+0x34>
			set_motor_direction(motor, 1);
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	8c 2f       	mov	r24, r28
     b4c:	a8 df       	rcall	.-176    	; 0xa9e <set_motor_direction>
			power = -power;
     b4e:	11 95       	neg	r17
     b50:	01 95       	neg	r16
     b52:	11 09       	sbc	r17, r1
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <motor_control_tick+0x3a>
		} else {
			set_motor_direction(motor, 0);
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	8c 2f       	mov	r24, r28
     b5a:	a1 df       	rcall	.-190    	; 0xa9e <set_motor_direction>
		}
		write_PWM(motor + 3, power);
     b5c:	b8 01       	movw	r22, r16
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 0f       	add	r24, r28
     b62:	5b d2       	rcall	.+1206   	; 0x101a <write_PWM>
	last_update[motor] = get_mS();
}

/*Update the motors. Call in a loop*/
void motor_control_tick(){
	for(uint8_t motor = 0;motor < 3;motor++){
     b64:	cf 5f       	subi	r28, 0xFF	; 255
     b66:	c3 30       	cpi	r28, 0x03	; 3
     b68:	41 f7       	brne	.-48     	; 0xb3a <motor_control_tick+0x18>
		} else {
			set_motor_direction(motor, 0);
		}
		write_PWM(motor + 3, power);
	}
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	08 95       	ret

00000b76 <disable_mob_interrupt>:
	CANPAGE = ((mob & 0x0F) << 4);
}

/*Disables the interrupt for the specified MOb*/
void disable_mob_interrupt(uint8_t mob){
	if(mob < 8){
     b76:	88 30       	cpi	r24, 0x08	; 8
     b78:	80 f4       	brcc	.+32     	; 0xb9a <disable_mob_interrupt+0x24>
		CANIE2 &= ~(1 << mob);
     b7a:	ee ed       	ldi	r30, 0xDE	; 222
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	40 81       	ld	r20, Z
     b80:	21 e0       	ldi	r18, 0x01	; 1
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	b9 01       	movw	r22, r18
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <disable_mob_interrupt+0x16>
     b88:	66 0f       	add	r22, r22
     b8a:	77 1f       	adc	r23, r23
     b8c:	8a 95       	dec	r24
     b8e:	e2 f7       	brpl	.-8      	; 0xb88 <disable_mob_interrupt+0x12>
     b90:	cb 01       	movw	r24, r22
     b92:	80 95       	com	r24
     b94:	84 23       	and	r24, r20
     b96:	80 83       	st	Z, r24
     b98:	08 95       	ret
		} else {
		CANIE1 &= ~(1 << (mob - 8));
     b9a:	ef ed       	ldi	r30, 0xDF	; 223
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	40 81       	ld	r20, Z
     ba0:	88 50       	subi	r24, 0x08	; 8
     ba2:	21 e0       	ldi	r18, 0x01	; 1
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	b9 01       	movw	r22, r18
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <disable_mob_interrupt+0x38>
     baa:	66 0f       	add	r22, r22
     bac:	77 1f       	adc	r23, r23
     bae:	8a 95       	dec	r24
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <disable_mob_interrupt+0x34>
     bb2:	cb 01       	movw	r24, r22
     bb4:	80 95       	com	r24
     bb6:	84 23       	and	r24, r20
     bb8:	80 83       	st	Z, r24
     bba:	08 95       	ret

00000bbc <enable_mob_interrupt>:
	}
}

/*Enable the interrupt for the specified MOb*/
void enable_mob_interrupt(uint8_t mob){
	if(mob < 8){
     bbc:	88 30       	cpi	r24, 0x08	; 8
     bbe:	78 f4       	brcc	.+30     	; 0xbde <enable_mob_interrupt+0x22>
		CANIE2 |= (1 << mob);
     bc0:	ee ed       	ldi	r30, 0xDE	; 222
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	40 81       	ld	r20, Z
     bc6:	21 e0       	ldi	r18, 0x01	; 1
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	b9 01       	movw	r22, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <enable_mob_interrupt+0x16>
     bce:	66 0f       	add	r22, r22
     bd0:	77 1f       	adc	r23, r23
     bd2:	8a 95       	dec	r24
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <enable_mob_interrupt+0x12>
     bd6:	cb 01       	movw	r24, r22
     bd8:	84 2b       	or	r24, r20
     bda:	80 83       	st	Z, r24
     bdc:	08 95       	ret
		} else {
		CANIE1 |= (1 << (mob - 8));
     bde:	ef ed       	ldi	r30, 0xDF	; 223
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	40 81       	ld	r20, Z
     be4:	88 50       	subi	r24, 0x08	; 8
     be6:	21 e0       	ldi	r18, 0x01	; 1
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	b9 01       	movw	r22, r18
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <enable_mob_interrupt+0x36>
     bee:	66 0f       	add	r22, r22
     bf0:	77 1f       	adc	r23, r23
     bf2:	8a 95       	dec	r24
     bf4:	e2 f7       	brpl	.-8      	; 0xbee <enable_mob_interrupt+0x32>
     bf6:	cb 01       	movw	r24, r22
     bf8:	84 2b       	or	r24, r20
     bfa:	80 83       	st	Z, r24
     bfc:	08 95       	ret

00000bfe <__vector_18>:
	}
}

/*CAN controller interrupt handler*/
ISR(CANIT_vect){
     bfe:	1f 92       	push	r1
     c00:	0f 92       	push	r0
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	0f 92       	push	r0
     c06:	11 24       	eor	r1, r1
     c08:	0b b6       	in	r0, 0x3b	; 59
     c0a:	0f 92       	push	r0
     c0c:	2f 93       	push	r18
     c0e:	3f 93       	push	r19
     c10:	4f 93       	push	r20
     c12:	5f 93       	push	r21
     c14:	6f 93       	push	r22
     c16:	7f 93       	push	r23
     c18:	8f 93       	push	r24
     c1a:	9f 93       	push	r25
     c1c:	af 93       	push	r26
     c1e:	bf 93       	push	r27
     c20:	cf 93       	push	r28
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
	uint8_t canpage = CANPAGE; //Save CAN page
     c26:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if((CANHPMOB & 0xF0) != 0xF0){ //Message io?
     c2a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     c2e:	80 7f       	andi	r24, 0xF0	; 240
     c30:	80 3f       	cpi	r24, 0xF0	; 240
     c32:	a1 f1       	breq	.+104    	; 0xc9c <__vector_18+0x9e>
		int mob = (CANHPMOB >> 4);
     c34:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     c38:	82 95       	swap	r24
     c3a:	8f 70       	andi	r24, 0x0F	; 15

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     c3c:	90 e1       	ldi	r25, 0x10	; 16
     c3e:	89 9f       	mul	r24, r25
     c40:	90 01       	movw	r18, r0
     c42:	11 24       	eor	r1, r1
     c44:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
ISR(CANIT_vect){
	uint8_t canpage = CANPAGE; //Save CAN page
	if((CANHPMOB & 0xF0) != 0xF0){ //Message io?
		int mob = (CANHPMOB >> 4);
		select_mob(mob);
		if(CANSTMOB & (1 << TXOK)){ //TX
     c48:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     c4c:	96 ff       	sbrs	r25, 6
     c4e:	08 c0       	rjmp	.+16     	; 0xc60 <__vector_18+0x62>
			/*Reset the MOb*/
			CANSTMOB &= 0;
     c50:	ee ee       	ldi	r30, 0xEE	; 238
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	90 81       	ld	r25, Z
     c56:	10 82       	st	Z, r1
			CANCDMOB = 0;
     c58:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			enable_mob_interrupt(mob);
     c5c:	af df       	rcall	.-162    	; 0xbbc <enable_mob_interrupt>
     c5e:	22 c0       	rjmp	.+68     	; 0xca4 <__vector_18+0xa6>
		} else { //RX
			msgs_av++; //Increase count of messages
     c60:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <msgs_av>
     c64:	9f 5f       	subi	r25, 0xFF	; 255
     c66:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <msgs_av>
			rxed_mobs[!!(mob & 8)] |= (1 << (mob & 7)); // Mark which MOb has a message
     c6a:	e8 2f       	mov	r30, r24
     c6c:	e6 95       	lsr	r30
     c6e:	e6 95       	lsr	r30
     c70:	e6 95       	lsr	r30
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	e4 5e       	subi	r30, 0xE4	; 228
     c76:	fe 4f       	sbci	r31, 0xFE	; 254
     c78:	90 81       	ld	r25, Z
     c7a:	48 2f       	mov	r20, r24
     c7c:	47 70       	andi	r20, 0x07	; 7
     c7e:	21 e0       	ldi	r18, 0x01	; 1
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__vector_18+0x8a>
     c84:	22 0f       	add	r18, r18
     c86:	33 1f       	adc	r19, r19
     c88:	4a 95       	dec	r20
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <__vector_18+0x86>
     c8c:	29 2b       	or	r18, r25
     c8e:	20 83       	st	Z, r18
			CANSTMOB &= 0; //Reset the MOb
     c90:	ee ee       	ldi	r30, 0xEE	; 238
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	90 81       	ld	r25, Z
			disable_mob_interrupt(mob);
     c96:	10 82       	st	Z, r1
     c98:	6e df       	rcall	.-292    	; 0xb76 <disable_mob_interrupt>
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__vector_18+0xa6>
		}
	} else {
		CANGIT |= 0; //Error interrupt - Handle these?
     c9c:	ea ed       	ldi	r30, 0xDA	; 218
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	80 83       	st	Z, r24
	}
	CANPAGE = canpage; //restore CAN page
     ca4:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}
     ca8:	ff 91       	pop	r31
     caa:	ef 91       	pop	r30
     cac:	cf 91       	pop	r28
     cae:	bf 91       	pop	r27
     cb0:	af 91       	pop	r26
     cb2:	9f 91       	pop	r25
     cb4:	8f 91       	pop	r24
     cb6:	7f 91       	pop	r23
     cb8:	6f 91       	pop	r22
     cba:	5f 91       	pop	r21
     cbc:	4f 91       	pop	r20
     cbe:	3f 91       	pop	r19
     cc0:	2f 91       	pop	r18
     cc2:	0f 90       	pop	r0
     cc4:	0b be       	out	0x3b, r0	; 59
     cc6:	0f 90       	pop	r0
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	0f 90       	pop	r0
     ccc:	1f 90       	pop	r1
     cce:	18 95       	reti

00000cd0 <set_mob_rx_filter>:

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     cd0:	9c 01       	movw	r18, r24
     cd2:	33 27       	eor	r19, r19
     cd4:	22 95       	swap	r18
     cd6:	32 95       	swap	r19
     cd8:	30 7f       	andi	r19, 0xF0	; 240
     cda:	32 27       	eor	r19, r18
     cdc:	20 7f       	andi	r18, 0xF0	; 240
     cde:	32 27       	eor	r19, r18
     ce0:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
/*Reset the receive filter for the given MOb*/
void set_mob_rx_filter(int mob){
	select_mob(mob);
	uint16_t RX_mask = 0x3FF; // mask out priority bit, compare on everything else
	uint16_t RX_tag = 0x3F; //0th MOb is for broadcast packets, group = 0, serial = 0x3F
	if(mob > 0 && mob <= 2){ //1st und 2nd MOb is for device group broadcasts, match device group and 0x3F serial
     ce4:	9c 01       	movw	r18, r24
     ce6:	21 50       	subi	r18, 0x01	; 1
     ce8:	31 09       	sbc	r19, r1
     cea:	22 30       	cpi	r18, 0x02	; 2
     cec:	31 05       	cpc	r19, r1
     cee:	40 f4       	brcc	.+16     	; 0xd00 <set_mob_rx_filter+0x30>
		RX_tag = (devGrp << 6) | 0x3F;
     cf0:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <devGrp>
     cf4:	20 e4       	ldi	r18, 0x40	; 64
     cf6:	82 9f       	mul	r24, r18
     cf8:	c0 01       	movw	r24, r0
     cfa:	11 24       	eor	r1, r1
     cfc:	8f 63       	ori	r24, 0x3F	; 63
     cfe:	0f c0       	rjmp	.+30     	; 0xd1e <set_mob_rx_filter+0x4e>
	} else if(mob > 2 && mob <= 4){ //2nd and 3rd MOb is for the device specific message. Match the whole ID
     d00:	03 97       	sbiw	r24, 0x03	; 3
     d02:	02 97       	sbiw	r24, 0x02	; 2
     d04:	50 f4       	brcc	.+20     	; 0xd1a <set_mob_rx_filter+0x4a>
		RX_tag = (devGrp << 6) | devSer;
     d06:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <devGrp>
     d0a:	20 e4       	ldi	r18, 0x40	; 64
     d0c:	82 9f       	mul	r24, r18
     d0e:	c0 01       	movw	r24, r0
     d10:	11 24       	eor	r1, r1
     d12:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <devSer>
     d16:	82 2b       	or	r24, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <set_mob_rx_filter+0x4e>

/*Reset the receive filter for the given MOb*/
void set_mob_rx_filter(int mob){
	select_mob(mob);
	uint16_t RX_mask = 0x3FF; // mask out priority bit, compare on everything else
	uint16_t RX_tag = 0x3F; //0th MOb is for broadcast packets, group = 0, serial = 0x3F
     d1a:	8f e3       	ldi	r24, 0x3F	; 63
     d1c:	90 e0       	ldi	r25, 0x00	; 0
		RX_tag = (devGrp << 6) | 0x3F;
	} else if(mob > 2 && mob <= 4){ //2nd and 3rd MOb is for the device specific message. Match the whole ID
		RX_tag = (devGrp << 6) | devSer;
	}

	CANIDM4 = 0;
     d1e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM3 = 0;
     d22:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDT4 = 0;
     d26:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0;
     d2a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = ((RX_tag & 7) << 5);
     d2e:	28 2f       	mov	r18, r24
     d30:	22 95       	swap	r18
     d32:	22 0f       	add	r18, r18
     d34:	20 7e       	andi	r18, 0xE0	; 224
     d36:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = ((RX_tag & 0x7F8) >> 3);
     d3a:	88 7f       	andi	r24, 0xF8	; 248
     d3c:	97 70       	andi	r25, 0x07	; 7
     d3e:	96 95       	lsr	r25
     d40:	87 95       	ror	r24
     d42:	96 95       	lsr	r25
     d44:	87 95       	ror	r24
     d46:	96 95       	lsr	r25
     d48:	87 95       	ror	r24
     d4a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDM2 = ((RX_mask & 7) << 5);
     d4e:	80 ee       	ldi	r24, 0xE0	; 224
     d50:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = ((RX_mask & 0x7F8) >> 3);
     d54:	8f e7       	ldi	r24, 0x7F	; 127
     d56:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
     d5a:	08 95       	ret

00000d5c <init_CAN>:
Parameters:
uint32_t rate: the baud rate selection
uint8_t txmobs: how many MOBs to dedicate to transmission
uint8_t mode: The mode to operate the CAN controller in
*/
void init_CAN(uint32_t rate, uint16_t deviceGroup, uint16_t deviceSerial){
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
	CANGCON |= (1<<SWRES); //reset the CAN controller
     d6a:	e8 ed       	ldi	r30, 0xD8	; 216
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	90 81       	ld	r25, Z
     d70:	91 60       	ori	r25, 0x01	; 1
     d72:	90 83       	st	Z, r25
	devGrp = deviceGroup; //Save the device group and serial
     d74:	40 93 1f 01 	sts	0x011F, r20	; 0x80011f <devGrp>
	devSer = deviceSerial;
     d78:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <devSer>
     d7c:	2f ef       	ldi	r18, 0xFF	; 255
     d7e:	31 ee       	ldi	r19, 0xE1	; 225
     d80:	94 e0       	ldi	r25, 0x04	; 4
     d82:	21 50       	subi	r18, 0x01	; 1
     d84:	30 40       	sbci	r19, 0x00	; 0
     d86:	90 40       	sbci	r25, 0x00	; 0
     d88:	e1 f7       	brne	.-8      	; 0xd82 <init_CAN+0x26>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <init_CAN+0x30>
     d8c:	00 00       	nop
	_delay_ms(100); //The CAN controller is a slow bitch to reset. Twiddle our thumbs while it resets
	/*Set up the rate*/
	CANBT1 = (uint32_t)(rate & 0xFF0000L) >> 16;
     d8e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = (uint32_t)(rate & 0x00FF00L) >> 8;
     d92:	70 93 e3 00 	sts	0x00E3, r23	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = (uint32_t)(rate & 0x0000FFL);
     d96:	60 93 e4 00 	sts	0x00E4, r22	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	CANGIE = (1 << CANIT) | (1 << ENRX) | (1 << ENTX); //Enable CAN interrupts
     d9a:	80 eb       	ldi	r24, 0xB0	; 176
     d9c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	CANTCON = 255; //Set the can timer to run at 1/2048th of F_CPU
     da0:	8f ef       	ldi	r24, 0xFF	; 255
     da2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	rxed_mobs[0] = rxed_mobs[1] = 0;
     da6:	ec e1       	ldi	r30, 0x1C	; 28
     da8:	f1 e0       	ldi	r31, 0x01	; 1
     daa:	11 82       	std	Z+1, r1	; 0x01
     dac:	10 82       	st	Z, r1
     dae:	c0 e0       	ldi	r28, 0x00	; 0
     db0:	d0 e0       	ldi	r29, 0x00	; 0
			CANSTMOB &= 0;
			set_mob_rx_filter(i);
			CANCDMOB = (1 << CONMOB1); //Mark RX mobs
			enable_mob_interrupt(i); // enable the receive interrupt
		} else {
			CANCDMOB = 0; //Mark as TX MOb
     db2:	0f ee       	ldi	r16, 0xEF	; 239
     db4:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
	/*Initialize MOBs*/
	for(i = 0;i < 15;i++){
		if(i <= 4){ /*MObs <= 4 are RX mobs*/
			/*Set up the match registers*/
			CANSTMOB &= 0;
     db6:	0f 2e       	mov	r0, r31
     db8:	fe ee       	ldi	r31, 0xEE	; 238
     dba:	ef 2e       	mov	r14, r31
     dbc:	f1 2c       	mov	r15, r1
     dbe:	f0 2d       	mov	r31, r0
			set_mob_rx_filter(i);
			CANCDMOB = (1 << CONMOB1); //Mark RX mobs
     dc0:	68 94       	set
     dc2:	dd 24       	eor	r13, r13
     dc4:	d7 f8       	bld	r13, 7
	CANTCON = 255; //Set the can timer to run at 1/2048th of F_CPU
	rxed_mobs[0] = rxed_mobs[1] = 0;
	uint8_t i;
	/*Initialize MOBs*/
	for(i = 0;i < 15;i++){
		if(i <= 4){ /*MObs <= 4 are RX mobs*/
     dc6:	c5 30       	cpi	r28, 0x05	; 5
     dc8:	50 f4       	brcc	.+20     	; 0xdde <init_CAN+0x82>
			/*Set up the match registers*/
			CANSTMOB &= 0;
     dca:	f7 01       	movw	r30, r14
     dcc:	80 81       	ld	r24, Z
     dce:	10 82       	st	Z, r1
			set_mob_rx_filter(i);
     dd0:	ce 01       	movw	r24, r28
     dd2:	7e df       	rcall	.-260    	; 0xcd0 <set_mob_rx_filter>
			CANCDMOB = (1 << CONMOB1); //Mark RX mobs
     dd4:	f8 01       	movw	r30, r16
     dd6:	d0 82       	st	Z, r13
			enable_mob_interrupt(i); // enable the receive interrupt
     dd8:	8c 2f       	mov	r24, r28
     dda:	f0 de       	rcall	.-544    	; 0xbbc <enable_mob_interrupt>
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <init_CAN+0x86>
		} else {
			CANCDMOB = 0; //Mark as TX MOb
     dde:	f8 01       	movw	r30, r16
     de0:	10 82       	st	Z, r1
     de2:	21 96       	adiw	r28, 0x01	; 1
	CANGIE = (1 << CANIT) | (1 << ENRX) | (1 << ENTX); //Enable CAN interrupts
	CANTCON = 255; //Set the can timer to run at 1/2048th of F_CPU
	rxed_mobs[0] = rxed_mobs[1] = 0;
	uint8_t i;
	/*Initialize MOBs*/
	for(i = 0;i < 15;i++){
     de4:	cf 30       	cpi	r28, 0x0F	; 15
     de6:	d1 05       	cpc	r29, r1
     de8:	71 f7       	brne	.-36     	; 0xdc6 <init_CAN+0x6a>
			enable_mob_interrupt(i); // enable the receive interrupt
		} else {
			CANCDMOB = 0; //Mark as TX MOb
		}
	}
	msgs_av = 0;
     dea:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <msgs_av>
	//Enable the CAN controller
	CANGCON = (1 << ENASTB);
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	08 95       	ret

00000e04 <find_free_mob>:

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     e04:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
		select_mob(i);
		status = CANCDMOB;
     e08:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		if(!(status & ((1 << CONMOB1) | (1 << CONMOB0)))){
     e0c:	80 7c       	andi	r24, 0xC0	; 192
     e0e:	99 f0       	breq	.+38     	; 0xe36 <find_free_mob+0x32>
     e10:	21 e0       	ldi	r18, 0x01	; 1
     e12:	30 e0       	ldi	r19, 0x00	; 0

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     e14:	ad ee       	ldi	r26, 0xED	; 237
     e16:	b0 e0       	ldi	r27, 0x00	; 0
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
		select_mob(i);
		status = CANCDMOB;
     e18:	ef ee       	ldi	r30, 0xEF	; 239
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	82 2f       	mov	r24, r18

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     e1e:	a9 01       	movw	r20, r18
     e20:	42 95       	swap	r20
     e22:	52 95       	swap	r21
     e24:	50 7f       	andi	r21, 0xF0	; 240
     e26:	54 27       	eor	r21, r20
     e28:	40 7f       	andi	r20, 0xF0	; 240
     e2a:	54 27       	eor	r21, r20
     e2c:	4c 93       	st	X, r20
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
		select_mob(i);
		status = CANCDMOB;
     e2e:	90 81       	ld	r25, Z
		if(!(status & ((1 << CONMOB1) | (1 << CONMOB0)))){
     e30:	90 7c       	andi	r25, 0xC0	; 192
     e32:	19 f4       	brne	.+6      	; 0xe3a <find_free_mob+0x36>
     e34:	08 95       	ret

/*Finds a free MOb or returns -1 if they're all used*/
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
     e36:	80 e0       	ldi	r24, 0x00	; 0
		select_mob(i);
		status = CANCDMOB;
		if(!(status & ((1 << CONMOB1) | (1 << CONMOB0)))){
			return i;
     e38:	08 95       	ret
     e3a:	2f 5f       	subi	r18, 0xFF	; 255
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255

/*Finds a free MOb or returns -1 if they're all used*/
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
     e3e:	2f 30       	cpi	r18, 0x0F	; 15
     e40:	31 05       	cpc	r19, r1
     e42:	61 f7       	brne	.-40     	; 0xe1c <find_free_mob+0x18>
		status = CANCDMOB;
		if(!(status & ((1 << CONMOB1) | (1 << CONMOB0)))){
			return i;
		}
	}
	return -1;
     e44:	8f ef       	ldi	r24, 0xFF	; 255
}
     e46:	08 95       	ret

00000e48 <InitCAN>:


void InitCAN(int deviceGroup, int deviceAddress)
{
     e48:	9b 01       	movw	r18, r22
    init_CAN(CAN_125_BAUD, deviceGroup, deviceAddress);
     e4a:	ac 01       	movw	r20, r24
     e4c:	63 e1       	ldi	r22, 0x13	; 19
     e4e:	74 e0       	ldi	r23, 0x04	; 4
     e50:	8e e1       	ldi	r24, 0x1E	; 30
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	83 cf       	rjmp	.-250    	; 0xd5c <init_CAN>
     e56:	08 95       	ret

00000e58 <SendCANPacket>:
}

int SendCANPacket(CANPacket *packetToSend)
{
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	ec 01       	movw	r28, r24
    uint8_t i;
	int8_t mob = find_free_mob();
     e5e:	d2 df       	rcall	.-92     	; 0xe04 <find_free_mob>
	if(mob == -1){
     e60:	8f 3f       	cpi	r24, 0xFF	; 255
     e62:	e9 f1       	breq	.+122    	; 0xede <SendCANPacket+0x86>

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     e64:	90 e1       	ldi	r25, 0x10	; 16
     e66:	89 9f       	mul	r24, r25
     e68:	90 01       	movw	r18, r0
     e6a:	11 24       	eor	r1, r1
     e6c:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	int8_t mob = find_free_mob();
	if(mob == -1){
		return 0x02; //No MObs available
	}
	select_mob(mob);
	CANSTMOB &= 0;
     e70:	ee ee       	ldi	r30, 0xEE	; 238
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	90 81       	ld	r25, Z
     e76:	10 82       	st	Z, r1
	CANCDMOB = packetToSend->dlc & 0x0F;
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	9f 70       	andi	r25, 0x0F	; 15
     e7c:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	for(i = 0;i < packetToSend->dlc && i < 8;i++){ //Copy the data into the MOb
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	99 23       	and	r25, r25
     e84:	69 f0       	breq	.+26     	; 0xea0 <SendCANPacket+0x48>
     e86:	fe 01       	movw	r30, r28
     e88:	33 96       	adiw	r30, 0x03	; 3
     e8a:	90 e0       	ldi	r25, 0x00	; 0
		CANMSG = packetToSend->data[i];
     e8c:	aa ef       	ldi	r26, 0xFA	; 250
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	21 91       	ld	r18, Z+
     e92:	2c 93       	st	X, r18
		return 0x02; //No MObs available
	}
	select_mob(mob);
	CANSTMOB &= 0;
	CANCDMOB = packetToSend->dlc & 0x0F;
	for(i = 0;i < packetToSend->dlc && i < 8;i++){ //Copy the data into the MOb
     e94:	9f 5f       	subi	r25, 0xFF	; 255
     e96:	2a 81       	ldd	r18, Y+2	; 0x02
     e98:	92 17       	cp	r25, r18
     e9a:	10 f4       	brcc	.+4      	; 0xea0 <SendCANPacket+0x48>
     e9c:	98 30       	cpi	r25, 0x08	; 8
     e9e:	c1 f7       	brne	.-16     	; 0xe90 <SendCANPacket+0x38>
		CANMSG = packetToSend->data[i];
	}
	CANIDT4 = 0; //CAN v2.0 - we don't care
     ea0:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0;
     ea4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = ((packetToSend->id & 7) << 5);
     ea8:	98 81       	ld	r25, Y
     eaa:	92 95       	swap	r25
     eac:	99 0f       	add	r25, r25
     eae:	90 7e       	andi	r25, 0xE0	; 224
     eb0:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = ((packetToSend->id & 0x7F8) >> 3);
     eb4:	28 81       	ld	r18, Y
     eb6:	39 81       	ldd	r19, Y+1	; 0x01
     eb8:	28 7f       	andi	r18, 0xF8	; 248
     eba:	37 70       	andi	r19, 0x07	; 7
     ebc:	36 95       	lsr	r19
     ebe:	27 95       	ror	r18
     ec0:	36 95       	lsr	r19
     ec2:	27 95       	ror	r18
     ec4:	36 95       	lsr	r19
     ec6:	27 95       	ror	r18
     ec8:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANCDMOB |= (1<<CONMOB0);
     ecc:	ef ee       	ldi	r30, 0xEF	; 239
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	90 81       	ld	r25, Z
     ed2:	90 64       	ori	r25, 0x40	; 64
	enable_mob_interrupt(mob); //Enable MOb interrupt
     ed4:	90 83       	st	Z, r25
     ed6:	72 de       	rcall	.-796    	; 0xbbc <enable_mob_interrupt>
	return 0;
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <SendCANPacket+0x8a>
int SendCANPacket(CANPacket *packetToSend)
{
    uint8_t i;
	int8_t mob = find_free_mob();
	if(mob == -1){
		return 0x02; //No MObs available
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	90 e0       	ldi	r25, 0x00	; 0
	CANIDT2 = ((packetToSend->id & 7) << 5);
	CANIDT1 = ((packetToSend->id & 0x7F8) >> 3);
	CANCDMOB |= (1<<CONMOB0);
	enable_mob_interrupt(mob); //Enable MOb interrupt
	return 0;
}
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	08 95       	ret

00000ee8 <PollAndReceiveCANPacket>:

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
	if(receivedPacket == NULL){
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	09 f4       	brne	.+2      	; 0xef4 <PollAndReceiveCANPacket+0xc>
     ef2:	81 c0       	rjmp	.+258    	; 0xff6 <PollAndReceiveCANPacket+0x10e>
	CANGCON = (1 << ENASTB);
}

/*Returns the number of CAN messages waiting*/
uint8_t inline CAN_msg_available(){
	return msgs_av;
     ef4:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <msgs_av>
	if(receivedPacket == NULL){
		return 0x02;
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
     ef8:	22 23       	and	r18, r18
     efa:	09 f4       	brne	.+2      	; 0xefe <PollAndReceiveCANPacket+0x16>
     efc:	7f c0       	rjmp	.+254    	; 0xffc <PollAndReceiveCANPacket+0x114>

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     efe:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
     f02:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <rxed_mobs>
     f06:	20 fd       	sbrc	r18, 0
     f08:	25 c0       	rjmp	.+74     	; 0xf54 <PollAndReceiveCANPacket+0x6c>
     f0a:	21 e0       	ldi	r18, 0x01	; 1
     f0c:	30 e0       	ldi	r19, 0x00	; 0

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     f0e:	ad ee       	ldi	r26, 0xED	; 237
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	12 2f       	mov	r17, r18
     f14:	a9 01       	movw	r20, r18
     f16:	42 95       	swap	r20
     f18:	52 95       	swap	r21
     f1a:	50 7f       	andi	r21, 0xF0	; 240
     f1c:	54 27       	eor	r21, r20
     f1e:	40 7f       	andi	r20, 0xF0	; 240
     f20:	54 27       	eor	r21, r20
     f22:	4c 93       	st	X, r20
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
     f24:	23 fb       	bst	r18, 3
     f26:	66 27       	eor	r22, r22
     f28:	60 f9       	bld	r22, 0
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	fb 01       	movw	r30, r22
     f2e:	e4 5e       	subi	r30, 0xE4	; 228
     f30:	fe 4f       	sbci	r31, 0xFE	; 254
     f32:	40 81       	ld	r20, Z
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	e2 2f       	mov	r30, r18
     f38:	e7 70       	andi	r30, 0x07	; 7
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <PollAndReceiveCANPacket+0x58>
     f3c:	55 95       	asr	r21
     f3e:	47 95       	ror	r20
     f40:	ea 95       	dec	r30
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <PollAndReceiveCANPacket+0x54>
     f44:	40 fd       	sbrc	r20, 0
     f46:	07 c0       	rjmp	.+14     	; 0xf56 <PollAndReceiveCANPacket+0x6e>
     f48:	2f 5f       	subi	r18, 0xFF	; 255
     f4a:	3f 4f       	sbci	r19, 0xFF	; 255
	if(!CAN_msg_available()){
		return 0x01;
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
     f4c:	2f 30       	cpi	r18, 0x0F	; 15
     f4e:	31 05       	cpc	r19, r1
     f50:	01 f7       	brne	.-64     	; 0xf12 <PollAndReceiveCANPacket+0x2a>
     f52:	57 c0       	rjmp	.+174    	; 0x1002 <PollAndReceiveCANPacket+0x11a>
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
     f54:	10 e0       	ldi	r17, 0x00	; 0
			break;
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
     f56:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     f5a:	2f 70       	andi	r18, 0x0F	; 15
     f5c:	fc 01       	movw	r30, r24
     f5e:	22 83       	std	Z+2, r18	; 0x02
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
     f60:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     f64:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     f68:	32 95       	swap	r19
     f6a:	36 95       	lsr	r19
     f6c:	37 70       	andi	r19, 0x07	; 7
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	44 0f       	add	r20, r20
     f72:	55 1f       	adc	r21, r21
     f74:	44 0f       	add	r20, r20
     f76:	55 1f       	adc	r21, r21
     f78:	44 0f       	add	r20, r20
     f7a:	55 1f       	adc	r21, r21
     f7c:	43 2b       	or	r20, r19
     f7e:	51 83       	std	Z+1, r21	; 0x01
     f80:	40 83       	st	Z, r20
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
     f82:	22 23       	and	r18, r18
     f84:	91 f0       	breq	.+36     	; 0xfaa <PollAndReceiveCANPacket+0xc2>
     f86:	33 96       	adiw	r30, 0x03	; 3
     f88:	21 50       	subi	r18, 0x01	; 1
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	2c 5f       	subi	r18, 0xFC	; 252
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	28 0f       	add	r18, r24
     f92:	39 1f       	adc	r19, r25
     f94:	0b 96       	adiw	r24, 0x0b	; 11
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
     f96:	aa ef       	ldi	r26, 0xFA	; 250
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	4c 91       	ld	r20, X
     f9c:	41 93       	st	Z+, r20
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
     f9e:	e2 17       	cp	r30, r18
     fa0:	f3 07       	cpc	r31, r19
     fa2:	19 f0       	breq	.+6      	; 0xfaa <PollAndReceiveCANPacket+0xc2>
     fa4:	8e 17       	cp	r24, r30
     fa6:	9f 07       	cpc	r25, r31
     fa8:	c1 f7       	brne	.-16     	; 0xf9a <PollAndReceiveCANPacket+0xb2>
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
	}
	//Atomically decrement the number of messages available
	cli();
     faa:	f8 94       	cli
	msgs_av--;
     fac:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <msgs_av>
     fb0:	81 50       	subi	r24, 0x01	; 1
     fb2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <msgs_av>
	sei();
     fb6:	78 94       	sei
	/*Reset the MOb*/
	set_mob_rx_filter(mob);
     fb8:	81 2f       	mov	r24, r17
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	89 de       	rcall	.-750    	; 0xcd0 <set_mob_rx_filter>
	enable_mob_interrupt(mob);
     fbe:	81 2f       	mov	r24, r17
     fc0:	fd dd       	rcall	.-1030   	; 0xbbc <enable_mob_interrupt>
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
     fc2:	13 fb       	bst	r17, 3
     fc4:	ff 27       	eor	r31, r31
     fc6:	f0 f9       	bld	r31, 0
     fc8:	cf 2f       	mov	r28, r31
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	d8 2f       	mov	r29, r24
     fce:	c4 5e       	subi	r28, 0xE4	; 228
     fd0:	de 4f       	sbci	r29, 0xFE	; 254
     fd2:	28 81       	ld	r18, Y
     fd4:	17 70       	andi	r17, 0x07	; 7
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <PollAndReceiveCANPacket+0xf8>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	1a 95       	dec	r17
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <PollAndReceiveCANPacket+0xf4>
     fe4:	80 95       	com	r24
     fe6:	82 23       	and	r24, r18
     fe8:	88 83       	st	Y, r24
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
     fea:	80 e8       	ldi	r24, 0x80	; 128
     fec:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	return 0;
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	08 c0       	rjmp	.+16     	; 0x1006 <PollAndReceiveCANPacket+0x11e>
}

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
	if(receivedPacket == NULL){
		return 0x02;
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	05 c0       	rjmp	.+10     	; 0x1006 <PollAndReceiveCANPacket+0x11e>
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
		return 0x01;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <PollAndReceiveCANPacket+0x11e>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
	enable_mob_interrupt(mob);
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
	return 0;
    
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	08 95       	ret

0000100e <getLocalDeviceSerial>:

uint8_t getLocalDeviceSerial()
{
    /*Return the DIP switch value*/
    return devSer;
}
    100e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <devSer>
    1012:	08 95       	ret

00001014 <getLocalDeviceGroup>:
uint8_t getLocalDeviceGroup()
{
    //Definitely board specific.
    return devGrp; // example value (also used for testing)
}
    1014:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <devGrp>
    1018:	08 95       	ret

0000101a <write_PWM>:
  uint8_t pin: The pin to set the PWM on (PE3, PE4, PE5)
  uint16_t pwm: 10-bit PWM value
*/
//void write_PWM(uint8_t port, uint8_t pin, uint16_t pwm){
void write_PWM(uint8_t pin, uint16_t pwm){
	pwm &= 1023;
    101a:	73 70       	andi	r23, 0x03	; 3
	switch(pin){
    101c:	84 30       	cpi	r24, 0x04	; 4
    101e:	71 f0       	breq	.+28     	; 0x103c <write_PWM+0x22>
    1020:	85 30       	cpi	r24, 0x05	; 5
    1022:	b1 f0       	breq	.+44     	; 0x1050 <write_PWM+0x36>
    1024:	83 30       	cpi	r24, 0x03	; 3
    1026:	e9 f4       	brne	.+58     	; 0x1062 <write_PWM+0x48>
		case PE3:
			TCCR3A |= (1 << COM3A1);
    1028:	e0 e9       	ldi	r30, 0x90	; 144
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	80 68       	ori	r24, 0x80	; 128
    1030:	80 83       	st	Z, r24
			OCR3A = pwm;
    1032:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1036:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
			break;
    103a:	08 95       	ret
		case PE4:
			TCCR3A |= (1 << COM3B1);
    103c:	e0 e9       	ldi	r30, 0x90	; 144
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	80 62       	ori	r24, 0x20	; 32
    1044:	80 83       	st	Z, r24
			OCR3B = pwm;
    1046:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    104a:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
			break;
    104e:	08 95       	ret
		case PE5:
			TCCR3A |= (1 << COM3C1);
    1050:	e0 e9       	ldi	r30, 0x90	; 144
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	88 60       	ori	r24, 0x08	; 8
    1058:	80 83       	st	Z, r24
			OCR3C = pwm;
    105a:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    105e:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1062:	08 95       	ret

00001064 <PCA9685_write>:
#define PCA9685_PIN    0x06

#define PCA9685_SLEEP_BIT       0x10
#define PCA9685_RESTART_BIT     0x80

void PCA9685_write(uint8_t reg, uint8_t val){
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	d8 2f       	mov	r29, r24
    106a:	c6 2f       	mov	r28, r22
	I2C_start();
    106c:	97 db       	rcall	.-2258   	; 0x79c <I2C_start>
	I2C_write(PCA9685_ADDR << 1);
    106e:	80 e8       	ldi	r24, 0x80	; 128
    1070:	a2 db       	rcall	.-2236   	; 0x7b6 <I2C_write>
	I2C_write(reg);
    1072:	8d 2f       	mov	r24, r29
    1074:	a0 db       	rcall	.-2240   	; 0x7b6 <I2C_write>
	I2C_write(val);
    1076:	8c 2f       	mov	r24, r28
    1078:	9e db       	rcall	.-2244   	; 0x7b6 <I2C_write>
    107a:	99 db       	rcall	.-2254   	; 0x7ae <I2C_stop>
	I2C_stop();
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
}
    1080:	08 95       	ret

00001082 <PCA9685_init>:
    1082:	60 e8       	ldi	r22, 0x80	; 128
    1084:	80 e0       	ldi	r24, 0x00	; 0

void PCA9685_init(){
	PCA9685_write(PCA9685_MODE1_REG, PCA9685_RESTART_BIT);
    1086:	ee df       	rcall	.-36     	; 0x1064 <PCA9685_write>
    1088:	8f e3       	ldi	r24, 0x3F	; 63
    108a:	9c e9       	ldi	r25, 0x9C	; 156
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	f1 f7       	brne	.-4      	; 0x108c <PCA9685_init+0xa>
    1090:	00 c0       	rjmp	.+0      	; 0x1092 <PCA9685_init+0x10>
    1092:	00 00       	nop
	_delay_ms(10);
	PCA9685_write(PCA9685_MODE1_REG, PCA9685_SLEEP_BIT);
    1094:	60 e1       	ldi	r22, 0x10	; 16
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	e5 df       	rcall	.-54     	; 0x1064 <PCA9685_write>
    109a:	8f e3       	ldi	r24, 0x3F	; 63
    109c:	9f e1       	ldi	r25, 0x1F	; 31
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <PCA9685_init+0x1c>
    10a2:	00 c0       	rjmp	.+0      	; 0x10a4 <PCA9685_init+0x22>
    10a4:	00 00       	nop
	_delay_ms(2);
	PCA9685_write(PCA9685_MODE1_REG, 0x00);
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	dc df       	rcall	.-72     	; 0x1064 <PCA9685_write>
    10ac:	8f e3       	ldi	r24, 0x3F	; 63
    10ae:	9f e1       	ldi	r25, 0x1F	; 31
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <PCA9685_init+0x2e>
    10b4:	00 c0       	rjmp	.+0      	; 0x10b6 <PCA9685_init+0x34>
    10b6:	00 00       	nop
    10b8:	08 95       	ret

000010ba <PCA9685_set_freq>:
	_delay_ms(2);
}

void PCA9685_set_freq(uint16_t freq){
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	8c 01       	movw	r16, r24
	uint8_t prescale = ((25000000L / 4096) / freq) - 1;
	I2C_start();
    10c2:	6c db       	rcall	.-2344   	; 0x79c <I2C_start>
	I2C_write((PCA9685_ADDR << 1) | 1);
    10c4:	81 e8       	ldi	r24, 0x81	; 129
    10c6:	77 db       	rcall	.-2322   	; 0x7b6 <I2C_write>
	I2C_write(PCA9685_MODE1_REG);
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	75 db       	rcall	.-2326   	; 0x7b6 <I2C_write>
	I2C_start();
    10cc:	67 db       	rcall	.-2354   	; 0x79c <I2C_start>
	uint8_t old_mode = I2C_read(0);
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	7d db       	rcall	.-2310   	; 0x7cc <I2C_read>
    10d2:	c8 2f       	mov	r28, r24
    10d4:	6c db       	rcall	.-2344   	; 0x7ae <I2C_stop>
	I2C_stop();
    10d6:	6c 2f       	mov	r22, r28
	
	PCA9685_write(PCA9685_MODE1_REG, (old_mode & 0x7F) | PCA9685_SLEEP_BIT);
    10d8:	6f 76       	andi	r22, 0x6F	; 111
    10da:	60 61       	ori	r22, 0x10	; 16
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	c2 df       	rcall	.-124    	; 0x1064 <PCA9685_write>
    10e0:	8f e3       	ldi	r24, 0x3F	; 63
    10e2:	9f e1       	ldi	r25, 0x1F	; 31
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <PCA9685_set_freq+0x2a>
    10e8:	00 c0       	rjmp	.+0      	; 0x10ea <PCA9685_set_freq+0x30>
    10ea:	00 00       	nop
    10ec:	98 01       	movw	r18, r16
    10ee:	40 e0       	ldi	r20, 0x00	; 0
	_delay_ms(2);
	PCA9685_write(PCA9685_PRESCALE, prescale);
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	67 ed       	ldi	r22, 0xD7	; 215
    10f4:	77 e1       	ldi	r23, 0x17	; 23
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	b5 d1       	rcall	.+874    	; 0x1466 <__divmodsi4>
    10fc:	6f ef       	ldi	r22, 0xFF	; 255
    10fe:	62 0f       	add	r22, r18
    1100:	8e ef       	ldi	r24, 0xFE	; 254
    1102:	b0 df       	rcall	.-160    	; 0x1064 <PCA9685_write>
    1104:	6c 2f       	mov	r22, r28
	PCA9685_write(PCA9685_MODE1_REG, old_mode);
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	ad df       	rcall	.-166    	; 0x1064 <PCA9685_write>
    110a:	8f e3       	ldi	r24, 0x3F	; 63
    110c:	9f e1       	ldi	r25, 0x1F	; 31
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <__stack+0xf>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <__stack+0x15>
    1114:	00 00       	nop
    1116:	6c 2f       	mov	r22, r28
	_delay_ms(2);
	PCA9685_write(PCA9685_MODE1_REG, old_mode | PCA9685_RESTART_BIT);
    1118:	60 68       	ori	r22, 0x80	; 128
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	a3 df       	rcall	.-186    	; 0x1064 <PCA9685_write>
    111e:	8f e3       	ldi	r24, 0x3F	; 63
    1120:	9f e1       	ldi	r25, 0x1F	; 31
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <__stack+0x23>
    1126:	00 c0       	rjmp	.+0      	; 0x1128 <__stack+0x29>
    1128:	00 00       	nop
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
	_delay_ms(2);
}
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <PCA9685_set_pwm>:
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17

void PCA9685_set_pwm(uint8_t pin, uint16_t pwm){
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	eb 01       	movw	r28, r22
	PCA9685_write(PCA9685_PIN + 4 * pin , (4095 - pwm) & 0xFF);
    113c:	08 2f       	mov	r16, r24
    113e:	00 0f       	add	r16, r16
    1140:	00 0f       	add	r16, r16
    1142:	60 95       	com	r22
    1144:	86 e0       	ldi	r24, 0x06	; 6
    1146:	80 0f       	add	r24, r16
    1148:	8d df       	rcall	.-230    	; 0x1064 <PCA9685_write>
	PCA9685_write(PCA9685_PIN + 4 * pin + 1, (4095 - pwm) >> 8);
    114a:	8f ef       	ldi	r24, 0xFF	; 255
    114c:	9f e0       	ldi	r25, 0x0F	; 15
    114e:	8c 1b       	sub	r24, r28
    1150:	9d 0b       	sbc	r25, r29
    1152:	69 2f       	mov	r22, r25
    1154:	87 e0       	ldi	r24, 0x07	; 7
    1156:	80 0f       	add	r24, r16
    1158:	85 df       	rcall	.-246    	; 0x1064 <PCA9685_write>
	PCA9685_write(PCA9685_PIN + 4 * pin + 2 , pwm & 0xFF);
    115a:	80 2f       	mov	r24, r16
    115c:	6c 2f       	mov	r22, r28
    115e:	88 5f       	subi	r24, 0xF8	; 248
    1160:	81 df       	rcall	.-254    	; 0x1064 <PCA9685_write>
	PCA9685_write(PCA9685_PIN + 4 * pin + 3, pwm >> 8);
    1162:	6d 2f       	mov	r22, r29
    1164:	89 e0       	ldi	r24, 0x09	; 9
    1166:	80 0f       	add	r24, r16
    1168:	7d df       	rcall	.-262    	; 0x1064 <PCA9685_write>
}
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	08 95       	ret

00001174 <init_servos>:

void init_servos(){
	PCA9685_init();
    1174:	86 df       	rcall	.-244    	; 0x1082 <PCA9685_init>
	PCA9685_set_freq(50);	
    1176:	82 e3       	ldi	r24, 0x32	; 50
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	9f cf       	rjmp	.-194    	; 0x10ba <PCA9685_set_freq>
    117c:	08 95       	ret

0000117e <set_servo_position>:
}

void set_servo_position(int servo, int degrees){
    117e:	9c 01       	movw	r18, r24
    1180:	64 3b       	cpi	r22, 0xB4	; 180
    1182:	71 05       	cpc	r23, r1
    1184:	14 f0       	brlt	.+4      	; 0x118a <set_servo_position+0xc>
    1186:	63 eb       	ldi	r22, 0xB3	; 179
    1188:	70 e0       	ldi	r23, 0x00	; 0
	if(degrees > 179) degrees = 179;
	if(degrees < 1) degrees = 1;
    118a:	16 16       	cp	r1, r22
    118c:	17 06       	cpc	r1, r23
    118e:	14 f0       	brlt	.+4      	; 0x1194 <set_servo_position+0x16>
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	70 e0       	ldi	r23, 0x00	; 0
	if(servo < 0 || servo > 2){
    1194:	23 30       	cpi	r18, 0x03	; 3
    1196:	31 05       	cpc	r19, r1
    1198:	68 f4       	brcc	.+26     	; 0x11b4 <set_servo_position+0x36>
		return;
	}
	PCA9685_set_pwm(servo, 102 + (degrees * 99) / 172);
    119a:	33 e6       	ldi	r19, 0x63	; 99
    119c:	36 9f       	mul	r19, r22
    119e:	c0 01       	movw	r24, r0
    11a0:	37 9f       	mul	r19, r23
    11a2:	90 0d       	add	r25, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	6c ea       	ldi	r22, 0xAC	; 172
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	28 d1       	rcall	.+592    	; 0x13fc <__divmodhi4>
    11ac:	6a 59       	subi	r22, 0x9A	; 154
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	82 2f       	mov	r24, r18
    11b2:	bf cf       	rjmp	.-130    	; 0x1132 <PCA9685_set_pwm>
    11b4:	08 95       	ret

000011b6 <__vector_15>:
#include "led.h"

volatile uint32_t TOF_Cnt; //Timer1 overflow counter
volatile uint8_t PID_due;

ISR(TIMER1_OVF_vect){ //This should fire every 20mS
    11b6:	1f 92       	push	r1
    11b8:	0f 92       	push	r0
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	0b b6       	in	r0, 0x3b	; 59
    11c2:	0f 92       	push	r0
    11c4:	2f 93       	push	r18
    11c6:	3f 93       	push	r19
    11c8:	4f 93       	push	r20
    11ca:	5f 93       	push	r21
    11cc:	6f 93       	push	r22
    11ce:	7f 93       	push	r23
    11d0:	8f 93       	push	r24
    11d2:	9f 93       	push	r25
    11d4:	af 93       	push	r26
    11d6:	bf 93       	push	r27
    11d8:	ef 93       	push	r30
    11da:	ff 93       	push	r31
	TOF_Cnt++;
    11dc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TOF_Cnt>
    11e0:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <TOF_Cnt+0x1>
    11e4:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <TOF_Cnt+0x2>
    11e8:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <TOF_Cnt+0x3>
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	a1 1d       	adc	r26, r1
    11f0:	b1 1d       	adc	r27, r1
    11f2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <TOF_Cnt>
    11f6:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <TOF_Cnt+0x1>
    11fa:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <TOF_Cnt+0x2>
    11fe:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <TOF_Cnt+0x3>
	if(TOF_Cnt % 8 == 0){
    1202:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TOF_Cnt>
    1206:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <TOF_Cnt+0x1>
    120a:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <TOF_Cnt+0x2>
    120e:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <TOF_Cnt+0x3>
    1212:	87 70       	andi	r24, 0x07	; 7
    1214:	99 27       	eor	r25, r25
    1216:	aa 27       	eor	r26, r26
    1218:	bb 27       	eor	r27, r27
    121a:	89 2b       	or	r24, r25
    121c:	8a 2b       	or	r24, r26
    121e:	8b 2b       	or	r24, r27
    1220:	49 f4       	brne	.+18     	; 0x1234 <__vector_15+0x7e>
		update_LEDS((uint16_t)TOF_Cnt);
    1222:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TOF_Cnt>
    1226:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <TOF_Cnt+0x1>
    122a:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <TOF_Cnt+0x2>
    122e:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <TOF_Cnt+0x3>
    1232:	db da       	rcall	.-2634   	; 0x7ea <update_LEDS>
	}
	if(TOF_Cnt % 2 == 0){
    1234:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TOF_Cnt>
    1238:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <TOF_Cnt+0x1>
    123c:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <TOF_Cnt+0x2>
    1240:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <TOF_Cnt+0x3>
    1244:	80 fd       	sbrc	r24, 0
    1246:	03 c0       	rjmp	.+6      	; 0x124e <__vector_15+0x98>
		PID_due = 1;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <PID_due>
	}
}
    124e:	ff 91       	pop	r31
    1250:	ef 91       	pop	r30
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	7f 91       	pop	r23
    125c:	6f 91       	pop	r22
    125e:	5f 91       	pop	r21
    1260:	4f 91       	pop	r20
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	0f 90       	pop	r0
    1268:	0b be       	out	0x3b, r0	; 59
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	0f 90       	pop	r0
    1270:	1f 90       	pop	r1
    1272:	18 95       	reti

00001274 <setup_timers>:

/*Set up the AVR's timers for PWM and time information*/
void setup_timers(){
	//Timer 0: Phase correct PWM, CLK/64
	TCCR0A = (1<<CS01) | (1<<CS00) | (1<<WGM00);
    1274:	83 e4       	ldi	r24, 0x43	; 67
    1276:	84 bd       	out	0x24, r24	; 36
	//Timer 1: Fast PWM, TOP=OCR1A, CLK/64
	//This makes timer 1 increment every 8 microseconds at 8 Mhz or every 4uS at 16MHz
	TCCR1B = (1<<CS11) | (1<<CS10)  | (1<<WGM13) | (1<<WGM12);
    1278:	8b e1       	ldi	r24, 0x1B	; 27
    127a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR1A = (1<<WGM11) | (1<<WGM10);
    127e:	93 e0       	ldi	r25, 0x03	; 3
    1280:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	OCR1A = 10000; //Count to 10000 before resetting
    1284:	20 e1       	ldi	r18, 0x10	; 16
    1286:	37 e2       	ldi	r19, 0x27	; 39
    1288:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    128c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCNT1 = 0;
    1290:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1294:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 = (1 << TOIE1); //Enable interrupt on match
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	
	//Timer 3: 10-bit phase correct PWM, CLK/64
	TCCR3A = (1<<WGM31) | (1<<WGM30);
    129e:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	//TCCR3B = (1<<CS31);
	TCCR3B = (1<<CS30);
    12a2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>

	TOF_Cnt = 0; //Clear the overflow counter
    12a6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TOF_Cnt>
    12aa:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <TOF_Cnt+0x1>
    12ae:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <TOF_Cnt+0x2>
    12b2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <TOF_Cnt+0x3>
    12b6:	08 95       	ret

000012b8 <get_mS>:
}

/*Returns the number of milliseconds since timer initialization*/
uint32_t get_mS(){
    12b8:	cf 92       	push	r12
    12ba:	df 92       	push	r13
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
	uint16_t timer_ticks = TCNT1;
    12c0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    12c4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	#ifdef REV_2
	return (TOF_Cnt * 20) + (timer_ticks/250L);
	#else
	return (TOF_Cnt * 40) + (timer_ticks/250L);
    12c8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TOF_Cnt>
    12cc:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <TOF_Cnt+0x1>
    12d0:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <TOF_Cnt+0x2>
    12d4:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <TOF_Cnt+0x3>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	aa 1f       	adc	r26, r26
    12de:	bb 1f       	adc	r27, r27
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	aa 1f       	adc	r26, r26
    12e6:	bb 1f       	adc	r27, r27
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	aa 1f       	adc	r26, r26
    12ee:	bb 1f       	adc	r27, r27
    12f0:	6c 01       	movw	r12, r24
    12f2:	7d 01       	movw	r14, r26
    12f4:	cc 0c       	add	r12, r12
    12f6:	dd 1c       	adc	r13, r13
    12f8:	ee 1c       	adc	r14, r14
    12fa:	ff 1c       	adc	r15, r15
    12fc:	cc 0c       	add	r12, r12
    12fe:	dd 1c       	adc	r13, r13
    1300:	ee 1c       	adc	r14, r14
    1302:	ff 1c       	adc	r15, r15
    1304:	c8 0e       	add	r12, r24
    1306:	d9 1e       	adc	r13, r25
    1308:	ea 1e       	adc	r14, r26
    130a:	fb 1e       	adc	r15, r27
    130c:	36 95       	lsr	r19
    130e:	27 95       	ror	r18
    1310:	a3 e1       	ldi	r26, 0x13	; 19
    1312:	b3 e8       	ldi	r27, 0x83	; 131
    1314:	c4 d0       	rcall	.+392    	; 0x149e <__umulhisi3>
    1316:	00 24       	eor	r0, r0
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	00 1c       	adc	r0, r0
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	00 1c       	adc	r0, r0
    1324:	89 2f       	mov	r24, r25
    1326:	90 2d       	mov	r25, r0
    1328:	a7 01       	movw	r20, r14
    132a:	96 01       	movw	r18, r12
    132c:	28 0f       	add	r18, r24
    132e:	39 1f       	adc	r19, r25
    1330:	41 1d       	adc	r20, r1
    1332:	51 1d       	adc	r21, r1
    1334:	ca 01       	movw	r24, r20
    1336:	b9 01       	movw	r22, r18
	#endif
}
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	08 95       	ret

00001342 <__vector_21>:

volatile char usart_TX_buf[USART_TX_BUF_SZ];
volatile char usart_RX_buf[USART_RX_BUF_SZ];
volatile uint8_t txbp, txend, rxbp;

ISR(USART0_RX_vect){
    1342:	1f 92       	push	r1
    1344:	0f 92       	push	r0
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	0f 92       	push	r0
    134a:	11 24       	eor	r1, r1
    134c:	0b b6       	in	r0, 0x3b	; 59
    134e:	0f 92       	push	r0
    1350:	8f 93       	push	r24
    1352:	ef 93       	push	r30
    1354:	ff 93       	push	r31
	if(rxbp > USART_RX_BUF_SZ){
    1356:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <rxbp>
    135a:	81 31       	cpi	r24, 0x11	; 17
    135c:	20 f0       	brcs	.+8      	; 0x1366 <__vector_21+0x24>
		rxbp = USART_RX_BUF_SZ;
    135e:	80 e1       	ldi	r24, 0x10	; 16
    1360:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rxbp>
		return;
    1364:	0c c0       	rjmp	.+24     	; 0x137e <__vector_21+0x3c>
	}
	usart_RX_buf[rxbp++] = UDR0;
    1366:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <rxbp>
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	8e 0f       	add	r24, r30
    136e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rxbp>
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1378:	e9 5c       	subi	r30, 0xC9	; 201
    137a:	fe 4f       	sbci	r31, 0xFE	; 254
    137c:	80 83       	st	Z, r24
}
    137e:	ff 91       	pop	r31
    1380:	ef 91       	pop	r30
    1382:	8f 91       	pop	r24
    1384:	0f 90       	pop	r0
    1386:	0b be       	out	0x3b, r0	; 59
    1388:	0f 90       	pop	r0
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	0f 90       	pop	r0
    138e:	1f 90       	pop	r1
    1390:	18 95       	reti

00001392 <__vector_22>:
ISR(USART0_UDRE_vect){
    1392:	1f 92       	push	r1
    1394:	0f 92       	push	r0
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	0f 92       	push	r0
    139a:	11 24       	eor	r1, r1
    139c:	0b b6       	in	r0, 0x3b	; 59
    139e:	0f 92       	push	r0
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	ef 93       	push	r30
    13a6:	ff 93       	push	r31
	UDR0 = usart_TX_buf[txbp++];
    13a8:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <txbp>
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	8e 0f       	add	r24, r30
    13b0:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <txbp>
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	eb 5d       	subi	r30, 0xDB	; 219
    13b8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ba:	80 81       	ld	r24, Z
    13bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(txbp >= txend || txbp > USART_TX_BUF_SZ){
    13c0:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <txbp>
    13c4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <txend>
    13c8:	98 17       	cp	r25, r24
    13ca:	20 f4       	brcc	.+8      	; 0x13d4 <__vector_22+0x42>
    13cc:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <txbp>
    13d0:	81 31       	cpi	r24, 0x11	; 17
    13d2:	48 f0       	brcs	.+18     	; 0x13e6 <__vector_22+0x54>
		UCSR0B &= ~(1 << UDRIE1);
    13d4:	e1 ec       	ldi	r30, 0xC1	; 193
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8f 7d       	andi	r24, 0xDF	; 223
    13dc:	80 83       	st	Z, r24
		txbp = txend = 0;
    13de:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <txend>
    13e2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <txbp>
	}
}
    13e6:	ff 91       	pop	r31
    13e8:	ef 91       	pop	r30
    13ea:	9f 91       	pop	r25
    13ec:	8f 91       	pop	r24
    13ee:	0f 90       	pop	r0
    13f0:	0b be       	out	0x3b, r0	; 59
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <__divmodhi4>:
    13fc:	97 fb       	bst	r25, 7
    13fe:	07 2e       	mov	r0, r23
    1400:	16 f4       	brtc	.+4      	; 0x1406 <__divmodhi4+0xa>
    1402:	00 94       	com	r0
    1404:	06 d0       	rcall	.+12     	; 0x1412 <__divmodhi4_neg1>
    1406:	77 fd       	sbrc	r23, 7
    1408:	08 d0       	rcall	.+16     	; 0x141a <__divmodhi4_neg2>
    140a:	58 d0       	rcall	.+176    	; 0x14bc <__udivmodhi4>
    140c:	07 fc       	sbrc	r0, 7
    140e:	05 d0       	rcall	.+10     	; 0x141a <__divmodhi4_neg2>
    1410:	3e f4       	brtc	.+14     	; 0x1420 <__divmodhi4_exit>

00001412 <__divmodhi4_neg1>:
    1412:	90 95       	com	r25
    1414:	81 95       	neg	r24
    1416:	9f 4f       	sbci	r25, 0xFF	; 255
    1418:	08 95       	ret

0000141a <__divmodhi4_neg2>:
    141a:	70 95       	com	r23
    141c:	61 95       	neg	r22
    141e:	7f 4f       	sbci	r23, 0xFF	; 255

00001420 <__divmodhi4_exit>:
    1420:	08 95       	ret

00001422 <__udivmodsi4>:
    1422:	a1 e2       	ldi	r26, 0x21	; 33
    1424:	1a 2e       	mov	r1, r26
    1426:	aa 1b       	sub	r26, r26
    1428:	bb 1b       	sub	r27, r27
    142a:	fd 01       	movw	r30, r26
    142c:	0d c0       	rjmp	.+26     	; 0x1448 <__udivmodsi4_ep>

0000142e <__udivmodsi4_loop>:
    142e:	aa 1f       	adc	r26, r26
    1430:	bb 1f       	adc	r27, r27
    1432:	ee 1f       	adc	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	a2 17       	cp	r26, r18
    1438:	b3 07       	cpc	r27, r19
    143a:	e4 07       	cpc	r30, r20
    143c:	f5 07       	cpc	r31, r21
    143e:	20 f0       	brcs	.+8      	; 0x1448 <__udivmodsi4_ep>
    1440:	a2 1b       	sub	r26, r18
    1442:	b3 0b       	sbc	r27, r19
    1444:	e4 0b       	sbc	r30, r20
    1446:	f5 0b       	sbc	r31, r21

00001448 <__udivmodsi4_ep>:
    1448:	66 1f       	adc	r22, r22
    144a:	77 1f       	adc	r23, r23
    144c:	88 1f       	adc	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	1a 94       	dec	r1
    1452:	69 f7       	brne	.-38     	; 0x142e <__udivmodsi4_loop>
    1454:	60 95       	com	r22
    1456:	70 95       	com	r23
    1458:	80 95       	com	r24
    145a:	90 95       	com	r25
    145c:	9b 01       	movw	r18, r22
    145e:	ac 01       	movw	r20, r24
    1460:	bd 01       	movw	r22, r26
    1462:	cf 01       	movw	r24, r30
    1464:	08 95       	ret

00001466 <__divmodsi4>:
    1466:	05 2e       	mov	r0, r21
    1468:	97 fb       	bst	r25, 7
    146a:	16 f4       	brtc	.+4      	; 0x1470 <__divmodsi4+0xa>
    146c:	00 94       	com	r0
    146e:	0f d0       	rcall	.+30     	; 0x148e <__negsi2>
    1470:	57 fd       	sbrc	r21, 7
    1472:	05 d0       	rcall	.+10     	; 0x147e <__divmodsi4_neg2>
    1474:	d6 df       	rcall	.-84     	; 0x1422 <__udivmodsi4>
    1476:	07 fc       	sbrc	r0, 7
    1478:	02 d0       	rcall	.+4      	; 0x147e <__divmodsi4_neg2>
    147a:	46 f4       	brtc	.+16     	; 0x148c <__divmodsi4_exit>
    147c:	08 c0       	rjmp	.+16     	; 0x148e <__negsi2>

0000147e <__divmodsi4_neg2>:
    147e:	50 95       	com	r21
    1480:	40 95       	com	r20
    1482:	30 95       	com	r19
    1484:	21 95       	neg	r18
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	4f 4f       	sbci	r20, 0xFF	; 255
    148a:	5f 4f       	sbci	r21, 0xFF	; 255

0000148c <__divmodsi4_exit>:
    148c:	08 95       	ret

0000148e <__negsi2>:
    148e:	90 95       	com	r25
    1490:	80 95       	com	r24
    1492:	70 95       	com	r23
    1494:	61 95       	neg	r22
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	8f 4f       	sbci	r24, 0xFF	; 255
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	08 95       	ret

0000149e <__umulhisi3>:
    149e:	a2 9f       	mul	r26, r18
    14a0:	b0 01       	movw	r22, r0
    14a2:	b3 9f       	mul	r27, r19
    14a4:	c0 01       	movw	r24, r0
    14a6:	a3 9f       	mul	r26, r19
    14a8:	70 0d       	add	r23, r0
    14aa:	81 1d       	adc	r24, r1
    14ac:	11 24       	eor	r1, r1
    14ae:	91 1d       	adc	r25, r1
    14b0:	b2 9f       	mul	r27, r18
    14b2:	70 0d       	add	r23, r0
    14b4:	81 1d       	adc	r24, r1
    14b6:	11 24       	eor	r1, r1
    14b8:	91 1d       	adc	r25, r1
    14ba:	08 95       	ret

000014bc <__udivmodhi4>:
    14bc:	aa 1b       	sub	r26, r26
    14be:	bb 1b       	sub	r27, r27
    14c0:	51 e1       	ldi	r21, 0x11	; 17
    14c2:	07 c0       	rjmp	.+14     	; 0x14d2 <__udivmodhi4_ep>

000014c4 <__udivmodhi4_loop>:
    14c4:	aa 1f       	adc	r26, r26
    14c6:	bb 1f       	adc	r27, r27
    14c8:	a6 17       	cp	r26, r22
    14ca:	b7 07       	cpc	r27, r23
    14cc:	10 f0       	brcs	.+4      	; 0x14d2 <__udivmodhi4_ep>
    14ce:	a6 1b       	sub	r26, r22
    14d0:	b7 0b       	sbc	r27, r23

000014d2 <__udivmodhi4_ep>:
    14d2:	88 1f       	adc	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	5a 95       	dec	r21
    14d8:	a9 f7       	brne	.-22     	; 0x14c4 <__udivmodhi4_loop>
    14da:	80 95       	com	r24
    14dc:	90 95       	com	r25
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	08 95       	ret

000014e4 <_exit>:
    14e4:	f8 94       	cli

000014e6 <__stop_program>:
    14e6:	ff cf       	rjmp	.-2      	; 0x14e6 <__stop_program>
