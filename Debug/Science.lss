
Science.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000016e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001674  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800100  00800100  000016e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000520  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b31  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ee0  00000000  00000000  000067a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000295b  00000000  00000000  00008689  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e60  00000000  00000000  0000afe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001250  00000000  00000000  0000be44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000407e  00000000  00000000  0000d094  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  00011112  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	9b c1       	rjmp	.+822    	; 0x344 <__vector_3>
       e:	00 00       	nop
      10:	01 c2       	rjmp	.+1026   	; 0x414 <__vector_4>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c0       	rjmp	.+390    	; 0x1a4 <__vector_7>
      1e:	00 00       	nop
      20:	29 c1       	rjmp	.+594    	; 0x274 <__vector_8>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c0       	rjmp	.+158    	; 0xd0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__vector_15>
      40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	a0 c6       	rjmp	.+3392   	; 0xd8a <__vector_18>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__vector_21>
      58:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__vector_22>
      5c:	39 c0       	rjmp	.+114    	; 0xd0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c0       	rjmp	.+78     	; 0xd0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c0       	rjmp	.+70     	; 0xd0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 e7       	ldi	r30, 0x74	; 116
      a8:	f6 e1       	ldi	r31, 0x16	; 22
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a0 30       	cpi	r26, 0x00	; 0
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	21 e0       	ldi	r18, 0x01	; 1
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a8 34       	cpi	r26, 0x48	; 72
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	ba d4       	rcall	.+2420   	; 0xa40 <main>
      cc:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <read_ADC>:
void externalAREF(){
	if((ADMUX & 0xC0) == 0xC0){
		ADMUX &= ~0xC0;
		ADMUX = (1<<6);
		delay_mS(5);
		read_ADC(0);
      d2:	ec e7       	ldi	r30, 0x7C	; 124
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	90 81       	ld	r25, Z
      d8:	90 7c       	andi	r25, 0xC0	; 192
      da:	87 70       	andi	r24, 0x07	; 7
      dc:	89 2b       	or	r24, r25
      de:	80 83       	st	Z, r24
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 64       	ori	r24, 0x40	; 64
      e8:	80 83       	st	Z, r24
      ea:	80 81       	ld	r24, Z
      ec:	86 fd       	sbrc	r24, 6
      ee:	fd cf       	rjmp	.-6      	; 0xea <read_ADC+0x18>
      f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      f4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	92 2b       	or	r25, r18
      fc:	08 95       	ret

000000fe <read_gas_sensor>:
	}
}

uint16_t read_gas_sensor(){
	return read_ADC(2);
      fe:	82 e0       	ldi	r24, 0x02	; 2
     100:	e8 cf       	rjmp	.-48     	; 0xd2 <read_ADC>
}
     102:	08 95       	ret

00000104 <mars_moisture>:

uint16_t mars_moisture(){
	return read_ADC(3);
     104:	83 e0       	ldi	r24, 0x03	; 3
     106:	e5 cf       	rjmp	.-54     	; 0xd2 <read_ADC>
}
     108:	08 95       	ret

0000010a <dac_write>:

#define DAC_ADDR 0x60

uint8_t sine_table[] = {0x80, 0xB0, 0xDA, 0xF5, 0xFF, 0xF5, 0xDA, 0xB0, 0x80, 0x4F, 0x25, 0x0A, 0x00, 0x0A, 0x25, 0x4F};

void dac_write(uint8_t val){
     10a:	cf 93       	push	r28
     10c:	c8 2f       	mov	r28, r24
	I2C_start();
     10e:	79 d3       	rcall	.+1778   	; 0x802 <I2C_start>
	I2C_write(DAC_ADDR << 1); //DAC address in write mode
     110:	80 ec       	ldi	r24, 0xC0	; 192
     112:	84 d3       	rcall	.+1800   	; 0x81c <I2C_write>
	I2C_write(0); //power-down bits = 00 -> normal op, don't care data bits = 0000
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	82 d3       	rcall	.+1796   	; 0x81c <I2C_write>
	I2C_write(val); //next 8 bits is the DAC register value
     118:	8c 2f       	mov	r24, r28
     11a:	80 d3       	rcall	.+1792   	; 0x81c <I2C_write>
     11c:	7b d3       	rcall	.+1782   	; 0x814 <I2C_stop>
	I2C_stop();
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <get_encoder_ticks>:
}
     122:	88 23       	and	r24, r24
     124:	49 f0       	breq	.+18     	; 0x138 <get_encoder_ticks+0x16>
			encoder0_ticks = 0;
		case 1:
			encoder1_ticks = 0;
			break;
	}
	EIMSK |= 0xCC; //Enable pin change interrupt on PE6, PE7
     126:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <encoder1_ticks>
     12a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     12e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     132:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     136:	08 95       	ret
     138:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     13c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     140:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     144:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     148:	08 95       	ret

0000014a <init_encoders>:
     14a:	8d b3       	in	r24, 0x1d	; 29
     14c:	83 73       	andi	r24, 0x33	; 51
     14e:	8d bb       	out	0x1d, r24	; 29
     150:	8d b1       	in	r24, 0x0d	; 13
     152:	8f 73       	andi	r24, 0x3F	; 63
     154:	8d b9       	out	0x0d, r24	; 13
     156:	8a b1       	in	r24, 0x0a	; 10
     158:	83 7f       	andi	r24, 0xF3	; 243
     15a:	8a b9       	out	0x0a, r24	; 10
     15c:	8e b1       	in	r24, 0x0e	; 14
     15e:	80 6c       	ori	r24, 0xC0	; 192
     160:	8e b9       	out	0x0e, r24	; 14
     162:	8b b1       	in	r24, 0x0b	; 11
     164:	8c 60       	ori	r24, 0x0C	; 12
     166:	8b b9       	out	0x0b, r24	; 11
     168:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     16c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     170:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     174:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     178:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <encoder1_ticks>
     17c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <encoder1_ticks+0x1>
     180:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <encoder1_ticks+0x2>
     184:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <encoder1_ticks+0x3>
     188:	ea e6       	ldi	r30, 0x6A	; 106
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	80 65       	ori	r24, 0x50	; 80
     190:	80 83       	st	Z, r24
     192:	e9 e6       	ldi	r30, 0x69	; 105
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	80 65       	ori	r24, 0x50	; 80
     19a:	80 83       	st	Z, r24
     19c:	8d b3       	in	r24, 0x1d	; 29
     19e:	8c 6c       	ori	r24, 0xCC	; 204
     1a0:	8d bb       	out	0x1d, r24	; 29
     1a2:	08 95       	ret

000001a4 <__vector_7>:
}

ISR(INT6_vect){ //PE6, A
     1a4:	1f 92       	push	r1
     1a6:	0f 92       	push	r0
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	0f 92       	push	r0
     1ac:	11 24       	eor	r1, r1
     1ae:	8f 93       	push	r24
     1b0:	9f 93       	push	r25
     1b2:	af 93       	push	r26
     1b4:	bf 93       	push	r27
	uint8_t state = PINE;
     1b6:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE6)){ //A rising
     1b8:	86 ff       	sbrs	r24, 6
     1ba:	2a c0       	rjmp	.+84     	; 0x210 <__vector_7+0x6c>
		if(state & (1<<PE7)){ //B high
     1bc:	88 23       	and	r24, r24
     1be:	a4 f4       	brge	.+40     	; 0x1e8 <__vector_7+0x44>
			encoder0_ticks++;
     1c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1c8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     1cc:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     1d0:	01 96       	adiw	r24, 0x01	; 1
     1d2:	a1 1d       	adc	r26, r1
     1d4:	b1 1d       	adc	r27, r1
     1d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     1da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1de:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     1e2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     1e6:	3d c0       	rjmp	.+122    	; 0x262 <__vector_7+0xbe>
		} else { //B low
			encoder0_ticks--;
     1e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     1f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	a1 09       	sbc	r26, r1
     1fc:	b1 09       	sbc	r27, r1
     1fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     202:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     206:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     20a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     20e:	29 c0       	rjmp	.+82     	; 0x262 <__vector_7+0xbe>
		}
	} else { //A falling
		if(state & (1<<PE7)){ //B high
     210:	88 23       	and	r24, r24
     212:	a4 f4       	brge	.+40     	; 0x23c <__vector_7+0x98>
			encoder0_ticks--;
     214:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     218:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     21c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     220:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     224:	01 97       	sbiw	r24, 0x01	; 1
     226:	a1 09       	sbc	r26, r1
     228:	b1 09       	sbc	r27, r1
     22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     22e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     232:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     236:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     23a:	13 c0       	rjmp	.+38     	; 0x262 <__vector_7+0xbe>
		} else { //B low
			encoder0_ticks++;
     23c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     240:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     244:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     248:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	a1 1d       	adc	r26, r1
     250:	b1 1d       	adc	r27, r1
     252:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     256:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     25a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     25e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		}
	}
}
     262:	bf 91       	pop	r27
     264:	af 91       	pop	r26
     266:	9f 91       	pop	r25
     268:	8f 91       	pop	r24
     26a:	0f 90       	pop	r0
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	0f 90       	pop	r0
     270:	1f 90       	pop	r1
     272:	18 95       	reti

00000274 <__vector_8>:

ISR(INT7_vect){ //PE7, B
     274:	1f 92       	push	r1
     276:	0f 92       	push	r0
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	0f 92       	push	r0
     27c:	11 24       	eor	r1, r1
     27e:	8f 93       	push	r24
     280:	9f 93       	push	r25
     282:	af 93       	push	r26
     284:	bf 93       	push	r27
	uint8_t state = PINE;
     286:	8c b1       	in	r24, 0x0c	; 12
	if(state & (1<<PE7)){ //B rising
     288:	88 23       	and	r24, r24
     28a:	54 f5       	brge	.+84     	; 0x2e0 <__vector_8+0x6c>
		if(state & (1<<PE6)){ //A high
     28c:	86 ff       	sbrs	r24, 6
     28e:	14 c0       	rjmp	.+40     	; 0x2b8 <__vector_8+0x44>
			encoder0_ticks--;
     290:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     294:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     298:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     29c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	a1 09       	sbc	r26, r1
     2a4:	b1 09       	sbc	r27, r1
     2a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     2aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2ae:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2b2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2b6:	3d c0       	rjmp	.+122    	; 0x332 <__vector_8+0xbe>
		} else { //A low
			encoder0_ticks++;
     2b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2c0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2c4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	a1 1d       	adc	r26, r1
     2cc:	b1 1d       	adc	r27, r1
     2ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     2d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2d6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2da:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2de:	29 c0       	rjmp	.+82     	; 0x332 <__vector_8+0xbe>
		}
	} else { //B falling
		if(state & (1<<PE6)){ //A high
     2e0:	86 ff       	sbrs	r24, 6
     2e2:	14 c0       	rjmp	.+40     	; 0x30c <__vector_8+0x98>
			encoder0_ticks++;
     2e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2ec:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2f0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	a1 1d       	adc	r26, r1
     2f8:	b1 1d       	adc	r27, r1
     2fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     2fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     302:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     306:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     30a:	13 c0       	rjmp	.+38     	; 0x332 <__vector_8+0xbe>
		} else { //A low
			encoder0_ticks--;
     30c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     310:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     314:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     318:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	a1 09       	sbc	r26, r1
     320:	b1 09       	sbc	r27, r1
     322:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     326:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     32a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     32e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		}
	}
}
     332:	bf 91       	pop	r27
     334:	af 91       	pop	r26
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	0f 90       	pop	r0
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	0f 90       	pop	r0
     340:	1f 90       	pop	r1
     342:	18 95       	reti

00000344 <__vector_3>:

ISR(INT2_vect){ //PD2, A
     344:	1f 92       	push	r1
     346:	0f 92       	push	r0
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	0f 92       	push	r0
     34c:	11 24       	eor	r1, r1
     34e:	8f 93       	push	r24
     350:	9f 93       	push	r25
     352:	af 93       	push	r26
     354:	bf 93       	push	r27
	uint8_t state = PIND;
     356:	89 b1       	in	r24, 0x09	; 9
	if(state & (1<<PD2)){ //A rising
     358:	82 ff       	sbrs	r24, 2
     35a:	2a c0       	rjmp	.+84     	; 0x3b0 <__vector_3+0x6c>
		if(state & (1<<PD3)){ //B high
     35c:	83 ff       	sbrs	r24, 3
     35e:	14 c0       	rjmp	.+40     	; 0x388 <__vector_3+0x44>
			encoder1_ticks++;
     360:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     364:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     368:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     36c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	a1 1d       	adc	r26, r1
     374:	b1 1d       	adc	r27, r1
     376:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     37a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     37e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     382:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
     386:	3d c0       	rjmp	.+122    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			} else { //B low
			encoder1_ticks--;
     388:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     38c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     390:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     394:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	a1 09       	sbc	r26, r1
     39c:	b1 09       	sbc	r27, r1
     39e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     3a2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     3a6:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     3aa:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
     3ae:	29 c0       	rjmp	.+82     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		}
		} else { //A falling
		if(state & (1<<PD3)){ //B high
     3b0:	83 ff       	sbrs	r24, 3
     3b2:	14 c0       	rjmp	.+40     	; 0x3dc <__vector_3+0x98>
			encoder1_ticks--;
     3b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     3b8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     3bc:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     3c0:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	a1 09       	sbc	r26, r1
     3c8:	b1 09       	sbc	r27, r1
     3ca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     3ce:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     3d2:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     3d6:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
     3da:	13 c0       	rjmp	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			} else { //B low
			encoder1_ticks++;
     3dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     3e0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     3e4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     3e8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	a1 1d       	adc	r26, r1
     3f0:	b1 1d       	adc	r27, r1
     3f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     3f6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     3fa:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     3fe:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
		}
	}
}
     402:	bf 91       	pop	r27
     404:	af 91       	pop	r26
     406:	9f 91       	pop	r25
     408:	8f 91       	pop	r24
     40a:	0f 90       	pop	r0
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	0f 90       	pop	r0
     410:	1f 90       	pop	r1
     412:	18 95       	reti

00000414 <__vector_4>:

ISR(INT3_vect){ //PD3, B
     414:	1f 92       	push	r1
     416:	0f 92       	push	r0
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	0f 92       	push	r0
     41c:	11 24       	eor	r1, r1
     41e:	8f 93       	push	r24
     420:	9f 93       	push	r25
     422:	af 93       	push	r26
     424:	bf 93       	push	r27
	uint8_t state = PIND;
     426:	89 b1       	in	r24, 0x09	; 9
	if(state & (1<<PD3)){ //B rising
     428:	83 ff       	sbrs	r24, 3
     42a:	2a c0       	rjmp	.+84     	; 0x480 <__vector_4+0x6c>
		if(state & (1<<PD2)){ //A high
     42c:	82 ff       	sbrs	r24, 2
     42e:	14 c0       	rjmp	.+40     	; 0x458 <__vector_4+0x44>
			encoder1_ticks--;
     430:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     434:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     438:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     43c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	a1 09       	sbc	r26, r1
     444:	b1 09       	sbc	r27, r1
     446:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     44a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     44e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     452:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
     456:	3d c0       	rjmp	.+122    	; 0x4d2 <__vector_4+0xbe>
			} else { //A low
			encoder1_ticks++;
     458:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     45c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     460:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     464:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	a1 1d       	adc	r26, r1
     46c:	b1 1d       	adc	r27, r1
     46e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     472:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     476:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     47a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
     47e:	29 c0       	rjmp	.+82     	; 0x4d2 <__vector_4+0xbe>
		}
		} else { //B falling
		if(state & (1<<PD2)){ //A high
     480:	82 ff       	sbrs	r24, 2
     482:	14 c0       	rjmp	.+40     	; 0x4ac <__vector_4+0x98>
			encoder1_ticks++;
     484:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     488:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     48c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     490:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	a1 1d       	adc	r26, r1
     498:	b1 1d       	adc	r27, r1
     49a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     49e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     4a2:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     4a6:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
     4aa:	13 c0       	rjmp	.+38     	; 0x4d2 <__vector_4+0xbe>
			} else { //A low
			encoder1_ticks--;
     4ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <encoder1_ticks>
     4b0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <encoder1_ticks+0x1>
     4b4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <encoder1_ticks+0x2>
     4b8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <encoder1_ticks+0x3>
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	a1 09       	sbc	r26, r1
     4c0:	b1 09       	sbc	r27, r1
     4c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <encoder1_ticks>
     4c6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <encoder1_ticks+0x1>
     4ca:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <encoder1_ticks+0x2>
     4ce:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <encoder1_ticks+0x3>
		}
	}
     4d2:	bf 91       	pop	r27
     4d4:	af 91       	pop	r26
     4d6:	9f 91       	pop	r25
     4d8:	8f 91       	pop	r24
     4da:	0f 90       	pop	r0
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	0f 90       	pop	r0
     4e0:	1f 90       	pop	r1
     4e2:	18 95       	reti

000004e4 <handle_telemetry_packet>:
#include "CANCommon.h"
#include "CANMotorUnit.h"
#include "CANSerialNumbers.h"
#include "Port.h"

void handle_telemetry_packet(CANPacket *packet){
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	2b 97       	sbiw	r28, 0x0b	; 11
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	6c 01       	movw	r12, r24
	int32_t sensor_val = 0;
	CANPacket new_packet;
	uint8_t type;
	uint8_t target_group = GetSenderDeviceGroupCode(packet);
     50a:	e6 d0       	rcall	.+460    	; 0x6d8 <GetSenderDeviceGroupCode>
     50c:	b8 2e       	mov	r11, r24
	uint8_t target_serial = GetSenderDeviceSerialNumber(packet);
     50e:	c6 01       	movw	r24, r12
     510:	e0 d0       	rcall	.+448    	; 0x6d2 <GetSenderDeviceSerialNumber>
     512:	a8 2e       	mov	r10, r24
	switch(type = DecodeTelemetryType(packet)){
     514:	c6 01       	movw	r24, r12
     516:	bd d0       	rcall	.+378    	; 0x692 <DecodeTelemetryType>
     518:	d8 2e       	mov	r13, r24
     51a:	84 e1       	ldi	r24, 0x14	; 20
     51c:	d8 16       	cp	r13, r24
     51e:	39 f0       	breq	.+14     	; 0x52e <handle_telemetry_packet+0x4a>
     520:	86 e1       	ldi	r24, 0x16	; 22
     522:	d8 16       	cp	r13, r24
     524:	81 f0       	breq	.+32     	; 0x546 <handle_telemetry_packet+0x62>
     526:	83 e1       	ldi	r24, 0x13	; 19
     528:	d8 12       	cpse	r13, r24
     52a:	12 c0       	rjmp	.+36     	; 0x550 <handle_telemetry_packet+0x6c>
     52c:	07 c0       	rjmp	.+14     	; 0x53c <handle_telemetry_packet+0x58>
     52e:	1a e9       	ldi	r17, 0x9A	; 154
		case CAN_SCIENCE_SENSOR_GAS:
			sensor_val = read_gas_sensor();
			break;
		case CAN_SCIENCE_SENSOR_UV:
			sensor_val = 666;//read_uv_sensor();
     530:	e1 2e       	mov	r14, r17
     532:	12 e0       	ldi	r17, 0x02	; 2
     534:	f1 2e       	mov	r15, r17
     536:	00 e0       	ldi	r16, 0x00	; 0
     538:	10 e0       	ldi	r17, 0x00	; 0
     53a:	0d c0       	rjmp	.+26     	; 0x556 <handle_telemetry_packet+0x72>
	uint8_t type;
	uint8_t target_group = GetSenderDeviceGroupCode(packet);
	uint8_t target_serial = GetSenderDeviceSerialNumber(packet);
	switch(type = DecodeTelemetryType(packet)){
		case CAN_SCIENCE_SENSOR_GAS:
			sensor_val = read_gas_sensor();
     53c:	e0 dd       	rcall	.-1088   	; 0xfe <read_gas_sensor>
     53e:	7c 01       	movw	r14, r24
     540:	00 e0       	ldi	r16, 0x00	; 0
     542:	10 e0       	ldi	r17, 0x00	; 0
			break;
     544:	08 c0       	rjmp	.+16     	; 0x556 <handle_telemetry_packet+0x72>
		case CAN_SCIENCE_SENSOR_UV:
			sensor_val = 666;//read_uv_sensor();
			break;
		case CAN_SCIENCE_SENSOR_MOISTURE:
			sensor_val = mars_moisture();
     546:	de dd       	rcall	.-1092   	; 0x104 <mars_moisture>
     548:	7c 01       	movw	r14, r24
     54a:	00 e0       	ldi	r16, 0x00	; 0
     54c:	10 e0       	ldi	r17, 0x00	; 0
     54e:	03 c0       	rjmp	.+6      	; 0x556 <handle_telemetry_packet+0x72>
			break;
     550:	e1 2c       	mov	r14, r1
#include "CANMotorUnit.h"
#include "CANSerialNumbers.h"
#include "Port.h"

void handle_telemetry_packet(CANPacket *packet){
	int32_t sensor_val = 0;
     552:	f1 2c       	mov	r15, r1
     554:	87 01       	movw	r16, r14
     556:	2d 2d       	mov	r18, r13
			break;
		case CAN_SCIENCE_SENSOR_AIR_QUALITY:
			//sensor_val = read_aq_sensor();
			break;
	}
	AssembleTelemetryReportPacket(&new_packet, target_group, target_serial, type, sensor_val);
     558:	4a 2d       	mov	r20, r10
     55a:	6b 2d       	mov	r22, r11
     55c:	ce 01       	movw	r24, r28
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	6b d0       	rcall	.+214    	; 0x638 <AssembleTelemetryReportPacket>
	SendCANPacket(&new_packet);
     562:	ce 01       	movw	r24, r28
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	3e d5       	rcall	.+2684   	; 0xfe4 <SendCANPacket>
     568:	2b 96       	adiw	r28, 0x0b	; 11
}
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	f8 94       	cli
     56e:	de bf       	out	0x3e, r29	; 62
     570:	0f be       	out	0x3f, r0	; 63
     572:	cd bf       	out	0x3d, r28	; 61
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15
     57e:	ef 90       	pop	r14
     580:	df 90       	pop	r13
     582:	cf 90       	pop	r12
     584:	bf 90       	pop	r11
     586:	af 90       	pop	r10
     588:	08 95       	ret

0000058a <handle_CAN_packet>:
     58a:	ff 92       	push	r15

void handle_CAN_packet(CANPacket *packet){
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	29 97       	sbiw	r28, 0x09	; 9
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	8c 01       	movw	r16, r24
	switch(GetPacketID(packet)){
     5a6:	9b d0       	rcall	.+310    	; 0x6de <GetPacketID>
     5a8:	8d 30       	cpi	r24, 0x0D	; 13
     5aa:	91 05       	cpc	r25, r1
     5ac:	a1 f0       	breq	.+40     	; 0x5d6 <handle_CAN_packet+0x4c>
     5ae:	1c f4       	brge	.+6      	; 0x5b6 <handle_CAN_packet+0x2c>
     5b0:	03 97       	sbiw	r24, 0x03	; 3
     5b2:	41 f0       	breq	.+16     	; 0x5c4 <handle_CAN_packet+0x3a>
     5b4:	35 c0       	rjmp	.+106    	; 0x620 <handle_CAN_packet+0x96>
     5b6:	85 3f       	cpi	r24, 0xF5	; 245
     5b8:	91 05       	cpc	r25, r1
     5ba:	81 f1       	breq	.+96     	; 0x61c <handle_CAN_packet+0x92>
     5bc:	87 3f       	cpi	r24, 0xF7	; 247
     5be:	91 05       	cpc	r25, r1
     5c0:	b1 f0       	breq	.+44     	; 0x5ee <handle_CAN_packet+0x64>
     5c2:	2e c0       	rjmp	.+92     	; 0x620 <handle_CAN_packet+0x96>
		case ID_MOTOR_UNIT_PWM_DIR_SET: ;
			uint8_t motor = GetScienceMotorIDFromPacket(packet);
     5c4:	c8 01       	movw	r24, r16
     5c6:	f7 d0       	rcall	.+494    	; 0x7b6 <GetScienceMotorIDFromPacket>
     5c8:	f8 2e       	mov	r15, r24
			int16_t pwm = GetScienceMotorPWMFromPacket(packet);
     5ca:	c8 01       	movw	r24, r16
     5cc:	e9 d0       	rcall	.+466    	; 0x7a0 <GetScienceMotorPWMFromPacket>
			set_motor_power(motor, pwm);
     5ce:	bc 01       	movw	r22, r24
     5d0:	8f 2d       	mov	r24, r15
     5d2:	1e d3       	rcall	.+1596   	; 0xc10 <set_motor_power>
			break;
     5d4:	25 c0       	rjmp	.+74     	; 0x620 <handle_CAN_packet+0x96>
		case ID_MOTOR_UNIT_SERVO_SET: ;
			uint8_t servo = GetScienceServoIDFromPacket(packet);
     5d6:	c8 01       	movw	r24, r16
     5d8:	f1 d0       	rcall	.+482    	; 0x7bc <GetScienceServoIDFromPacket>
     5da:	f8 2e       	mov	r15, r24
			int8_t angle = GetScienceServoAngleFromPacket(packet);
     5dc:	c8 01       	movw	r24, r16
     5de:	e8 d0       	rcall	.+464    	; 0x7b0 <GetScienceServoAngleFromPacket>
			set_servo_position(servo, angle);
     5e0:	68 2f       	mov	r22, r24
     5e2:	88 0f       	add	r24, r24
     5e4:	77 0b       	sbc	r23, r23
     5e6:	8f 2d       	mov	r24, r15
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	8f d6       	rcall	.+3358   	; 0x130a <set_servo_position>
     5ec:	19 c0       	rjmp	.+50     	; 0x620 <handle_CAN_packet+0x96>
			break;
     5ee:	f8 01       	movw	r30, r16
		case ID_LED_COLOR: ;
			uint8_t r = packet->data[1];
     5f0:	94 81       	ldd	r25, Z+4	; 0x04
     5f2:	25 81       	ldd	r18, Z+5	; 0x05
			uint8_t g = packet->data[2];
     5f4:	86 81       	ldd	r24, Z+6	; 0x06
			uint8_t b = packet->data[3];
     5f6:	9f 83       	std	Y+7, r25	; 0x07
			uint8_t R[3] = {r, r, r};
     5f8:	98 87       	std	Y+8, r25	; 0x08
     5fa:	99 87       	std	Y+9, r25	; 0x09
     5fc:	2c 83       	std	Y+4, r18	; 0x04
			uint8_t G[3] = {g, g, b};
     5fe:	2d 83       	std	Y+5, r18	; 0x05
     600:	8e 83       	std	Y+6, r24	; 0x06
     602:	89 83       	std	Y+1, r24	; 0x01
			uint8_t B[3] = {b, b, b};
     604:	8a 83       	std	Y+2, r24	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	ae 01       	movw	r20, r28
			set_RGB(R, G, B);
     60a:	4f 5f       	subi	r20, 0xFF	; 255
     60c:	5f 4f       	sbci	r21, 0xFF	; 255
     60e:	be 01       	movw	r22, r28
     610:	6c 5f       	subi	r22, 0xFC	; 252
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	ce 01       	movw	r24, r28
     616:	07 96       	adiw	r24, 0x07	; 7
     618:	af d1       	rcall	.+862    	; 0x978 <set_RGB>
			break;
     61a:	02 c0       	rjmp	.+4      	; 0x620 <handle_CAN_packet+0x96>
		case ID_TELEMETRY_PULL:
			handle_telemetry_packet(packet);
     61c:	c8 01       	movw	r24, r16
     61e:	62 df       	rcall	.-316    	; 0x4e4 <handle_telemetry_packet>
     620:	29 96       	adiw	r28, 0x09	; 9
			break;
	}
}
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	ff 90       	pop	r15
     636:	08 95       	ret

00000638 <AssembleTelemetryReportPacket>:
     638:	bf 92       	push	r11
}

uint32_t DecodeTelemetryDataUnsigned(CANPacket *packet)
{
    return (uint32_t) DecodeTelemetryDataSigned(packet);
}
     63a:	cf 92       	push	r12
     63c:	df 92       	push	r13
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	ec 01       	movw	r28, r24
     64c:	b2 2e       	mov	r11, r18
     64e:	67 01       	movw	r12, r14
     650:	78 01       	movw	r14, r16
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	21 d0       	rcall	.+66     	; 0x698 <ConstructCANID>
     656:	99 83       	std	Y+1, r25	; 0x01
     658:	88 83       	st	Y, r24
     65a:	88 e0       	ldi	r24, 0x08	; 8
     65c:	8a 83       	std	Y+2, r24	; 0x02
     65e:	8e 01       	movw	r16, r28
     660:	0d 5f       	subi	r16, 0xFD	; 253
     662:	1f 4f       	sbci	r17, 0xFF	; 255
     664:	66 ef       	ldi	r22, 0xF6	; 246
     666:	c8 01       	movw	r24, r16
     668:	27 d0       	rcall	.+78     	; 0x6b8 <WriteSenderSerialAndPacketID>
     66a:	c8 0f       	add	r28, r24
     66c:	d9 1f       	adc	r29, r25
     66e:	bb 82       	std	Y+3, r11	; 0x03
     670:	9c 01       	movw	r18, r24
     672:	2f 5f       	subi	r18, 0xFF	; 255
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	b7 01       	movw	r22, r14
     678:	a6 01       	movw	r20, r12
     67a:	c8 01       	movw	r24, r16
     67c:	34 d0       	rcall	.+104    	; 0x6e6 <PackIntIntoDataMSBFirst>
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	bf 90       	pop	r11
     690:	08 95       	ret

00000692 <DecodeTelemetryType>:

uint8_t DecodeTelemetryType(CANPacket *packet)
{
    return packet->data[3];
}
     692:	fc 01       	movw	r30, r24
     694:	86 81       	ldd	r24, Z+6	; 0x06
     696:	08 95       	ret

00000698 <ConstructCANID>:
}

void PackShortIntoDataMSBFirst(uint8_t *data, int16_t dataToPack, int startIndex)
{
	data[startIndex + 0] = (dataToPack & 0xFF00) >> 8;
	data[startIndex + 1] = (dataToPack & 0x00FF);
     698:	6f 70       	andi	r22, 0x0F	; 15
     69a:	90 e4       	ldi	r25, 0x40	; 64
     69c:	69 9f       	mul	r22, r25
     69e:	b0 01       	movw	r22, r0
     6a0:	11 24       	eor	r1, r1
     6a2:	4f 73       	andi	r20, 0x3F	; 63
     6a4:	64 2b       	or	r22, r20
     6a6:	81 70       	andi	r24, 0x01	; 1
     6a8:	38 2f       	mov	r19, r24
     6aa:	33 0f       	add	r19, r19
     6ac:	33 0f       	add	r19, r19
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	cb 01       	movw	r24, r22
     6b2:	82 2b       	or	r24, r18
     6b4:	93 2b       	or	r25, r19
     6b6:	08 95       	ret

000006b8 <WriteSenderSerialAndPacketID>:
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	ec 01       	movw	r28, r24
     6be:	68 83       	st	Y, r22
     6c0:	6f d5       	rcall	.+2782   	; 0x11a0 <getLocalDeviceGroup>
     6c2:	89 83       	std	Y+1, r24	; 0x01
     6c4:	6a d5       	rcall	.+2772   	; 0x119a <getLocalDeviceSerial>
     6c6:	8a 83       	std	Y+2, r24	; 0x02
     6c8:	83 e0       	ldi	r24, 0x03	; 3
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <GetSenderDeviceSerialNumber>:
     6d2:	fc 01       	movw	r30, r24
     6d4:	85 81       	ldd	r24, Z+5	; 0x05
     6d6:	08 95       	ret

000006d8 <GetSenderDeviceGroupCode>:
     6d8:	fc 01       	movw	r30, r24
     6da:	84 81       	ldd	r24, Z+4	; 0x04
     6dc:	08 95       	ret

000006de <GetPacketID>:
     6de:	fc 01       	movw	r30, r24
     6e0:	83 81       	ldd	r24, Z+3	; 0x03
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	08 95       	ret

000006e6 <PackIntIntoDataMSBFirst>:
     6e6:	fc 01       	movw	r30, r24
     6e8:	e2 0f       	add	r30, r18
     6ea:	f3 1f       	adc	r31, r19
     6ec:	70 83       	st	Z, r23
     6ee:	61 83       	std	Z+1, r22	; 0x01
     6f0:	52 83       	std	Z+2, r21	; 0x02
     6f2:	43 83       	std	Z+3, r20	; 0x03
     6f4:	08 95       	ret

000006f6 <DecodeBytesToIntMSBFirst>:
}

int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
    int length = 4;
    int32_t decodedData = 0; 

    if (endIndex > 0 && startIndex >= 0) {
     702:	14 16       	cp	r1, r20
     704:	15 06       	cpc	r1, r21
     706:	9c f4       	brge	.+38     	; 0x72e <DecodeBytesToIntMSBFirst+0x38>
     708:	77 23       	and	r23, r23
     70a:	a4 f0       	brlt	.+40     	; 0x734 <DecodeBytesToIntMSBFirst+0x3e>
        length = endIndex - startIndex + 1;
     70c:	ea 01       	movw	r28, r20
     70e:	c6 1b       	sub	r28, r22
     710:	d7 0b       	sbc	r29, r23
     712:	21 96       	adiw	r28, 0x01	; 1
     714:	c5 30       	cpi	r28, 0x05	; 5
     716:	d1 05       	cpc	r29, r1
     718:	14 f0       	brlt	.+4      	; 0x71e <DecodeBytesToIntMSBFirst+0x28>
     71a:	c4 e0       	ldi	r28, 0x04	; 4
     71c:	d0 e0       	ldi	r29, 0x00	; 0
     71e:	dd 23       	and	r29, r29
     720:	14 f4       	brge	.+4      	; 0x726 <DecodeBytesToIntMSBFirst+0x30>
     722:	c0 e0       	ldi	r28, 0x00	; 0
     724:	d0 e0       	ldi	r29, 0x00	; 0
        if (length > 4) { length = 4; }
        if (length < 1) { length = 0; }
    }

    for (int i = 0; i < length; i++) 
     726:	1c 16       	cp	r1, r28
     728:	1d 06       	cpc	r1, r29
     72a:	34 f0       	brlt	.+12     	; 0x738 <DecodeBytesToIntMSBFirst+0x42>
     72c:	2d c0       	rjmp	.+90     	; 0x788 <DecodeBytesToIntMSBFirst+0x92>
     72e:	c4 e0       	ldi	r28, 0x04	; 4
     730:	d0 e0       	ldi	r29, 0x00	; 0
     732:	02 c0       	rjmp	.+4      	; 0x738 <DecodeBytesToIntMSBFirst+0x42>
     734:	c4 e0       	ldi	r28, 0x04	; 4
     736:	d0 e0       	ldi	r29, 0x00	; 0
     738:	dc 01       	movw	r26, r24
     73a:	a6 0f       	add	r26, r22
     73c:	b7 1f       	adc	r27, r23
     73e:	9e 01       	movw	r18, r28
     740:	21 50       	subi	r18, 0x01	; 1
     742:	31 09       	sbc	r19, r1
     744:	22 0f       	add	r18, r18
     746:	33 1f       	adc	r19, r19
     748:	22 0f       	add	r18, r18
     74a:	33 1f       	adc	r19, r19
     74c:	22 0f       	add	r18, r18
     74e:	33 1f       	adc	r19, r19
     750:	e0 e0       	ldi	r30, 0x00	; 0
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	c1 2c       	mov	r12, r1
     756:	d1 2c       	mov	r13, r1
     758:	76 01       	movw	r14, r12
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
     75a:	4d 91       	ld	r20, X+
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	02 2e       	mov	r0, r18
     760:	02 c0       	rjmp	.+4      	; 0x766 <DecodeBytesToIntMSBFirst+0x70>
     762:	44 0f       	add	r20, r20
     764:	55 1f       	adc	r21, r21
     766:	0a 94       	dec	r0
     768:	e2 f7       	brpl	.-8      	; 0x762 <DecodeBytesToIntMSBFirst+0x6c>
     76a:	05 2e       	mov	r0, r21
     76c:	00 0c       	add	r0, r0
     76e:	66 0b       	sbc	r22, r22
     770:	77 0b       	sbc	r23, r23
     772:	c4 2a       	or	r12, r20
     774:	d5 2a       	or	r13, r21
     776:	e6 2a       	or	r14, r22
     778:	f7 2a       	or	r15, r23
        length = endIndex - startIndex + 1;
        if (length > 4) { length = 4; }
        if (length < 1) { length = 0; }
    }

    for (int i = 0; i < length; i++) 
     77a:	31 96       	adiw	r30, 0x01	; 1
     77c:	28 50       	subi	r18, 0x08	; 8
     77e:	31 09       	sbc	r19, r1
     780:	ec 17       	cp	r30, r28
     782:	fd 07       	cpc	r31, r29
     784:	54 f3       	brlt	.-44     	; 0x75a <DecodeBytesToIntMSBFirst+0x64>
     786:	03 c0       	rjmp	.+6      	; 0x78e <DecodeBytesToIntMSBFirst+0x98>
}

int32_t DecodeBytesToIntMSBFirst(uint8_t *data, int startIndex, int endIndex)
{
    int length = 4;
    int32_t decodedData = 0; 
     788:	c1 2c       	mov	r12, r1
     78a:	d1 2c       	mov	r13, r1
     78c:	76 01       	movw	r14, r12
    for (int i = 0; i < length; i++) 
    {
        decodedData |= data[startIndex + i] << (8 * (length-1-i));
    }
    return decodedData;
}
     78e:	c7 01       	movw	r24, r14
     790:	b6 01       	movw	r22, r12
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	08 95       	ret

000007a0 <GetScienceMotorPWMFromPacket>:
	packetToAssemble->data[1] = servo;
	packetToAssemble->data[2] = degrees;
}

int16_t GetScienceMotorPWMFromPacket(CANPacket *packet){
	return DecodeBytesToIntMSBFirst(packet->data, 1, 2);
     7a0:	42 e0       	ldi	r20, 0x02	; 2
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	03 96       	adiw	r24, 0x03	; 3
     7aa:	a5 df       	rcall	.-182    	; 0x6f6 <DecodeBytesToIntMSBFirst>
}
     7ac:	cb 01       	movw	r24, r22
     7ae:	08 95       	ret

000007b0 <GetScienceServoAngleFromPacket>:

uint8_t GetScienceServoAngleFromPacket(CANPacket *packet){
	return packet->data[2];
}
     7b0:	fc 01       	movw	r30, r24
     7b2:	85 81       	ldd	r24, Z+5	; 0x05
     7b4:	08 95       	ret

000007b6 <GetScienceMotorIDFromPacket>:

uint8_t GetScienceMotorIDFromPacket(CANPacket *packet){
	return packet->data[3];
}
     7b6:	fc 01       	movw	r30, r24
     7b8:	86 81       	ldd	r24, Z+6	; 0x06
     7ba:	08 95       	ret

000007bc <GetScienceServoIDFromPacket>:

uint8_t GetScienceServoIDFromPacket(CANPacket *packet){
	return packet->data[1];
}
     7bc:	fc 01       	movw	r30, r24
     7be:	84 81       	ldd	r24, Z+4	; 0x04
     7c0:	08 95       	ret

000007c2 <I2C_init>:
/*Initialize I2C
  The bitrate of the I2C bus in KHz
*/
void I2C_init(uint16_t bitrate){
	//PORTD |= 3; //Enable pullup
	TWSR = 0; //No Prescaling
     7c2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = ((16000L / bitrate) - 16) / 2;
     7c6:	9c 01       	movw	r18, r24
     7c8:	40 e0       	ldi	r20, 0x00	; 0
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	60 e8       	ldi	r22, 0x80	; 128
     7ce:	7e e3       	ldi	r23, 0x3E	; 62
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e d7       	rcall	.+3612   	; 0x15f2 <__divmodsi4>
     7d6:	ba 01       	movw	r22, r20
     7d8:	a9 01       	movw	r20, r18
     7da:	40 51       	subi	r20, 0x10	; 16
     7dc:	51 09       	sbc	r21, r1
     7de:	61 09       	sbc	r22, r1
     7e0:	71 09       	sbc	r23, r1
     7e2:	db 01       	movw	r26, r22
     7e4:	ca 01       	movw	r24, r20
     7e6:	1a f4       	brpl	.+6      	; 0x7ee <I2C_init+0x2c>
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	a1 1d       	adc	r26, r1
     7ec:	b1 1d       	adc	r27, r1
     7ee:	b5 95       	asr	r27
     7f0:	a7 95       	ror	r26
     7f2:	97 95       	ror	r25
     7f4:	87 95       	ror	r24
     7f6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR = 1 << TWEN; //Enable I2C
     7fa:	84 e0       	ldi	r24, 0x04	; 4
     7fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     800:	08 95       	ret

00000802 <I2C_start>:
}

/*Start an I2C transaction*/
void I2C_start(){
	TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
     802:	84 ea       	ldi	r24, 0xA4	; 164
     804:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     808:	ec eb       	ldi	r30, 0xBC	; 188
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	88 23       	and	r24, r24
     810:	ec f7       	brge	.-6      	; 0x80c <I2C_start+0xa>
}
     812:	08 95       	ret

00000814 <I2C_stop>:

/*Stop an I2C transaction*/
void I2C_stop(){
    TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
     814:	84 e9       	ldi	r24, 0x94	; 148
     816:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     81a:	08 95       	ret

0000081c <I2C_write>:
	//_delay_us(10);
}

/*Write a byte to a I2C device*/
void I2C_write(uint8_t byte){
	TWDR = byte;
     81c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = ((1<< TWINT) | (1<<TWEN));
     820:	84 e8       	ldi	r24, 0x84	; 132
     822:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1 <<TWINT))); //Wait for write to complete
     826:	ec eb       	ldi	r30, 0xBC	; 188
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	88 23       	and	r24, r24
     82e:	ec f7       	brge	.-6      	; 0x82a <I2C_write+0xe>
}
     830:	08 95       	ret

00000832 <I2C_read>:

/*Read a byte from an I2C device
	Setting ack to one enables sending an acknowledge pulse*/
uint8_t I2C_read(uint8_t ack){
	TWCR = ((1<< TWINT) | (1<<TWEN) | ((!!ack)<<TWEA));
     832:	81 11       	cpse	r24, r1
     834:	02 c0       	rjmp	.+4      	; 0x83a <I2C_read+0x8>
     836:	84 e8       	ldi	r24, 0x84	; 132
     838:	01 c0       	rjmp	.+2      	; 0x83c <I2C_read+0xa>
     83a:	84 ec       	ldi	r24, 0xC4	; 196
     83c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1 <<TWINT))); //Wait for something to read
     840:	ec eb       	ldi	r30, 0xBC	; 188
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	88 23       	and	r24, r24
     848:	ec f7       	brge	.-6      	; 0x844 <I2C_read+0x12>
	return TWDR;
     84a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     84e:	08 95       	ret

00000850 <set_LED>:
	1 -> Slow flashing
	2 -> Quick flashing
	3 -> Steady on
*/
void set_LED(uint8_t L, uint8_t state){
	if(L > 2 || state > 3) return;
     850:	83 30       	cpi	r24, 0x03	; 3
     852:	e0 f4       	brcc	.+56     	; 0x88c <set_LED+0x3c>
     854:	64 30       	cpi	r22, 0x04	; 4
     856:	d0 f4       	brcc	.+52     	; 0x88c <set_LED+0x3c>
	DDRB |= (1<<7 | 1<<6);
     858:	94 b1       	in	r25, 0x04	; 4
     85a:	90 6c       	ori	r25, 0xC0	; 192
     85c:	94 b9       	out	0x04, r25	; 4
	DDRG |= 1<<3;
     85e:	9b 9a       	sbi	0x13, 3	; 19
	L <<= 1;
	LED_states = (LED_states & ~(3 << L)) | (state << L);
     860:	88 0f       	add	r24, r24
     862:	23 e0       	ldi	r18, 0x03	; 3
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	08 2e       	mov	r0, r24
     868:	02 c0       	rjmp	.+4      	; 0x86e <set_LED+0x1e>
     86a:	22 0f       	add	r18, r18
     86c:	33 1f       	adc	r19, r19
     86e:	0a 94       	dec	r0
     870:	e2 f7       	brpl	.-8      	; 0x86a <set_LED+0x1a>
     872:	20 95       	com	r18
     874:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <LED_states>
     878:	29 23       	and	r18, r25
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	02 c0       	rjmp	.+4      	; 0x882 <set_LED+0x32>
     87e:	66 0f       	add	r22, r22
     880:	77 1f       	adc	r23, r23
     882:	8a 95       	dec	r24
     884:	e2 f7       	brpl	.-8      	; 0x87e <set_LED+0x2e>
     886:	62 2b       	or	r22, r18
     888:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <LED_states>
     88c:	08 95       	ret

0000088e <update_LEDS>:

/*Call this from a timer interrupt to update the debug LEDs
Parameters:
uint16_t count: The timer count
*/
void inline update_LEDS(uint16_t count){
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
	int i;
	uint8_t v;
	if(!LED_states){
     892:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <LED_states>
     896:	21 11       	cpse	r18, r1
     898:	0a c0       	rjmp	.+20     	; 0x8ae <update_LEDS+0x20>
		PORTG &= ~(1 << 3);
     89a:	a3 98       	cbi	0x14, 3	; 20
		PORTB &= ~(1 << 7 | 1 << 6);
     89c:	85 b1       	in	r24, 0x05	; 5
     89e:	8f 73       	andi	r24, 0x3F	; 63
     8a0:	85 b9       	out	0x05, r24	; 5
		return;
     8a2:	67 c0       	rjmp	.+206    	; 0x972 <update_LEDS+0xe4>
     8a4:	4f 5f       	subi	r20, 0xFF	; 255
     8a6:	5f 4f       	sbci	r21, 0xFF	; 255
     8a8:	6f 5f       	subi	r22, 0xFF	; 255
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	0b c0       	rjmp	.+22     	; 0x8c4 <update_LEDS+0x36>
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
				} else { //i == 2
					PORTG &= ~(1<<3);
				}
				break;
			case 1:
				if(count % 4 != 0){
     8b6:	dc 01       	movw	r26, r24
     8b8:	a3 70       	andi	r26, 0x03	; 3
     8ba:	bb 27       	eor	r27, r27
				if(i == 0){
					PORTB ^= 1<<6;
					} else if(i == 1){
					PORTB ^= 1<<7;
					} else { //i == 2
					PORTG ^= 1<<3;
     8bc:	c8 e0       	ldi	r28, 0x08	; 8
			case 1:
				if(count % 4 != 0){
					return;
				}
				if(i == 0){
					PORTB ^= 1<<6;
     8be:	d0 e4       	ldi	r29, 0x40	; 64
					} else { //i == 2
					PORTG ^= 1<<3;
				}
				break;
			case 2:
				if(count % 2 != 0){
     8c0:	81 70       	andi	r24, 0x01	; 1
     8c2:	99 27       	eor	r25, r25
		PORTB &= ~(1 << 7 | 1 << 6);
		return;
	}
	for(i = 0;i < 3;i++){
		v = (LED_states >> (2*i)) & 3;
		switch(v){
     8c4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <LED_states>
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	fa 01       	movw	r30, r20
     8cc:	ee 0f       	add	r30, r30
     8ce:	ff 1f       	adc	r31, r31
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <update_LEDS+0x48>
     8d2:	35 95       	asr	r19
     8d4:	27 95       	ror	r18
     8d6:	ea 95       	dec	r30
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <update_LEDS+0x44>
     8da:	23 70       	andi	r18, 0x03	; 3
     8dc:	21 30       	cpi	r18, 0x01	; 1
     8de:	91 f0       	breq	.+36     	; 0x904 <update_LEDS+0x76>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <update_LEDS+0x5e>
     8e2:	22 30       	cpi	r18, 0x02	; 2
     8e4:	19 f1       	breq	.+70     	; 0x92c <update_LEDS+0x9e>
     8e6:	23 30       	cpi	r18, 0x03	; 3
     8e8:	a9 f1       	breq	.+106    	; 0x954 <update_LEDS+0xc6>
     8ea:	3f c0       	rjmp	.+126    	; 0x96a <update_LEDS+0xdc>
			case 0:
				if(i == 0){
     8ec:	41 15       	cp	r20, r1
     8ee:	51 05       	cpc	r21, r1
     8f0:	11 f4       	brne	.+4      	; 0x8f6 <update_LEDS+0x68>
					PORTB &= ~(1<<6);
     8f2:	2e 98       	cbi	0x05, 6	; 5
     8f4:	d7 cf       	rjmp	.-82     	; 0x8a4 <update_LEDS+0x16>
				} else if(i == 1){
     8f6:	41 30       	cpi	r20, 0x01	; 1
     8f8:	51 05       	cpc	r21, r1
     8fa:	11 f4       	brne	.+4      	; 0x900 <update_LEDS+0x72>
					PORTB &= ~(1<<7);
     8fc:	2f 98       	cbi	0x05, 7	; 5
     8fe:	d2 cf       	rjmp	.-92     	; 0x8a4 <update_LEDS+0x16>
				} else { //i == 2
					PORTG &= ~(1<<3);
     900:	a3 98       	cbi	0x14, 3	; 20
     902:	33 c0       	rjmp	.+102    	; 0x96a <update_LEDS+0xdc>
				}
				break;
			case 1:
				if(count % 4 != 0){
     904:	10 97       	sbiw	r26, 0x00	; 0
     906:	a9 f5       	brne	.+106    	; 0x972 <update_LEDS+0xe4>
					return;
				}
				if(i == 0){
     908:	41 15       	cp	r20, r1
     90a:	51 05       	cpc	r21, r1
     90c:	21 f4       	brne	.+8      	; 0x916 <update_LEDS+0x88>
					PORTB ^= 1<<6;
     90e:	25 b1       	in	r18, 0x05	; 5
     910:	2d 27       	eor	r18, r29
     912:	25 b9       	out	0x05, r18	; 5
     914:	c7 cf       	rjmp	.-114    	; 0x8a4 <update_LEDS+0x16>
					} else if(i == 1){
     916:	41 30       	cpi	r20, 0x01	; 1
     918:	51 05       	cpc	r21, r1
     91a:	21 f4       	brne	.+8      	; 0x924 <update_LEDS+0x96>
					PORTB ^= 1<<7;
     91c:	25 b1       	in	r18, 0x05	; 5
     91e:	20 58       	subi	r18, 0x80	; 128
     920:	25 b9       	out	0x05, r18	; 5
     922:	c0 cf       	rjmp	.-128    	; 0x8a4 <update_LEDS+0x16>
					} else { //i == 2
					PORTG ^= 1<<3;
     924:	24 b3       	in	r18, 0x14	; 20
     926:	2c 27       	eor	r18, r28
     928:	24 bb       	out	0x14, r18	; 20
     92a:	1f c0       	rjmp	.+62     	; 0x96a <update_LEDS+0xdc>
				}
				break;
			case 2:
				if(count % 2 != 0){
     92c:	00 97       	sbiw	r24, 0x00	; 0
     92e:	09 f5       	brne	.+66     	; 0x972 <update_LEDS+0xe4>
					return;
				}
				if(i == 0){
     930:	41 15       	cp	r20, r1
     932:	51 05       	cpc	r21, r1
     934:	21 f4       	brne	.+8      	; 0x93e <update_LEDS+0xb0>
					PORTB ^= 1<<6;
     936:	25 b1       	in	r18, 0x05	; 5
     938:	2d 27       	eor	r18, r29
     93a:	25 b9       	out	0x05, r18	; 5
     93c:	b3 cf       	rjmp	.-154    	; 0x8a4 <update_LEDS+0x16>
				} else if(i == 1){
     93e:	41 30       	cpi	r20, 0x01	; 1
     940:	51 05       	cpc	r21, r1
     942:	21 f4       	brne	.+8      	; 0x94c <update_LEDS+0xbe>
					PORTB ^= 1<<7;
     944:	25 b1       	in	r18, 0x05	; 5
     946:	20 58       	subi	r18, 0x80	; 128
     948:	25 b9       	out	0x05, r18	; 5
     94a:	ac cf       	rjmp	.-168    	; 0x8a4 <update_LEDS+0x16>
				} else { //i == 2
					PORTG ^= 1<<3;
     94c:	24 b3       	in	r18, 0x14	; 20
     94e:	2c 27       	eor	r18, r28
     950:	24 bb       	out	0x14, r18	; 20
     952:	0b c0       	rjmp	.+22     	; 0x96a <update_LEDS+0xdc>
				}
				break;
			case 3:
				if(i == 0){
     954:	41 15       	cp	r20, r1
     956:	51 05       	cpc	r21, r1
     958:	11 f4       	brne	.+4      	; 0x95e <update_LEDS+0xd0>
					PORTB |= 1<<6;
     95a:	2e 9a       	sbi	0x05, 6	; 5
     95c:	a3 cf       	rjmp	.-186    	; 0x8a4 <update_LEDS+0x16>
				} else if(i == 1){
     95e:	41 30       	cpi	r20, 0x01	; 1
     960:	51 05       	cpc	r21, r1
     962:	11 f4       	brne	.+4      	; 0x968 <update_LEDS+0xda>
					PORTB |= 1<<7;
     964:	2f 9a       	sbi	0x05, 7	; 5
     966:	9e cf       	rjmp	.-196    	; 0x8a4 <update_LEDS+0x16>
				} else { //i == 2
					PORTG |= 1<<3;
     968:	a3 9a       	sbi	0x14, 3	; 20
	if(!LED_states){
		PORTG &= ~(1 << 3);
		PORTB &= ~(1 << 7 | 1 << 6);
		return;
	}
	for(i = 0;i < 3;i++){
     96a:	63 30       	cpi	r22, 0x03	; 3
     96c:	71 05       	cpc	r23, r1
     96e:	0c f4       	brge	.+2      	; 0x972 <update_LEDS+0xe4>
     970:	99 cf       	rjmp	.-206    	; 0x8a4 <update_LEDS+0x16>
				}
				break;
				
		}
	}
}
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <set_RGB>:
 Where <led> is the led number from 0-2
 R[led] = the red value (0-255) for LED <led>
 G[led] = the green value (0-255) for LED <led>
 B[led] = the blue value (0-255) for LED <led>
*/
void set_RGB(uint8_t *R, uint8_t *G, uint8_t *B){
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
	cli();
     97c:	f8 94       	cli
     97e:	fc 01       	movw	r30, r24
     980:	c6 2f       	mov	r28, r22
     982:	d7 2f       	mov	r29, r23
     984:	a4 2f       	mov	r26, r20
     986:	b5 2f       	mov	r27, r21
     988:	bc 01       	movw	r22, r24
     98a:	6d 5f       	subi	r22, 0xFD	; 253
     98c:	7f 4f       	sbci	r23, 0xFF	; 255
	for(int led = 0;led < 3;led++){
		uint8_t r = R[led];
     98e:	31 91       	ld	r19, Z+
		uint8_t g = G[led];
     990:	49 91       	ld	r20, Y+
		uint8_t b = B[led];
     992:	2d 91       	ld	r18, X+
     994:	98 e0       	ldi	r25, 0x08	; 8
		uint8_t count = 8;
		while(count--){
			uint8_t res = g & 128;
     996:	54 2f       	mov	r21, r20
     998:	50 78       	andi	r21, 0x80	; 128
			PORTG |= 1<<4;
     99a:	a4 9a       	sbi	0x14, 4	; 20
			g <<= 1;
     99c:	44 0f       	add	r20, r20
			if(res){
     99e:	55 23       	and	r21, r21
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <set_RGB+0x2c>
     9a2:	36 c0       	rjmp	.+108    	; 0xa10 <set_RGB+0x98>
	...
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
     9b0:	00 00       	nop
			}
			PORTG &= ~(1<<4);
     9b2:	a4 98       	cbi	0x14, 4	; 20
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
			}
			asm("nop");
     9b4:	00 00       	nop
     9b6:	91 50       	subi	r25, 0x01	; 1
	for(int led = 0;led < 3;led++){
		uint8_t r = R[led];
		uint8_t g = G[led];
		uint8_t b = B[led];
		uint8_t count = 8;
		while(count--){
     9b8:	71 f7       	brne	.-36     	; 0x996 <set_RGB+0x1e>
     9ba:	98 e0       	ldi	r25, 0x08	; 8
			}
			asm("nop");
		}
		count = 8;
		while(count--){
			uint8_t res = r & 128;
     9bc:	43 2f       	mov	r20, r19
     9be:	40 78       	andi	r20, 0x80	; 128
			PORTG |= 1<<4;
     9c0:	a4 9a       	sbi	0x14, 4	; 20
			r <<= 1;
     9c2:	33 0f       	add	r19, r19
			if(res){
     9c4:	44 23       	and	r20, r20
     9c6:	09 f4       	brne	.+2      	; 0x9ca <set_RGB+0x52>
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <set_RGB+0xa6>
	...
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
     9d6:	00 00       	nop
			}
			PORTG &= ~(1<<4);
     9d8:	a4 98       	cbi	0x14, 4	; 20
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
			}
			asm("nop");
     9da:	00 00       	nop
     9dc:	91 50       	subi	r25, 0x01	; 1
				asm("nop");
			}
			asm("nop");
		}
		count = 8;
		while(count--){
     9de:	71 f7       	brne	.-36     	; 0x9bc <set_RGB+0x44>
     9e0:	98 e0       	ldi	r25, 0x08	; 8
			}
			asm("nop");
		}
		count = 8;
		while(count--){
			uint8_t res = b & 128;
     9e2:	32 2f       	mov	r19, r18
     9e4:	30 78       	andi	r19, 0x80	; 128
			PORTG |= 1<<4;
     9e6:	a4 9a       	sbi	0x14, 4	; 20
			b <<= 1;
     9e8:	22 0f       	add	r18, r18
			if(res){
     9ea:	33 23       	and	r19, r19
     9ec:	f9 f0       	breq	.+62     	; 0xa2c <set_RGB+0xb4>
	...
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
     9fa:	00 00       	nop
			}
			PORTG &= ~(1<<4);
     9fc:	a4 98       	cbi	0x14, 4	; 20
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
			}
			asm("nop");
     9fe:	00 00       	nop
     a00:	91 50       	subi	r25, 0x01	; 1
				asm("nop");
			}
			asm("nop");
		}
		count = 8;
		while(count--){
     a02:	79 f7       	brne	.-34     	; 0x9e2 <set_RGB+0x6a>
 G[led] = the green value (0-255) for LED <led>
 B[led] = the blue value (0-255) for LED <led>
*/
void set_RGB(uint8_t *R, uint8_t *G, uint8_t *B){
	cli();
	for(int led = 0;led < 3;led++){
     a04:	e6 17       	cp	r30, r22
     a06:	f7 07       	cpc	r31, r23
     a08:	09 f0       	breq	.+2      	; 0xa0c <set_RGB+0x94>
     a0a:	c1 cf       	rjmp	.-126    	; 0x98e <set_RGB+0x16>
				asm("nop");
			}
			asm("nop");
		}
	}
	sei();
     a0c:	78 94       	sei
     a0e:	15 c0       	rjmp	.+42     	; 0xa3a <set_RGB+0xc2>
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
			}
			PORTG &= ~(1<<4);
     a10:	a4 98       	cbi	0x14, 4	; 20
	...
			if(!res){
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
     a1a:	00 00       	nop
     a1c:	cb cf       	rjmp	.-106    	; 0x9b4 <set_RGB+0x3c>
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
			}
			PORTG &= ~(1<<4);
     a1e:	a4 98       	cbi	0x14, 4	; 20
	...
			if(!res){
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
     a28:	00 00       	nop
     a2a:	d7 cf       	rjmp	.-82     	; 0x9da <set_RGB+0x62>
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
			}
			PORTG &= ~(1<<4);
     a2c:	a4 98       	cbi	0x14, 4	; 20
	...
			if(!res){
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
				asm("nop");
     a36:	00 00       	nop
     a38:	e2 cf       	rjmp	.-60     	; 0x9fe <set_RGB+0x86>
			}
			asm("nop");
		}
	}
	sei();
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	08 95       	ret

00000a40 <main>:
#include "dac.h"
#include "meow.h"

void handle_CAN_packet(CANPacket *packet);

int main(){
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
     a48:	66 97       	sbiw	r28, 0x16	; 22
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
	DDRD = 1<<4;
     a54:	80 e1       	ldi	r24, 0x10	; 16
     a56:	8a b9       	out	0x0a, r24	; 10
	PORTD = 1<<4;
     a58:	8b b9       	out	0x0b, r24	; 11
	DDRB = 1<<6;
     a5a:	80 e4       	ldi	r24, 0x40	; 64
     a5c:	84 b9       	out	0x04, r24	; 4
	PORTB = 1<<6;
     a5e:	85 b9       	out	0x05, r24	; 5
	PORTA = 0xF0; //Enable DIP switch pullups
     a60:	90 ef       	ldi	r25, 0xF0	; 240
     a62:	92 b9       	out	0x02, r25	; 2
	//_delay_ms(250);
	DDRG |= 1<<4;
     a64:	9c 9a       	sbi	0x13, 4	; 19
	PORTB = 0;
     a66:	15 b8       	out	0x05, r1	; 5
	uint8_t H[3] = {64, 64, 64};
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	8a 83       	std	Y+2, r24	; 0x02
     a6c:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t L[3] = {0, 0, 0};
     a6e:	1c 82       	std	Y+4, r1	; 0x04
     a70:	1d 82       	std	Y+5, r1	; 0x05
     a72:	1e 82       	std	Y+6, r1	; 0x06
	setup_timers();
     a74:	c5 d4       	rcall	.+2442   	; 0x1400 <setup_timers>
	I2C_init(333);
     a76:	8d e4       	ldi	r24, 0x4D	; 77
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	a3 de       	rcall	.-698    	; 0x7c2 <I2C_init>
	cli();
     a7c:	f8 94       	cli
	set_RGB(H, L, L);
     a7e:	ae 01       	movw	r20, r28
     a80:	4c 5f       	subi	r20, 0xFC	; 252
     a82:	5f 4f       	sbci	r21, 0xFF	; 255
     a84:	ba 01       	movw	r22, r20
     a86:	ce 01       	movw	r24, r28
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	76 df       	rcall	.-276    	; 0x978 <set_RGB>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a8c:	2f ef       	ldi	r18, 0xFF	; 255
     a8e:	81 ee       	ldi	r24, 0xE1	; 225
     a90:	94 e0       	ldi	r25, 0x04	; 4
     a92:	21 50       	subi	r18, 0x01	; 1
     a94:	80 40       	sbci	r24, 0x00	; 0
     a96:	90 40       	sbci	r25, 0x00	; 0
     a98:	e1 f7       	brne	.-8      	; 0xa92 <main+0x52>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <main+0x5c>
     a9c:	00 00       	nop
	_delay_ms(100);
	//play_audio(meow, sizeof(meow));
	set_RGB(L, L, L);
     a9e:	ae 01       	movw	r20, r28
     aa0:	4c 5f       	subi	r20, 0xFC	; 252
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	ba 01       	movw	r22, r20
     aa6:	ca 01       	movw	r24, r20
	dac_write(0);
     aa8:	67 df       	rcall	.-306    	; 0x978 <set_RGB>
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	2e db       	rcall	.-2468   	; 0x10a <dac_write>
	PORTD = 0;
     aae:	1b b8       	out	0x0b, r1	; 11
	sei();
     ab0:	78 94       	sei
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     ab2:	9f e0       	ldi	r25, 0x0F	; 15
     ab4:	88 e1       	ldi	r24, 0x18	; 24
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	a8 95       	wdr
     abc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
#define USART_TX_BUF_SZ 16 //UART TX buffer size
#define USART_RX_BUF_SZ 16 //UART RX buffer size

/*Returns the value of the binary representation of the dipswitch*/
uint8_t inline get_dip_switch(){
	return ((~PINA) >> 4) & 0xF;
     ac6:	80 b1       	in	r24, 0x00	; 0
	wdt_enable(WDTO_2S);
	InitCAN(DEVICE_GROUP_SCIENCE, get_dip_switch());
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	80 95       	com	r24
     acc:	90 95       	com	r25
     ace:	95 95       	asr	r25
     ad0:	87 95       	ror	r24
     ad2:	95 95       	asr	r25
     ad4:	87 95       	ror	r24
     ad6:	95 95       	asr	r25
     ad8:	87 95       	ror	r24
     ada:	95 95       	asr	r25
     adc:	87 95       	ror	r24
     ade:	8f 70       	andi	r24, 0x0F	; 15
     ae0:	68 2f       	mov	r22, r24
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	87 e0       	ldi	r24, 0x07	; 7
	init_servos();
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	75 d2       	rcall	.+1258   	; 0xfd4 <InitCAN>
	init_motor();
     aea:	0a d4       	rcall	.+2068   	; 0x1300 <init_servos>
     aec:	58 d0       	rcall	.+176    	; 0xb9e <init_motor>
	CANPacket packet;
	uint8_t count = 0;
	while(1){
		if(PollAndReceiveCANPacket(&packet) == 0){
			set_LED(LED_CAN, 3);
			update_LEDS(get_mS()/40);
     aee:	0f 2e       	mov	r0, r31
     af0:	f8 e2       	ldi	r31, 0x28	; 40
     af2:	cf 2e       	mov	r12, r31
     af4:	d1 2c       	mov	r13, r1
     af6:	e1 2c       	mov	r14, r1
     af8:	f1 2c       	mov	r15, r1
		write_PWM(3, 10);
		while(1);*/
	CANPacket packet;
	uint8_t count = 0;
	while(1){
		if(PollAndReceiveCANPacket(&packet) == 0){
     afa:	f0 2d       	mov	r31, r0
     afc:	ce 01       	movw	r24, r28
     afe:	07 96       	adiw	r24, 0x07	; 7
     b00:	b9 d2       	rcall	.+1394   	; 0x1074 <PollAndReceiveCANPacket>
			set_LED(LED_CAN, 3);
     b02:	89 2b       	or	r24, r25
     b04:	79 f4       	brne	.+30     	; 0xb24 <main+0xe4>
     b06:	63 e0       	ldi	r22, 0x03	; 3
			update_LEDS(get_mS()/40);
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	a2 de       	rcall	.-700    	; 0x850 <set_LED>
     b0c:	9b d4       	rcall	.+2358   	; 0x1444 <get_mS>
     b0e:	a7 01       	movw	r20, r14
     b10:	96 01       	movw	r18, r12
     b12:	4d d5       	rcall	.+2714   	; 0x15ae <__udivmodsi4>
			handle_CAN_packet(&packet);
     b14:	c9 01       	movw	r24, r18
     b16:	bb de       	rcall	.-650    	; 0x88e <update_LEDS>
     b18:	ce 01       	movw	r24, r28
     b1a:	07 96       	adiw	r24, 0x07	; 7
			set_LED(LED_CAN, 0);
     b1c:	36 dd       	rcall	.-1428   	; 0x58a <handle_CAN_packet>
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	96 de       	rcall	.-724    	; 0x850 <set_LED>
		}
		motor_control_tick();
     b24:	9e d0       	rcall	.+316    	; 0xc62 <motor_control_tick>
     b26:	81 e0       	ldi	r24, 0x01	; 1
		volatile int n = get_encoder_ticks(1);
     b28:	fc da       	rcall	.-2568   	; 0x122 <get_encoder_ticks>
     b2a:	7e 8b       	std	Y+22, r23	; 0x16
     b2c:	6d 8b       	std	Y+21, r22	; 0x15
     b2e:	8d 89       	ldd	r24, Y+21	; 0x15
     b30:	9e 89       	ldd	r25, Y+22	; 0x16
		uint8_t a[3]={n / 32, n / 32, n / 32};
     b32:	99 23       	and	r25, r25
     b34:	0c f4       	brge	.+2      	; 0xb38 <main+0xf8>
     b36:	4f 96       	adiw	r24, 0x1f	; 31
     b38:	95 95       	asr	r25
     b3a:	87 95       	ror	r24
     b3c:	95 95       	asr	r25
     b3e:	87 95       	ror	r24
     b40:	95 95       	asr	r25
     b42:	87 95       	ror	r24
     b44:	95 95       	asr	r25
     b46:	87 95       	ror	r24
     b48:	95 95       	asr	r25
     b4a:	87 95       	ror	r24
     b4c:	8a 8b       	std	Y+18, r24	; 0x12
     b4e:	8d 89       	ldd	r24, Y+21	; 0x15
     b50:	9e 89       	ldd	r25, Y+22	; 0x16
     b52:	99 23       	and	r25, r25
     b54:	0c f4       	brge	.+2      	; 0xb58 <main+0x118>
     b56:	4f 96       	adiw	r24, 0x1f	; 31
     b58:	95 95       	asr	r25
     b5a:	87 95       	ror	r24
     b5c:	95 95       	asr	r25
     b5e:	87 95       	ror	r24
     b60:	95 95       	asr	r25
     b62:	87 95       	ror	r24
     b64:	95 95       	asr	r25
     b66:	87 95       	ror	r24
     b68:	95 95       	asr	r25
     b6a:	87 95       	ror	r24
     b6c:	8b 8b       	std	Y+19, r24	; 0x13
     b6e:	8d 89       	ldd	r24, Y+21	; 0x15
     b70:	9e 89       	ldd	r25, Y+22	; 0x16
     b72:	99 23       	and	r25, r25
     b74:	0c f4       	brge	.+2      	; 0xb78 <main+0x138>
     b76:	4f 96       	adiw	r24, 0x1f	; 31
     b78:	95 95       	asr	r25
     b7a:	87 95       	ror	r24
     b7c:	95 95       	asr	r25
     b7e:	87 95       	ror	r24
     b80:	95 95       	asr	r25
     b82:	87 95       	ror	r24
     b84:	95 95       	asr	r25
     b86:	87 95       	ror	r24
     b88:	95 95       	asr	r25
     b8a:	87 95       	ror	r24
     b8c:	8c 8b       	std	Y+20, r24	; 0x14
     b8e:	ae 01       	movw	r20, r28
		set_RGB(a, a, a);
     b90:	4e 5e       	subi	r20, 0xEE	; 238
     b92:	5f 4f       	sbci	r21, 0xFF	; 255
     b94:	ba 01       	movw	r22, r20
     b96:	ca 01       	movw	r24, r20
     b98:	ef de       	rcall	.-546    	; 0x978 <set_RGB>
     b9a:	a8 95       	wdr
     b9c:	af cf       	rjmp	.-162    	; 0xafc <main+0xbc>

00000b9e <init_motor>:

int16_t motor_powers[3];
int32_t last_update[3];

/*Initializes the motor controller and sets some reasonable defaults*/
void init_motor(){
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
	DDRE |= (1 << 3) | (1 << 4) | (1 << 5); //set motor pwm pins to outputs
     ba2:	8d b1       	in	r24, 0x0d	; 13
     ba4:	88 63       	ori	r24, 0x38	; 56
     ba6:	8d b9       	out	0x0d, r24	; 13
	DDRB |= (1 << 3) | (1 << 4) | (1 << 5); //set motor direction pins to outputs
     ba8:	84 b1       	in	r24, 0x04	; 4
     baa:	88 63       	ori	r24, 0x38	; 56
     bac:	84 b9       	out	0x04, r24	; 4
	for(int m = 0;m < 3;m++){ //Set the inital motor powers to 0
		motor_powers[m] = 0;
     bae:	c9 e0       	ldi	r28, 0x09	; 9
     bb0:	d1 e0       	ldi	r29, 0x01	; 1
     bb2:	19 82       	std	Y+1, r1	; 0x01
     bb4:	18 82       	st	Y, r1
		write_PWM(m + 3, 0);
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	f4 d2       	rcall	.+1512   	; 0x11a6 <write_PWM>
/*Initializes the motor controller and sets some reasonable defaults*/
void init_motor(){
	DDRE |= (1 << 3) | (1 << 4) | (1 << 5); //set motor pwm pins to outputs
	DDRB |= (1 << 3) | (1 << 4) | (1 << 5); //set motor direction pins to outputs
	for(int m = 0;m < 3;m++){ //Set the inital motor powers to 0
		motor_powers[m] = 0;
     bbe:	1b 82       	std	Y+3, r1	; 0x03
     bc0:	1a 82       	std	Y+2, r1	; 0x02
		write_PWM(m + 3, 0);
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	84 e0       	ldi	r24, 0x04	; 4
     bc8:	ee d2       	rcall	.+1500   	; 0x11a6 <write_PWM>
/*Initializes the motor controller and sets some reasonable defaults*/
void init_motor(){
	DDRE |= (1 << 3) | (1 << 4) | (1 << 5); //set motor pwm pins to outputs
	DDRB |= (1 << 3) | (1 << 4) | (1 << 5); //set motor direction pins to outputs
	for(int m = 0;m < 3;m++){ //Set the inital motor powers to 0
		motor_powers[m] = 0;
     bca:	1d 82       	std	Y+5, r1	; 0x05
     bcc:	1c 82       	std	Y+4, r1	; 0x04
		write_PWM(m + 3, 0);
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	85 e0       	ldi	r24, 0x05	; 5
	}
	init_encoders();
     bd4:	e8 d2       	rcall	.+1488   	; 0x11a6 <write_PWM>
     bd6:	b9 da       	rcall	.-2702   	; 0x14a <init_encoders>
}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <set_motor_direction>:

void set_motor_direction(uint8_t motor, uint8_t dir){
	dir = !!dir;
	if(motor > 2){
     bde:	83 30       	cpi	r24, 0x03	; 3
     be0:	b0 f4       	brcc	.+44     	; 0xc0e <set_motor_direction+0x30>
		return;
	}
	motor += 3;
	dir <<= motor;
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	61 11       	cpse	r22, r1
     be8:	02 c0       	rjmp	.+4      	; 0xbee <set_motor_direction+0x10>
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	8d 5f       	subi	r24, 0xFD	; 253
     bf0:	a9 01       	movw	r20, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <set_motor_direction+0x1a>
     bf4:	44 0f       	add	r20, r20
     bf6:	55 1f       	adc	r21, r21
     bf8:	8a 95       	dec	r24
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <set_motor_direction+0x16>
     bfc:	ca 01       	movw	r24, r20
	PORTB &= ~dir;
     bfe:	95 b1       	in	r25, 0x05	; 5
     c00:	28 2f       	mov	r18, r24
     c02:	20 95       	com	r18
     c04:	92 23       	and	r25, r18
     c06:	95 b9       	out	0x05, r25	; 5
	PORTB |= dir;
     c08:	95 b1       	in	r25, 0x05	; 5
     c0a:	89 2b       	or	r24, r25
     c0c:	85 b9       	out	0x05, r24	; 5
     c0e:	08 95       	ret

00000c10 <set_motor_power>:
/*Sets the motor power more safely
  Parameters:
  uint8_t motor: selects which motor to set the power of
  int16_t power: the motor power to set -1023 to +1023
  Negative values reverse the motor*/
void set_motor_power(uint8_t motor, int16_t power){
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
	if(motor < 0 || motor > 2){
     c14:	83 30       	cpi	r24, 0x03	; 3
     c16:	10 f5       	brcc	.+68     	; 0xc5c <set_motor_power+0x4c>
     c18:	26 2f       	mov	r18, r22
     c1a:	37 2f       	mov	r19, r23
     c1c:	21 30       	cpi	r18, 0x01	; 1
     c1e:	9c ef       	ldi	r25, 0xFC	; 252
     c20:	39 07       	cpc	r19, r25
     c22:	14 f4       	brge	.+4      	; 0xc28 <set_motor_power+0x18>
     c24:	21 e0       	ldi	r18, 0x01	; 1
     c26:	3c ef       	ldi	r19, 0xFC	; 252
		power = -1023;
	}
	if(power > 1023){
		power = 1023;
	}
	motor_powers[motor] = power;
     c28:	c8 2f       	mov	r28, r24
     c2a:	d0 e0       	ldi	r29, 0x00	; 0
     c2c:	fe 01       	movw	r30, r28
     c2e:	ee 0f       	add	r30, r30
     c30:	ff 1f       	adc	r31, r31
     c32:	e7 5f       	subi	r30, 0xF7	; 247
     c34:	fe 4f       	sbci	r31, 0xFE	; 254
     c36:	21 15       	cp	r18, r1
     c38:	84 e0       	ldi	r24, 0x04	; 4
     c3a:	38 07       	cpc	r19, r24
     c3c:	14 f0       	brlt	.+4      	; 0xc42 <set_motor_power+0x32>
     c3e:	2f ef       	ldi	r18, 0xFF	; 255
     c40:	33 e0       	ldi	r19, 0x03	; 3
     c42:	31 83       	std	Z+1, r19	; 0x01
     c44:	20 83       	st	Z, r18
	last_update[motor] = get_mS();
     c46:	fe d3       	rcall	.+2044   	; 0x1444 <get_mS>
     c48:	cc 0f       	add	r28, r28
     c4a:	dd 1f       	adc	r29, r29
     c4c:	cc 0f       	add	r28, r28
     c4e:	dd 1f       	adc	r29, r29
     c50:	c1 5f       	subi	r28, 0xF1	; 241
     c52:	de 4f       	sbci	r29, 0xFE	; 254
     c54:	68 83       	st	Y, r22
     c56:	79 83       	std	Y+1, r23	; 0x01
     c58:	8a 83       	std	Y+2, r24	; 0x02
     c5a:	9b 83       	std	Y+3, r25	; 0x03
}
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <motor_control_tick>:

/*Update the motors. Call in a loop*/
void motor_control_tick(){
     c62:	8f 92       	push	r8
     c64:	9f 92       	push	r9
     c66:	af 92       	push	r10
     c68:	bf 92       	push	r11
     c6a:	cf 92       	push	r12
     c6c:	df 92       	push	r13
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	0f 2e       	mov	r0, r31
     c7a:	ff e0       	ldi	r31, 0x0F	; 15
     c7c:	ef 2e       	mov	r14, r31
     c7e:	f1 e0       	ldi	r31, 0x01	; 1
     c80:	ff 2e       	mov	r15, r31
     c82:	f0 2d       	mov	r31, r0
     c84:	09 e0       	ldi	r16, 0x09	; 9
     c86:	11 e0       	ldi	r17, 0x01	; 1
	for(uint8_t motor = 0;motor < 3;motor++){
     c88:	c0 e0       	ldi	r28, 0x00	; 0
		if(get_mS() - last_update[motor] > MOTOR_SET_TIMEOUT){
     c8a:	dc d3       	rcall	.+1976   	; 0x1444 <get_mS>
     c8c:	f7 01       	movw	r30, r14
     c8e:	81 90       	ld	r8, Z+
     c90:	91 90       	ld	r9, Z+
     c92:	a1 90       	ld	r10, Z+
     c94:	b1 90       	ld	r11, Z+
     c96:	7f 01       	movw	r14, r30
     c98:	dc 01       	movw	r26, r24
     c9a:	cb 01       	movw	r24, r22
     c9c:	88 19       	sub	r24, r8
     c9e:	99 09       	sbc	r25, r9
     ca0:	aa 09       	sbc	r26, r10
     ca2:	bb 09       	sbc	r27, r11
     ca4:	81 3d       	cpi	r24, 0xD1	; 209
     ca6:	97 40       	sbci	r25, 0x07	; 7
     ca8:	a1 05       	cpc	r26, r1
     caa:	b1 05       	cpc	r27, r1
     cac:	30 f0       	brcs	.+12     	; 0xcba <motor_control_tick+0x58>
			/*If more than set time has elapsed without an update to this motor, turn it off*/
			motor_powers[motor] = 0;
     cae:	f8 01       	movw	r30, r16
     cb0:	11 82       	std	Z+1, r1	; 0x01
     cb2:	10 82       	st	Z, r1
		}
		int16_t power = motor_powers[motor];
     cb4:	c1 2c       	mov	r12, r1
     cb6:	d1 2c       	mov	r13, r1
     cb8:	0c c0       	rjmp	.+24     	; 0xcd2 <motor_control_tick+0x70>
     cba:	f8 01       	movw	r30, r16
     cbc:	c0 80       	ld	r12, Z
     cbe:	d1 80       	ldd	r13, Z+1	; 0x01
		if(power < 0){
     cc0:	dd 20       	and	r13, r13
     cc2:	3c f4       	brge	.+14     	; 0xcd2 <motor_control_tick+0x70>
			set_motor_direction(motor, 1);
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	8c 2f       	mov	r24, r28
     cc8:	8a df       	rcall	.-236    	; 0xbde <set_motor_direction>
			power = -power;
     cca:	d1 94       	neg	r13
     ccc:	c1 94       	neg	r12
     cce:	d1 08       	sbc	r13, r1
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <motor_control_tick+0x76>
		} else {
			set_motor_direction(motor, 0);
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	8c 2f       	mov	r24, r28
     cd6:	83 df       	rcall	.-250    	; 0xbde <set_motor_direction>
		}
		write_PWM(motor + 3, power);
     cd8:	b6 01       	movw	r22, r12
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	8c 0f       	add	r24, r28
     cde:	63 d2       	rcall	.+1222   	; 0x11a6 <write_PWM>
	last_update[motor] = get_mS();
}

/*Update the motors. Call in a loop*/
void motor_control_tick(){
	for(uint8_t motor = 0;motor < 3;motor++){
     ce0:	cf 5f       	subi	r28, 0xFF	; 255
     ce2:	0e 5f       	subi	r16, 0xFE	; 254
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	c3 30       	cpi	r28, 0x03	; 3
     ce8:	81 f6       	brne	.-96     	; 0xc8a <motor_control_tick+0x28>
		} else {
			set_motor_direction(motor, 0);
		}
		write_PWM(motor + 3, power);
	}
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	bf 90       	pop	r11
     cfa:	af 90       	pop	r10
     cfc:	9f 90       	pop	r9
     cfe:	8f 90       	pop	r8
     d00:	08 95       	ret

00000d02 <disable_mob_interrupt>:
	CANPAGE = ((mob & 0x0F) << 4);
}

/*Disables the interrupt for the specified MOb*/
void disable_mob_interrupt(uint8_t mob){
	if(mob < 8){
     d02:	88 30       	cpi	r24, 0x08	; 8
     d04:	80 f4       	brcc	.+32     	; 0xd26 <disable_mob_interrupt+0x24>
		CANIE2 &= ~(1 << mob);
     d06:	ee ed       	ldi	r30, 0xDE	; 222
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	40 81       	ld	r20, Z
     d0c:	21 e0       	ldi	r18, 0x01	; 1
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	b9 01       	movw	r22, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <disable_mob_interrupt+0x16>
     d14:	66 0f       	add	r22, r22
     d16:	77 1f       	adc	r23, r23
     d18:	8a 95       	dec	r24
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <disable_mob_interrupt+0x12>
     d1c:	cb 01       	movw	r24, r22
     d1e:	80 95       	com	r24
     d20:	84 23       	and	r24, r20
     d22:	80 83       	st	Z, r24
     d24:	08 95       	ret
		} else {
		CANIE1 &= ~(1 << (mob - 8));
     d26:	ef ed       	ldi	r30, 0xDF	; 223
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	40 81       	ld	r20, Z
     d2c:	88 50       	subi	r24, 0x08	; 8
     d2e:	21 e0       	ldi	r18, 0x01	; 1
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	b9 01       	movw	r22, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <disable_mob_interrupt+0x38>
     d36:	66 0f       	add	r22, r22
     d38:	77 1f       	adc	r23, r23
     d3a:	8a 95       	dec	r24
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <disable_mob_interrupt+0x34>
     d3e:	cb 01       	movw	r24, r22
     d40:	80 95       	com	r24
     d42:	84 23       	and	r24, r20
     d44:	80 83       	st	Z, r24
     d46:	08 95       	ret

00000d48 <enable_mob_interrupt>:
	}
}

/*Enable the interrupt for the specified MOb*/
void enable_mob_interrupt(uint8_t mob){
	if(mob < 8){
     d48:	88 30       	cpi	r24, 0x08	; 8
     d4a:	78 f4       	brcc	.+30     	; 0xd6a <enable_mob_interrupt+0x22>
		CANIE2 |= (1 << mob);
     d4c:	ee ed       	ldi	r30, 0xDE	; 222
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	40 81       	ld	r20, Z
     d52:	21 e0       	ldi	r18, 0x01	; 1
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	b9 01       	movw	r22, r18
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <enable_mob_interrupt+0x16>
     d5a:	66 0f       	add	r22, r22
     d5c:	77 1f       	adc	r23, r23
     d5e:	8a 95       	dec	r24
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <enable_mob_interrupt+0x12>
     d62:	cb 01       	movw	r24, r22
     d64:	84 2b       	or	r24, r20
     d66:	80 83       	st	Z, r24
     d68:	08 95       	ret
		} else {
		CANIE1 |= (1 << (mob - 8));
     d6a:	ef ed       	ldi	r30, 0xDF	; 223
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	40 81       	ld	r20, Z
     d70:	88 50       	subi	r24, 0x08	; 8
     d72:	21 e0       	ldi	r18, 0x01	; 1
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	b9 01       	movw	r22, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <enable_mob_interrupt+0x36>
     d7a:	66 0f       	add	r22, r22
     d7c:	77 1f       	adc	r23, r23
     d7e:	8a 95       	dec	r24
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <enable_mob_interrupt+0x32>
     d82:	cb 01       	movw	r24, r22
     d84:	84 2b       	or	r24, r20
     d86:	80 83       	st	Z, r24
     d88:	08 95       	ret

00000d8a <__vector_18>:
	}
}

/*CAN controller interrupt handler*/
ISR(CANIT_vect){
     d8a:	1f 92       	push	r1
     d8c:	0f 92       	push	r0
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	0f 92       	push	r0
     d92:	11 24       	eor	r1, r1
     d94:	0b b6       	in	r0, 0x3b	; 59
     d96:	0f 92       	push	r0
     d98:	2f 93       	push	r18
     d9a:	3f 93       	push	r19
     d9c:	4f 93       	push	r20
     d9e:	5f 93       	push	r21
     da0:	6f 93       	push	r22
     da2:	7f 93       	push	r23
     da4:	8f 93       	push	r24
     da6:	9f 93       	push	r25
     da8:	af 93       	push	r26
     daa:	bf 93       	push	r27
     dac:	cf 93       	push	r28
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
	uint8_t canpage = CANPAGE; //Save CAN page
     db2:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if((CANHPMOB & 0xF0) != 0xF0){ //Message io?
     db6:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     dba:	80 7f       	andi	r24, 0xF0	; 240
     dbc:	80 3f       	cpi	r24, 0xF0	; 240
     dbe:	a1 f1       	breq	.+104    	; 0xe28 <__vector_18+0x9e>
		int mob = (CANHPMOB >> 4);
     dc0:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     dc4:	82 95       	swap	r24
     dc6:	8f 70       	andi	r24, 0x0F	; 15

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     dc8:	90 e1       	ldi	r25, 0x10	; 16
     dca:	89 9f       	mul	r24, r25
     dcc:	90 01       	movw	r18, r0
     dce:	11 24       	eor	r1, r1
     dd0:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
ISR(CANIT_vect){
	uint8_t canpage = CANPAGE; //Save CAN page
	if((CANHPMOB & 0xF0) != 0xF0){ //Message io?
		int mob = (CANHPMOB >> 4);
		select_mob(mob);
		if(CANSTMOB & (1 << TXOK)){ //TX
     dd4:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     dd8:	96 ff       	sbrs	r25, 6
     dda:	08 c0       	rjmp	.+16     	; 0xdec <__vector_18+0x62>
			/*Reset the MOb*/
			CANSTMOB &= 0;
     ddc:	ee ee       	ldi	r30, 0xEE	; 238
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	90 81       	ld	r25, Z
     de2:	10 82       	st	Z, r1
			CANCDMOB = 0;
     de4:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			enable_mob_interrupt(mob);
     de8:	af df       	rcall	.-162    	; 0xd48 <enable_mob_interrupt>
     dea:	22 c0       	rjmp	.+68     	; 0xe30 <__vector_18+0xa6>
		} else { //RX
			msgs_av++; //Increase count of messages
     dec:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <msgs_av>
     df0:	9f 5f       	subi	r25, 0xFF	; 255
     df2:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <msgs_av>
			rxed_mobs[!!(mob & 8)] |= (1 << (mob & 7)); // Mark which MOb has a message
     df6:	e8 2f       	mov	r30, r24
     df8:	e6 95       	lsr	r30
     dfa:	e6 95       	lsr	r30
     dfc:	e6 95       	lsr	r30
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	e4 5e       	subi	r30, 0xE4	; 228
     e02:	fe 4f       	sbci	r31, 0xFE	; 254
     e04:	90 81       	ld	r25, Z
     e06:	48 2f       	mov	r20, r24
     e08:	47 70       	andi	r20, 0x07	; 7
     e0a:	21 e0       	ldi	r18, 0x01	; 1
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <__vector_18+0x8a>
     e10:	22 0f       	add	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	4a 95       	dec	r20
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <__vector_18+0x86>
     e18:	29 2b       	or	r18, r25
     e1a:	20 83       	st	Z, r18
			CANSTMOB &= 0; //Reset the MOb
     e1c:	ee ee       	ldi	r30, 0xEE	; 238
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	90 81       	ld	r25, Z
			disable_mob_interrupt(mob);
     e22:	10 82       	st	Z, r1
     e24:	6e df       	rcall	.-292    	; 0xd02 <disable_mob_interrupt>
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <__vector_18+0xa6>
		}
	} else {
		CANGIT |= 0; //Error interrupt - Handle these?
     e28:	ea ed       	ldi	r30, 0xDA	; 218
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 83       	st	Z, r24
	}
	CANPAGE = canpage; //restore CAN page
     e30:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}
     e34:	ff 91       	pop	r31
     e36:	ef 91       	pop	r30
     e38:	cf 91       	pop	r28
     e3a:	bf 91       	pop	r27
     e3c:	af 91       	pop	r26
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	7f 91       	pop	r23
     e44:	6f 91       	pop	r22
     e46:	5f 91       	pop	r21
     e48:	4f 91       	pop	r20
     e4a:	3f 91       	pop	r19
     e4c:	2f 91       	pop	r18
     e4e:	0f 90       	pop	r0
     e50:	0b be       	out	0x3b, r0	; 59
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <set_mob_rx_filter>:

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     e5c:	9c 01       	movw	r18, r24
     e5e:	33 27       	eor	r19, r19
     e60:	22 95       	swap	r18
     e62:	32 95       	swap	r19
     e64:	30 7f       	andi	r19, 0xF0	; 240
     e66:	32 27       	eor	r19, r18
     e68:	20 7f       	andi	r18, 0xF0	; 240
     e6a:	32 27       	eor	r19, r18
     e6c:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
/*Reset the receive filter for the given MOb*/
void set_mob_rx_filter(int mob){
	select_mob(mob);
	uint16_t RX_mask = 0x3FF; // mask out priority bit, compare on everything else
	uint16_t RX_tag = 0x3F; //0th MOb is for broadcast packets, group = 0, serial = 0x3F
	if(mob > 0 && mob <= 2){ //1st und 2nd MOb is for device group broadcasts, match device group and 0x3F serial
     e70:	9c 01       	movw	r18, r24
     e72:	21 50       	subi	r18, 0x01	; 1
     e74:	31 09       	sbc	r19, r1
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	40 f4       	brcc	.+16     	; 0xe8c <set_mob_rx_filter+0x30>
		RX_tag = (devGrp << 6) | 0x3F;
     e7c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <devGrp>
     e80:	20 e4       	ldi	r18, 0x40	; 64
     e82:	82 9f       	mul	r24, r18
     e84:	c0 01       	movw	r24, r0
     e86:	11 24       	eor	r1, r1
     e88:	8f 63       	ori	r24, 0x3F	; 63
     e8a:	0f c0       	rjmp	.+30     	; 0xeaa <set_mob_rx_filter+0x4e>
	} else if(mob > 2 && mob <= 4){ //2nd and 3rd MOb is for the device specific message. Match the whole ID
     e8c:	03 97       	sbiw	r24, 0x03	; 3
     e8e:	02 97       	sbiw	r24, 0x02	; 2
     e90:	50 f4       	brcc	.+20     	; 0xea6 <set_mob_rx_filter+0x4a>
		RX_tag = (devGrp << 6) | devSer;
     e92:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <devGrp>
     e96:	20 e4       	ldi	r18, 0x40	; 64
     e98:	82 9f       	mul	r24, r18
     e9a:	c0 01       	movw	r24, r0
     e9c:	11 24       	eor	r1, r1
     e9e:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <devSer>
     ea2:	82 2b       	or	r24, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <set_mob_rx_filter+0x4e>

/*Reset the receive filter for the given MOb*/
void set_mob_rx_filter(int mob){
	select_mob(mob);
	uint16_t RX_mask = 0x3FF; // mask out priority bit, compare on everything else
	uint16_t RX_tag = 0x3F; //0th MOb is for broadcast packets, group = 0, serial = 0x3F
     ea6:	8f e3       	ldi	r24, 0x3F	; 63
     ea8:	90 e0       	ldi	r25, 0x00	; 0
		RX_tag = (devGrp << 6) | 0x3F;
	} else if(mob > 2 && mob <= 4){ //2nd and 3rd MOb is for the device specific message. Match the whole ID
		RX_tag = (devGrp << 6) | devSer;
	}

	CANIDM4 = 0;
     eaa:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM3 = 0;
     eae:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDT4 = 0;
     eb2:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0;
     eb6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = ((RX_tag & 7) << 5);
     eba:	28 2f       	mov	r18, r24
     ebc:	22 95       	swap	r18
     ebe:	22 0f       	add	r18, r18
     ec0:	20 7e       	andi	r18, 0xE0	; 224
     ec2:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = ((RX_tag & 0x7F8) >> 3);
     ec6:	88 7f       	andi	r24, 0xF8	; 248
     ec8:	97 70       	andi	r25, 0x07	; 7
     eca:	96 95       	lsr	r25
     ecc:	87 95       	ror	r24
     ece:	96 95       	lsr	r25
     ed0:	87 95       	ror	r24
     ed2:	96 95       	lsr	r25
     ed4:	87 95       	ror	r24
     ed6:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDM2 = ((RX_mask & 7) << 5);
     eda:	80 ee       	ldi	r24, 0xE0	; 224
     edc:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = ((RX_mask & 0x7F8) >> 3);
     ee0:	8f e7       	ldi	r24, 0x7F	; 127
     ee2:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
     ee6:	08 95       	ret

00000ee8 <init_CAN>:
Parameters:
uint32_t rate: the baud rate selection
uint8_t txmobs: how many MOBs to dedicate to transmission
uint8_t mode: The mode to operate the CAN controller in
*/
void init_CAN(uint32_t rate, uint16_t deviceGroup, uint16_t deviceSerial){
     ee8:	df 92       	push	r13
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
	CANGCON |= (1<<SWRES); //reset the CAN controller
     ef6:	e8 ed       	ldi	r30, 0xD8	; 216
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	90 81       	ld	r25, Z
     efc:	91 60       	ori	r25, 0x01	; 1
     efe:	90 83       	st	Z, r25
	devGrp = deviceGroup; //Save the device group and serial
     f00:	40 93 1f 01 	sts	0x011F, r20	; 0x80011f <devGrp>
	devSer = deviceSerial;
     f04:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <devSer>
     f08:	2f ef       	ldi	r18, 0xFF	; 255
     f0a:	31 ee       	ldi	r19, 0xE1	; 225
     f0c:	94 e0       	ldi	r25, 0x04	; 4
     f0e:	21 50       	subi	r18, 0x01	; 1
     f10:	30 40       	sbci	r19, 0x00	; 0
     f12:	90 40       	sbci	r25, 0x00	; 0
     f14:	e1 f7       	brne	.-8      	; 0xf0e <init_CAN+0x26>
     f16:	00 c0       	rjmp	.+0      	; 0xf18 <init_CAN+0x30>
     f18:	00 00       	nop
	_delay_ms(100); //The CAN controller is a slow bitch to reset. Twiddle our thumbs while it resets
	/*Set up the rate*/
	CANBT1 = (uint32_t)(rate & 0xFF0000L) >> 16;
     f1a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = (uint32_t)(rate & 0x00FF00L) >> 8;
     f1e:	70 93 e3 00 	sts	0x00E3, r23	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = (uint32_t)(rate & 0x0000FFL);
     f22:	60 93 e4 00 	sts	0x00E4, r22	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	CANGIE = (1 << CANIT) | (1 << ENRX) | (1 << ENTX); //Enable CAN interrupts
     f26:	80 eb       	ldi	r24, 0xB0	; 176
     f28:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	CANTCON = 255; //Set the can timer to run at 1/2048th of F_CPU
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	rxed_mobs[0] = rxed_mobs[1] = 0;
     f32:	ec e1       	ldi	r30, 0x1C	; 28
     f34:	f1 e0       	ldi	r31, 0x01	; 1
     f36:	11 82       	std	Z+1, r1	; 0x01
     f38:	10 82       	st	Z, r1
     f3a:	c0 e0       	ldi	r28, 0x00	; 0
     f3c:	d0 e0       	ldi	r29, 0x00	; 0
			CANSTMOB &= 0;
			set_mob_rx_filter(i);
			CANCDMOB = (1 << CONMOB1); //Mark RX mobs
			enable_mob_interrupt(i); // enable the receive interrupt
		} else {
			CANCDMOB = 0; //Mark as TX MOb
     f3e:	0f ee       	ldi	r16, 0xEF	; 239
     f40:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
	/*Initialize MOBs*/
	for(i = 0;i < 15;i++){
		if(i <= 4){ /*MObs <= 4 are RX mobs*/
			/*Set up the match registers*/
			CANSTMOB &= 0;
     f42:	0f 2e       	mov	r0, r31
     f44:	fe ee       	ldi	r31, 0xEE	; 238
     f46:	ef 2e       	mov	r14, r31
     f48:	f1 2c       	mov	r15, r1
     f4a:	f0 2d       	mov	r31, r0
			set_mob_rx_filter(i);
			CANCDMOB = (1 << CONMOB1); //Mark RX mobs
     f4c:	68 94       	set
     f4e:	dd 24       	eor	r13, r13
     f50:	d7 f8       	bld	r13, 7
	CANTCON = 255; //Set the can timer to run at 1/2048th of F_CPU
	rxed_mobs[0] = rxed_mobs[1] = 0;
	uint8_t i;
	/*Initialize MOBs*/
	for(i = 0;i < 15;i++){
		if(i <= 4){ /*MObs <= 4 are RX mobs*/
     f52:	c5 30       	cpi	r28, 0x05	; 5
     f54:	50 f4       	brcc	.+20     	; 0xf6a <init_CAN+0x82>
			/*Set up the match registers*/
			CANSTMOB &= 0;
     f56:	f7 01       	movw	r30, r14
     f58:	80 81       	ld	r24, Z
     f5a:	10 82       	st	Z, r1
			set_mob_rx_filter(i);
     f5c:	ce 01       	movw	r24, r28
     f5e:	7e df       	rcall	.-260    	; 0xe5c <set_mob_rx_filter>
			CANCDMOB = (1 << CONMOB1); //Mark RX mobs
     f60:	f8 01       	movw	r30, r16
     f62:	d0 82       	st	Z, r13
			enable_mob_interrupt(i); // enable the receive interrupt
     f64:	8c 2f       	mov	r24, r28
     f66:	f0 de       	rcall	.-544    	; 0xd48 <enable_mob_interrupt>
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <init_CAN+0x86>
		} else {
			CANCDMOB = 0; //Mark as TX MOb
     f6a:	f8 01       	movw	r30, r16
     f6c:	10 82       	st	Z, r1
     f6e:	21 96       	adiw	r28, 0x01	; 1
	CANGIE = (1 << CANIT) | (1 << ENRX) | (1 << ENTX); //Enable CAN interrupts
	CANTCON = 255; //Set the can timer to run at 1/2048th of F_CPU
	rxed_mobs[0] = rxed_mobs[1] = 0;
	uint8_t i;
	/*Initialize MOBs*/
	for(i = 0;i < 15;i++){
     f70:	cf 30       	cpi	r28, 0x0F	; 15
     f72:	d1 05       	cpc	r29, r1
     f74:	71 f7       	brne	.-36     	; 0xf52 <init_CAN+0x6a>
			enable_mob_interrupt(i); // enable the receive interrupt
		} else {
			CANCDMOB = 0; //Mark as TX MOb
		}
	}
	msgs_av = 0;
     f76:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <msgs_av>
	//Enable the CAN controller
	CANGCON = (1 << ENASTB);
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	df 90       	pop	r13
     f8e:	08 95       	ret

00000f90 <find_free_mob>:

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     f90:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
		select_mob(i);
		status = CANCDMOB;
     f94:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		if(!(status & ((1 << CONMOB1) | (1 << CONMOB0)))){
     f98:	80 7c       	andi	r24, 0xC0	; 192
     f9a:	99 f0       	breq	.+38     	; 0xfc2 <find_free_mob+0x32>
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	30 e0       	ldi	r19, 0x00	; 0

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     fa0:	ad ee       	ldi	r26, 0xED	; 237
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
		select_mob(i);
		status = CANCDMOB;
     fa4:	ef ee       	ldi	r30, 0xEF	; 239
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	82 2f       	mov	r24, r18

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     faa:	a9 01       	movw	r20, r18
     fac:	42 95       	swap	r20
     fae:	52 95       	swap	r21
     fb0:	50 7f       	andi	r21, 0xF0	; 240
     fb2:	54 27       	eor	r21, r20
     fb4:	40 7f       	andi	r20, 0xF0	; 240
     fb6:	54 27       	eor	r21, r20
     fb8:	4c 93       	st	X, r20
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
		select_mob(i);
		status = CANCDMOB;
     fba:	90 81       	ld	r25, Z
		if(!(status & ((1 << CONMOB1) | (1 << CONMOB0)))){
     fbc:	90 7c       	andi	r25, 0xC0	; 192
     fbe:	19 f4       	brne	.+6      	; 0xfc6 <find_free_mob+0x36>
     fc0:	08 95       	ret

/*Finds a free MOb or returns -1 if they're all used*/
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
     fc2:	80 e0       	ldi	r24, 0x00	; 0
		select_mob(i);
		status = CANCDMOB;
		if(!(status & ((1 << CONMOB1) | (1 << CONMOB0)))){
			return i;
     fc4:	08 95       	ret
     fc6:	2f 5f       	subi	r18, 0xFF	; 255
     fc8:	3f 4f       	sbci	r19, 0xFF	; 255

/*Finds a free MOb or returns -1 if they're all used*/
int8_t find_free_mob(){
	uint8_t i;
	uint8_t status;
	for(i = 0;i < 15;i++){
     fca:	2f 30       	cpi	r18, 0x0F	; 15
     fcc:	31 05       	cpc	r19, r1
     fce:	61 f7       	brne	.-40     	; 0xfa8 <find_free_mob+0x18>
		status = CANCDMOB;
		if(!(status & ((1 << CONMOB1) | (1 << CONMOB0)))){
			return i;
		}
	}
	return -1;
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
}
     fd2:	08 95       	ret

00000fd4 <InitCAN>:


void InitCAN(int deviceGroup, int deviceAddress)
{
     fd4:	9b 01       	movw	r18, r22
    init_CAN(CAN_125_BAUD, deviceGroup, deviceAddress);
     fd6:	ac 01       	movw	r20, r24
     fd8:	63 e1       	ldi	r22, 0x13	; 19
     fda:	74 e0       	ldi	r23, 0x04	; 4
     fdc:	8e e1       	ldi	r24, 0x1E	; 30
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	83 cf       	rjmp	.-250    	; 0xee8 <init_CAN>
     fe2:	08 95       	ret

00000fe4 <SendCANPacket>:
}

int SendCANPacket(CANPacket *packetToSend)
{
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	ec 01       	movw	r28, r24
    uint8_t i;
	int8_t mob = find_free_mob();
     fea:	d2 df       	rcall	.-92     	; 0xf90 <find_free_mob>
	if(mob == -1){
     fec:	8f 3f       	cpi	r24, 0xFF	; 255
     fee:	e9 f1       	breq	.+122    	; 0x106a <SendCANPacket+0x86>

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
     ff0:	90 e1       	ldi	r25, 0x10	; 16
     ff2:	89 9f       	mul	r24, r25
     ff4:	90 01       	movw	r18, r0
     ff6:	11 24       	eor	r1, r1
     ff8:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	int8_t mob = find_free_mob();
	if(mob == -1){
		return 0x02; //No MObs available
	}
	select_mob(mob);
	CANSTMOB &= 0;
     ffc:	ee ee       	ldi	r30, 0xEE	; 238
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	90 81       	ld	r25, Z
    1002:	10 82       	st	Z, r1
	CANCDMOB = packetToSend->dlc & 0x0F;
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	9f 70       	andi	r25, 0x0F	; 15
    1008:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	for(i = 0;i < packetToSend->dlc && i < 8;i++){ //Copy the data into the MOb
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	99 23       	and	r25, r25
    1010:	69 f0       	breq	.+26     	; 0x102c <SendCANPacket+0x48>
    1012:	fe 01       	movw	r30, r28
    1014:	33 96       	adiw	r30, 0x03	; 3
    1016:	90 e0       	ldi	r25, 0x00	; 0
		CANMSG = packetToSend->data[i];
    1018:	aa ef       	ldi	r26, 0xFA	; 250
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	21 91       	ld	r18, Z+
    101e:	2c 93       	st	X, r18
		return 0x02; //No MObs available
	}
	select_mob(mob);
	CANSTMOB &= 0;
	CANCDMOB = packetToSend->dlc & 0x0F;
	for(i = 0;i < packetToSend->dlc && i < 8;i++){ //Copy the data into the MOb
    1020:	9f 5f       	subi	r25, 0xFF	; 255
    1022:	2a 81       	ldd	r18, Y+2	; 0x02
    1024:	92 17       	cp	r25, r18
    1026:	10 f4       	brcc	.+4      	; 0x102c <SendCANPacket+0x48>
    1028:	98 30       	cpi	r25, 0x08	; 8
    102a:	c1 f7       	brne	.-16     	; 0x101c <SendCANPacket+0x38>
		CANMSG = packetToSend->data[i];
	}
	CANIDT4 = 0; //CAN v2.0 - we don't care
    102c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0;
    1030:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = ((packetToSend->id & 7) << 5);
    1034:	98 81       	ld	r25, Y
    1036:	92 95       	swap	r25
    1038:	99 0f       	add	r25, r25
    103a:	90 7e       	andi	r25, 0xE0	; 224
    103c:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = ((packetToSend->id & 0x7F8) >> 3);
    1040:	28 81       	ld	r18, Y
    1042:	39 81       	ldd	r19, Y+1	; 0x01
    1044:	28 7f       	andi	r18, 0xF8	; 248
    1046:	37 70       	andi	r19, 0x07	; 7
    1048:	36 95       	lsr	r19
    104a:	27 95       	ror	r18
    104c:	36 95       	lsr	r19
    104e:	27 95       	ror	r18
    1050:	36 95       	lsr	r19
    1052:	27 95       	ror	r18
    1054:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANCDMOB |= (1<<CONMOB0);
    1058:	ef ee       	ldi	r30, 0xEF	; 239
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	90 81       	ld	r25, Z
    105e:	90 64       	ori	r25, 0x40	; 64
	enable_mob_interrupt(mob); //Enable MOb interrupt
    1060:	90 83       	st	Z, r25
    1062:	72 de       	rcall	.-796    	; 0xd48 <enable_mob_interrupt>
	return 0;
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 c0       	rjmp	.+4      	; 0x106e <SendCANPacket+0x8a>
int SendCANPacket(CANPacket *packetToSend)
{
    uint8_t i;
	int8_t mob = find_free_mob();
	if(mob == -1){
		return 0x02; //No MObs available
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	90 e0       	ldi	r25, 0x00	; 0
	CANIDT2 = ((packetToSend->id & 7) << 5);
	CANIDT1 = ((packetToSend->id & 0x7F8) >> 3);
	CANCDMOB |= (1<<CONMOB0);
	enable_mob_interrupt(mob); //Enable MOb interrupt
	return 0;
}
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	08 95       	ret

00001074 <PollAndReceiveCANPacket>:

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
	if(receivedPacket == NULL){
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	09 f4       	brne	.+2      	; 0x1080 <PollAndReceiveCANPacket+0xc>
    107e:	81 c0       	rjmp	.+258    	; 0x1182 <__stack+0x83>
	CANGCON = (1 << ENASTB);
}

/*Returns the number of CAN messages waiting*/
uint8_t inline CAN_msg_available(){
	return msgs_av;
    1080:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <msgs_av>
	if(receivedPacket == NULL){
		return 0x02;
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
    1084:	22 23       	and	r18, r18
    1086:	09 f4       	brne	.+2      	; 0x108a <PollAndReceiveCANPacket+0x16>
    1088:	7f c0       	rjmp	.+254    	; 0x1188 <__stack+0x89>

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
    108a:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
    108e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <rxed_mobs>
    1092:	20 fd       	sbrc	r18, 0
    1094:	25 c0       	rjmp	.+74     	; 0x10e0 <PollAndReceiveCANPacket+0x6c>
    1096:	21 e0       	ldi	r18, 0x01	; 1
    1098:	30 e0       	ldi	r19, 0x00	; 0

uint8_t devGrp, devSer;

/*Selects the MOB to operate on*/
void inline select_mob(uint8_t mob){
	CANPAGE = ((mob & 0x0F) << 4);
    109a:	ad ee       	ldi	r26, 0xED	; 237
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	12 2f       	mov	r17, r18
    10a0:	a9 01       	movw	r20, r18
    10a2:	42 95       	swap	r20
    10a4:	52 95       	swap	r21
    10a6:	50 7f       	andi	r21, 0xF0	; 240
    10a8:	54 27       	eor	r21, r20
    10aa:	40 7f       	andi	r20, 0xF0	; 240
    10ac:	54 27       	eor	r21, r20
    10ae:	4c 93       	st	X, r20
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
    10b0:	23 fb       	bst	r18, 3
    10b2:	66 27       	eor	r22, r22
    10b4:	60 f9       	bld	r22, 0
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	fb 01       	movw	r30, r22
    10ba:	e4 5e       	subi	r30, 0xE4	; 228
    10bc:	fe 4f       	sbci	r31, 0xFE	; 254
    10be:	40 81       	ld	r20, Z
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	e2 2f       	mov	r30, r18
    10c4:	e7 70       	andi	r30, 0x07	; 7
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <PollAndReceiveCANPacket+0x58>
    10c8:	55 95       	asr	r21
    10ca:	47 95       	ror	r20
    10cc:	ea 95       	dec	r30
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <PollAndReceiveCANPacket+0x54>
    10d0:	40 fd       	sbrc	r20, 0
    10d2:	07 c0       	rjmp	.+14     	; 0x10e2 <PollAndReceiveCANPacket+0x6e>
    10d4:	2f 5f       	subi	r18, 0xFF	; 255
    10d6:	3f 4f       	sbci	r19, 0xFF	; 255
	if(!CAN_msg_available()){
		return 0x01;
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
    10d8:	2f 30       	cpi	r18, 0x0F	; 15
    10da:	31 05       	cpc	r19, r1
    10dc:	01 f7       	brne	.-64     	; 0x109e <PollAndReceiveCANPacket+0x2a>
    10de:	57 c0       	rjmp	.+174    	; 0x118e <__stack+0x8f>
		select_mob(i);
		if(rxed_mobs[!!(i & 8)] & (1 << (i & 7))){
    10e0:	10 e0       	ldi	r17, 0x00	; 0
			break;
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
    10e2:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
    10e6:	2f 70       	andi	r18, 0x0F	; 15
    10e8:	fc 01       	movw	r30, r24
    10ea:	22 83       	std	Z+2, r18	; 0x02
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
    10ec:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    10f0:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    10f4:	32 95       	swap	r19
    10f6:	36 95       	lsr	r19
    10f8:	37 70       	andi	r19, 0x07	; 7
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	44 0f       	add	r20, r20
    10fe:	55 1f       	adc	r21, r21
    1100:	44 0f       	add	r20, r20
    1102:	55 1f       	adc	r21, r21
    1104:	44 0f       	add	r20, r20
    1106:	55 1f       	adc	r21, r21
    1108:	43 2b       	or	r20, r19
    110a:	51 83       	std	Z+1, r21	; 0x01
    110c:	40 83       	st	Z, r20
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
    110e:	22 23       	and	r18, r18
    1110:	91 f0       	breq	.+36     	; 0x1136 <__stack+0x37>
    1112:	33 96       	adiw	r30, 0x03	; 3
    1114:	21 50       	subi	r18, 0x01	; 1
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	2c 5f       	subi	r18, 0xFC	; 252
    111a:	3f 4f       	sbci	r19, 0xFF	; 255
    111c:	28 0f       	add	r18, r24
    111e:	39 1f       	adc	r19, r25
    1120:	0b 96       	adiw	r24, 0x0b	; 11
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
    1122:	aa ef       	ldi	r26, 0xFA	; 250
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	4c 91       	ld	r20, X
    1128:	41 93       	st	Z+, r20
		}
	}
	mob = i;
	receivedPacket->dlc = CANCDMOB & 0x0F; //Length in the lower 8 bits
	receivedPacket->id = (CANIDT2 >> 5) | ((uint16_t)CANIDT1 << 3);
	for(i = 0;i < receivedPacket->dlc && i < 8;i++){
    112a:	e2 17       	cp	r30, r18
    112c:	f3 07       	cpc	r31, r19
    112e:	19 f0       	breq	.+6      	; 0x1136 <__stack+0x37>
    1130:	8e 17       	cp	r24, r30
    1132:	9f 07       	cpc	r25, r31
    1134:	c1 f7       	brne	.-16     	; 0x1126 <__stack+0x27>
		receivedPacket->data[i] = CANMSG; //Get the data from the MOb and copy it into the buffer
	}
	//Atomically decrement the number of messages available
	cli();
    1136:	f8 94       	cli
	msgs_av--;
    1138:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <msgs_av>
    113c:	81 50       	subi	r24, 0x01	; 1
    113e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <msgs_av>
	sei();
    1142:	78 94       	sei
	/*Reset the MOb*/
	set_mob_rx_filter(mob);
    1144:	81 2f       	mov	r24, r17
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	89 de       	rcall	.-750    	; 0xe5c <set_mob_rx_filter>
	enable_mob_interrupt(mob);
    114a:	81 2f       	mov	r24, r17
    114c:	fd dd       	rcall	.-1030   	; 0xd48 <enable_mob_interrupt>
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
    114e:	13 fb       	bst	r17, 3
    1150:	ff 27       	eor	r31, r31
    1152:	f0 f9       	bld	r31, 0
    1154:	cf 2f       	mov	r28, r31
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	d8 2f       	mov	r29, r24
    115a:	c4 5e       	subi	r28, 0xE4	; 228
    115c:	de 4f       	sbci	r29, 0xFE	; 254
    115e:	28 81       	ld	r18, Y
    1160:	17 70       	andi	r17, 0x07	; 7
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 c0       	rjmp	.+4      	; 0x116c <__stack+0x6d>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	1a 95       	dec	r17
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <__stack+0x69>
    1170:	80 95       	com	r24
    1172:	82 23       	and	r24, r18
    1174:	88 83       	st	Y, r24
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
    1176:	80 e8       	ldi	r24, 0x80	; 128
    1178:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	return 0;
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	08 c0       	rjmp	.+16     	; 0x1192 <__stack+0x93>
}

int PollAndReceiveCANPacket(CANPacket *receivedPacket)
{
	if(receivedPacket == NULL){
		return 0x02;
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	05 c0       	rjmp	.+10     	; 0x1192 <__stack+0x93>
	}

	uint8_t i, mob;
	if(!CAN_msg_available()){
		return 0x01;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <__stack+0x93>
	}
	/*Find a MOb with a message*/
	for(i = 0;i < 16;i++){
		if(i == 15) return 0x01;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
	enable_mob_interrupt(mob);
	rxed_mobs[!!(mob & 8)] &= ~(1 << (mob & 7)); //Mark that the message has been taken
	CANCDMOB = (1<<CONMOB1); //Re-enable recieve
	return 0;
    
}
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	08 95       	ret

0000119a <getLocalDeviceSerial>:

uint8_t getLocalDeviceSerial()
{
    /*Return the DIP switch value*/
    return devSer;
}
    119a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <devSer>
    119e:	08 95       	ret

000011a0 <getLocalDeviceGroup>:
uint8_t getLocalDeviceGroup()
{
    //Definitely board specific.
    return devGrp; // example value (also used for testing)
}
    11a0:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <devGrp>
    11a4:	08 95       	ret

000011a6 <write_PWM>:
  uint8_t pin: The pin to set the PWM on (PE3, PE4, PE5)
  uint16_t pwm: 10-bit PWM value
*/
//void write_PWM(uint8_t port, uint8_t pin, uint16_t pwm){
void write_PWM(uint8_t pin, uint16_t pwm){
	pwm &= 1023;
    11a6:	73 70       	andi	r23, 0x03	; 3
	switch(pin){
    11a8:	84 30       	cpi	r24, 0x04	; 4
    11aa:	71 f0       	breq	.+28     	; 0x11c8 <write_PWM+0x22>
    11ac:	85 30       	cpi	r24, 0x05	; 5
    11ae:	b1 f0       	breq	.+44     	; 0x11dc <write_PWM+0x36>
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	e9 f4       	brne	.+58     	; 0x11ee <write_PWM+0x48>
		case PE3:
			TCCR3A |= (1 << COM3A1);
    11b4:	e0 e9       	ldi	r30, 0x90	; 144
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	80 68       	ori	r24, 0x80	; 128
    11bc:	80 83       	st	Z, r24
			OCR3A = pwm;
    11be:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    11c2:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
			break;
    11c6:	08 95       	ret
		case PE4:
			TCCR3A |= (1 << COM3B1);
    11c8:	e0 e9       	ldi	r30, 0x90	; 144
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	80 62       	ori	r24, 0x20	; 32
    11d0:	80 83       	st	Z, r24
			OCR3B = pwm;
    11d2:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    11d6:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
			break;
    11da:	08 95       	ret
		case PE5:
			TCCR3A |= (1 << COM3C1);
    11dc:	e0 e9       	ldi	r30, 0x90	; 144
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	88 60       	ori	r24, 0x08	; 8
    11e4:	80 83       	st	Z, r24
			OCR3C = pwm;
    11e6:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    11ea:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    11ee:	08 95       	ret

000011f0 <PCA9685_write>:
#define PCA9685_PIN    0x06

#define PCA9685_SLEEP_BIT       0x10
#define PCA9685_RESTART_BIT     0x80

void PCA9685_write(uint8_t reg, uint8_t val){
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	d8 2f       	mov	r29, r24
    11f6:	c6 2f       	mov	r28, r22
	I2C_start();
    11f8:	04 db       	rcall	.-2552   	; 0x802 <I2C_start>
	I2C_write(PCA9685_ADDR << 1);
    11fa:	80 e8       	ldi	r24, 0x80	; 128
    11fc:	0f db       	rcall	.-2530   	; 0x81c <I2C_write>
	I2C_write(reg);
    11fe:	8d 2f       	mov	r24, r29
    1200:	0d db       	rcall	.-2534   	; 0x81c <I2C_write>
	I2C_write(val);
    1202:	8c 2f       	mov	r24, r28
    1204:	0b db       	rcall	.-2538   	; 0x81c <I2C_write>
    1206:	06 db       	rcall	.-2548   	; 0x814 <I2C_stop>
	I2C_stop();
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
}
    120c:	08 95       	ret

0000120e <PCA9685_init>:
    120e:	60 e8       	ldi	r22, 0x80	; 128
    1210:	80 e0       	ldi	r24, 0x00	; 0

void PCA9685_init(){
	PCA9685_write(PCA9685_MODE1_REG, PCA9685_RESTART_BIT);
    1212:	ee df       	rcall	.-36     	; 0x11f0 <PCA9685_write>
    1214:	8f e3       	ldi	r24, 0x3F	; 63
    1216:	9c e9       	ldi	r25, 0x9C	; 156
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <PCA9685_init+0xa>
    121c:	00 c0       	rjmp	.+0      	; 0x121e <PCA9685_init+0x10>
    121e:	00 00       	nop
	_delay_ms(10);
	PCA9685_write(PCA9685_MODE1_REG, PCA9685_SLEEP_BIT);
    1220:	60 e1       	ldi	r22, 0x10	; 16
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	e5 df       	rcall	.-54     	; 0x11f0 <PCA9685_write>
    1226:	8f e3       	ldi	r24, 0x3F	; 63
    1228:	9f e1       	ldi	r25, 0x1F	; 31
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <PCA9685_init+0x1c>
    122e:	00 c0       	rjmp	.+0      	; 0x1230 <PCA9685_init+0x22>
    1230:	00 00       	nop
	_delay_ms(2);
	PCA9685_write(PCA9685_MODE1_REG, 0x00);
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	dc df       	rcall	.-72     	; 0x11f0 <PCA9685_write>
    1238:	8f e3       	ldi	r24, 0x3F	; 63
    123a:	9f e1       	ldi	r25, 0x1F	; 31
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <PCA9685_init+0x2e>
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <PCA9685_init+0x34>
    1242:	00 00       	nop
    1244:	08 95       	ret

00001246 <PCA9685_set_freq>:
	_delay_ms(2);
}

void PCA9685_set_freq(uint16_t freq){
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	8c 01       	movw	r16, r24
	uint8_t prescale = ((25000000L / 4096) / freq) - 1;
	I2C_start();
    124e:	d9 da       	rcall	.-2638   	; 0x802 <I2C_start>
	I2C_write((PCA9685_ADDR << 1) | 1);
    1250:	81 e8       	ldi	r24, 0x81	; 129
    1252:	e4 da       	rcall	.-2616   	; 0x81c <I2C_write>
	I2C_write(PCA9685_MODE1_REG);
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	e2 da       	rcall	.-2620   	; 0x81c <I2C_write>
	I2C_start();
    1258:	d4 da       	rcall	.-2648   	; 0x802 <I2C_start>
	uint8_t old_mode = I2C_read(0);
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	ea da       	rcall	.-2604   	; 0x832 <I2C_read>
    125e:	c8 2f       	mov	r28, r24
    1260:	d9 da       	rcall	.-2638   	; 0x814 <I2C_stop>
	I2C_stop();
    1262:	6c 2f       	mov	r22, r28
	
	PCA9685_write(PCA9685_MODE1_REG, (old_mode & 0x7F) | PCA9685_SLEEP_BIT);
    1264:	6f 76       	andi	r22, 0x6F	; 111
    1266:	60 61       	ori	r22, 0x10	; 16
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	c2 df       	rcall	.-124    	; 0x11f0 <PCA9685_write>
    126c:	8f e3       	ldi	r24, 0x3F	; 63
    126e:	9f e1       	ldi	r25, 0x1F	; 31
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <PCA9685_set_freq+0x2a>
    1274:	00 c0       	rjmp	.+0      	; 0x1276 <PCA9685_set_freq+0x30>
    1276:	00 00       	nop
    1278:	98 01       	movw	r18, r16
    127a:	40 e0       	ldi	r20, 0x00	; 0
	_delay_ms(2);
	PCA9685_write(PCA9685_PRESCALE, prescale);
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	67 ed       	ldi	r22, 0xD7	; 215
    1280:	77 e1       	ldi	r23, 0x17	; 23
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	b5 d1       	rcall	.+874    	; 0x15f2 <__divmodsi4>
    1288:	6f ef       	ldi	r22, 0xFF	; 255
    128a:	62 0f       	add	r22, r18
    128c:	8e ef       	ldi	r24, 0xFE	; 254
    128e:	b0 df       	rcall	.-160    	; 0x11f0 <PCA9685_write>
    1290:	6c 2f       	mov	r22, r28
	PCA9685_write(PCA9685_MODE1_REG, old_mode);
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	ad df       	rcall	.-166    	; 0x11f0 <PCA9685_write>
    1296:	8f e3       	ldi	r24, 0x3F	; 63
    1298:	9f e1       	ldi	r25, 0x1F	; 31
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	f1 f7       	brne	.-4      	; 0x129a <PCA9685_set_freq+0x54>
    129e:	00 c0       	rjmp	.+0      	; 0x12a0 <PCA9685_set_freq+0x5a>
    12a0:	00 00       	nop
    12a2:	6c 2f       	mov	r22, r28
	_delay_ms(2);
	PCA9685_write(PCA9685_MODE1_REG, old_mode | PCA9685_RESTART_BIT);
    12a4:	60 68       	ori	r22, 0x80	; 128
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	a3 df       	rcall	.-186    	; 0x11f0 <PCA9685_write>
    12aa:	8f e3       	ldi	r24, 0x3F	; 63
    12ac:	9f e1       	ldi	r25, 0x1F	; 31
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <PCA9685_set_freq+0x68>
    12b2:	00 c0       	rjmp	.+0      	; 0x12b4 <PCA9685_set_freq+0x6e>
    12b4:	00 00       	nop
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
	_delay_ms(2);
}
    12ba:	0f 91       	pop	r16
    12bc:	08 95       	ret

000012be <PCA9685_set_pwm>:
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17

void PCA9685_set_pwm(uint8_t pin, uint16_t pwm){
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	eb 01       	movw	r28, r22
	PCA9685_write(PCA9685_PIN + 4 * pin , (4095 - pwm) & 0xFF);
    12c8:	08 2f       	mov	r16, r24
    12ca:	00 0f       	add	r16, r16
    12cc:	00 0f       	add	r16, r16
    12ce:	60 95       	com	r22
    12d0:	86 e0       	ldi	r24, 0x06	; 6
    12d2:	80 0f       	add	r24, r16
    12d4:	8d df       	rcall	.-230    	; 0x11f0 <PCA9685_write>
	PCA9685_write(PCA9685_PIN + 4 * pin + 1, (4095 - pwm) >> 8);
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	9f e0       	ldi	r25, 0x0F	; 15
    12da:	8c 1b       	sub	r24, r28
    12dc:	9d 0b       	sbc	r25, r29
    12de:	69 2f       	mov	r22, r25
    12e0:	87 e0       	ldi	r24, 0x07	; 7
    12e2:	80 0f       	add	r24, r16
    12e4:	85 df       	rcall	.-246    	; 0x11f0 <PCA9685_write>
	PCA9685_write(PCA9685_PIN + 4 * pin + 2 , pwm & 0xFF);
    12e6:	80 2f       	mov	r24, r16
    12e8:	6c 2f       	mov	r22, r28
    12ea:	88 5f       	subi	r24, 0xF8	; 248
    12ec:	81 df       	rcall	.-254    	; 0x11f0 <PCA9685_write>
	PCA9685_write(PCA9685_PIN + 4 * pin + 3, pwm >> 8);
    12ee:	6d 2f       	mov	r22, r29
    12f0:	89 e0       	ldi	r24, 0x09	; 9
    12f2:	80 0f       	add	r24, r16
    12f4:	7d df       	rcall	.-262    	; 0x11f0 <PCA9685_write>
}
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	08 95       	ret

00001300 <init_servos>:

void init_servos(){
	PCA9685_init();
    1300:	86 df       	rcall	.-244    	; 0x120e <PCA9685_init>
	PCA9685_set_freq(50);	
    1302:	82 e3       	ldi	r24, 0x32	; 50
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	9f cf       	rjmp	.-194    	; 0x1246 <PCA9685_set_freq>
    1308:	08 95       	ret

0000130a <set_servo_position>:
}

void set_servo_position(int servo, int degrees){
    130a:	9c 01       	movw	r18, r24
    130c:	64 3b       	cpi	r22, 0xB4	; 180
    130e:	71 05       	cpc	r23, r1
    1310:	14 f0       	brlt	.+4      	; 0x1316 <set_servo_position+0xc>
    1312:	63 eb       	ldi	r22, 0xB3	; 179
    1314:	70 e0       	ldi	r23, 0x00	; 0
	if(degrees > 179) degrees = 179;
	if(degrees < 1) degrees = 1;
    1316:	16 16       	cp	r1, r22
    1318:	17 06       	cpc	r1, r23
    131a:	14 f0       	brlt	.+4      	; 0x1320 <set_servo_position+0x16>
    131c:	61 e0       	ldi	r22, 0x01	; 1
    131e:	70 e0       	ldi	r23, 0x00	; 0
	if(servo < 0 || servo > 2){
    1320:	23 30       	cpi	r18, 0x03	; 3
    1322:	31 05       	cpc	r19, r1
    1324:	68 f4       	brcc	.+26     	; 0x1340 <set_servo_position+0x36>
		return;
	}
	PCA9685_set_pwm(servo, 102 + (degrees * 99) / 172);
    1326:	33 e6       	ldi	r19, 0x63	; 99
    1328:	36 9f       	mul	r19, r22
    132a:	c0 01       	movw	r24, r0
    132c:	37 9f       	mul	r19, r23
    132e:	90 0d       	add	r25, r0
    1330:	11 24       	eor	r1, r1
    1332:	6c ea       	ldi	r22, 0xAC	; 172
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	28 d1       	rcall	.+592    	; 0x1588 <__divmodhi4>
    1338:	6a 59       	subi	r22, 0x9A	; 154
    133a:	7f 4f       	sbci	r23, 0xFF	; 255
    133c:	82 2f       	mov	r24, r18
    133e:	bf cf       	rjmp	.-130    	; 0x12be <PCA9685_set_pwm>
    1340:	08 95       	ret

00001342 <__vector_15>:
#include "led.h"

volatile uint32_t TOF_Cnt; //Timer1 overflow counter
volatile uint8_t PID_due;

ISR(TIMER1_OVF_vect){ //This should fire every 20mS
    1342:	1f 92       	push	r1
    1344:	0f 92       	push	r0
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	0f 92       	push	r0
    134a:	11 24       	eor	r1, r1
    134c:	0b b6       	in	r0, 0x3b	; 59
    134e:	0f 92       	push	r0
    1350:	2f 93       	push	r18
    1352:	3f 93       	push	r19
    1354:	4f 93       	push	r20
    1356:	5f 93       	push	r21
    1358:	6f 93       	push	r22
    135a:	7f 93       	push	r23
    135c:	8f 93       	push	r24
    135e:	9f 93       	push	r25
    1360:	af 93       	push	r26
    1362:	bf 93       	push	r27
    1364:	ef 93       	push	r30
    1366:	ff 93       	push	r31
	TOF_Cnt++;
    1368:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TOF_Cnt>
    136c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <TOF_Cnt+0x1>
    1370:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <TOF_Cnt+0x2>
    1374:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <TOF_Cnt+0x3>
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	a1 1d       	adc	r26, r1
    137c:	b1 1d       	adc	r27, r1
    137e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <TOF_Cnt>
    1382:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <TOF_Cnt+0x1>
    1386:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <TOF_Cnt+0x2>
    138a:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <TOF_Cnt+0x3>
	if(TOF_Cnt % 8 == 0){
    138e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TOF_Cnt>
    1392:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <TOF_Cnt+0x1>
    1396:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <TOF_Cnt+0x2>
    139a:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <TOF_Cnt+0x3>
    139e:	87 70       	andi	r24, 0x07	; 7
    13a0:	99 27       	eor	r25, r25
    13a2:	aa 27       	eor	r26, r26
    13a4:	bb 27       	eor	r27, r27
    13a6:	89 2b       	or	r24, r25
    13a8:	8a 2b       	or	r24, r26
    13aa:	8b 2b       	or	r24, r27
    13ac:	49 f4       	brne	.+18     	; 0x13c0 <__vector_15+0x7e>
		update_LEDS((uint16_t)TOF_Cnt);
    13ae:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TOF_Cnt>
    13b2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <TOF_Cnt+0x1>
    13b6:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <TOF_Cnt+0x2>
    13ba:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <TOF_Cnt+0x3>
    13be:	67 da       	rcall	.-2866   	; 0x88e <update_LEDS>
	}
	if(TOF_Cnt % 2 == 0){
    13c0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TOF_Cnt>
    13c4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <TOF_Cnt+0x1>
    13c8:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <TOF_Cnt+0x2>
    13cc:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <TOF_Cnt+0x3>
    13d0:	80 fd       	sbrc	r24, 0
    13d2:	03 c0       	rjmp	.+6      	; 0x13da <__vector_15+0x98>
		PID_due = 1;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <PID_due>
	}
}
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0b be       	out	0x3b, r0	; 59
    13f6:	0f 90       	pop	r0
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	0f 90       	pop	r0
    13fc:	1f 90       	pop	r1
    13fe:	18 95       	reti

00001400 <setup_timers>:

/*Set up the AVR's timers for PWM and time information*/
void setup_timers(){
	//Timer 0: Phase correct PWM, CLK/64
	TCCR0A = (1<<CS01) | (1<<CS00) | (1<<WGM00);
    1400:	83 e4       	ldi	r24, 0x43	; 67
    1402:	84 bd       	out	0x24, r24	; 36
	//Timer 1: Fast PWM, TOP=OCR1A, CLK/64
	//This makes timer 1 increment every 8 microseconds at 8 Mhz or every 4uS at 16MHz
	TCCR1B = (1<<CS11) | (1<<CS10)  | (1<<WGM13) | (1<<WGM12);
    1404:	8b e1       	ldi	r24, 0x1B	; 27
    1406:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR1A = (1<<WGM11) | (1<<WGM10);
    140a:	93 e0       	ldi	r25, 0x03	; 3
    140c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	OCR1A = 10000; //Count to 10000 before resetting
    1410:	20 e1       	ldi	r18, 0x10	; 16
    1412:	37 e2       	ldi	r19, 0x27	; 39
    1414:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1418:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCNT1 = 0;
    141c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1420:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 = (1 << TOIE1); //Enable interrupt on match
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	
	//Timer 3: 10-bit phase correct PWM, CLK/64
	TCCR3A = (1<<WGM31) | (1<<WGM30);
    142a:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	//TCCR3B = (1<<CS31);
	TCCR3B = (1<<CS30);
    142e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>

	TOF_Cnt = 0; //Clear the overflow counter
    1432:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TOF_Cnt>
    1436:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <TOF_Cnt+0x1>
    143a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <TOF_Cnt+0x2>
    143e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <TOF_Cnt+0x3>
    1442:	08 95       	ret

00001444 <get_mS>:
}

/*Returns the number of milliseconds since timer initialization*/
uint32_t get_mS(){
    1444:	cf 92       	push	r12
    1446:	df 92       	push	r13
    1448:	ef 92       	push	r14
    144a:	ff 92       	push	r15
	uint16_t timer_ticks = TCNT1;
    144c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1450:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	#ifdef REV_2
	return (TOF_Cnt * 20) + (timer_ticks/250L);
	#else
	return (TOF_Cnt * 40) + (timer_ticks/250L);
    1454:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TOF_Cnt>
    1458:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <TOF_Cnt+0x1>
    145c:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <TOF_Cnt+0x2>
    1460:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <TOF_Cnt+0x3>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	aa 1f       	adc	r26, r26
    146a:	bb 1f       	adc	r27, r27
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	aa 1f       	adc	r26, r26
    1472:	bb 1f       	adc	r27, r27
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	aa 1f       	adc	r26, r26
    147a:	bb 1f       	adc	r27, r27
    147c:	6c 01       	movw	r12, r24
    147e:	7d 01       	movw	r14, r26
    1480:	cc 0c       	add	r12, r12
    1482:	dd 1c       	adc	r13, r13
    1484:	ee 1c       	adc	r14, r14
    1486:	ff 1c       	adc	r15, r15
    1488:	cc 0c       	add	r12, r12
    148a:	dd 1c       	adc	r13, r13
    148c:	ee 1c       	adc	r14, r14
    148e:	ff 1c       	adc	r15, r15
    1490:	c8 0e       	add	r12, r24
    1492:	d9 1e       	adc	r13, r25
    1494:	ea 1e       	adc	r14, r26
    1496:	fb 1e       	adc	r15, r27
    1498:	36 95       	lsr	r19
    149a:	27 95       	ror	r18
    149c:	a3 e1       	ldi	r26, 0x13	; 19
    149e:	b3 e8       	ldi	r27, 0x83	; 131
    14a0:	c4 d0       	rcall	.+392    	; 0x162a <__umulhisi3>
    14a2:	00 24       	eor	r0, r0
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	00 1c       	adc	r0, r0
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	00 1c       	adc	r0, r0
    14b0:	89 2f       	mov	r24, r25
    14b2:	90 2d       	mov	r25, r0
    14b4:	a7 01       	movw	r20, r14
    14b6:	96 01       	movw	r18, r12
    14b8:	28 0f       	add	r18, r24
    14ba:	39 1f       	adc	r19, r25
    14bc:	41 1d       	adc	r20, r1
    14be:	51 1d       	adc	r21, r1
    14c0:	ca 01       	movw	r24, r20
    14c2:	b9 01       	movw	r22, r18
	#endif
}
    14c4:	ff 90       	pop	r15
    14c6:	ef 90       	pop	r14
    14c8:	df 90       	pop	r13
    14ca:	cf 90       	pop	r12
    14cc:	08 95       	ret

000014ce <__vector_21>:

volatile char usart_TX_buf[USART_TX_BUF_SZ];
volatile char usart_RX_buf[USART_RX_BUF_SZ];
volatile uint8_t txbp, txend, rxbp;

ISR(USART0_RX_vect){
    14ce:	1f 92       	push	r1
    14d0:	0f 92       	push	r0
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	0f 92       	push	r0
    14d6:	11 24       	eor	r1, r1
    14d8:	0b b6       	in	r0, 0x3b	; 59
    14da:	0f 92       	push	r0
    14dc:	8f 93       	push	r24
    14de:	ef 93       	push	r30
    14e0:	ff 93       	push	r31
	if(rxbp > USART_RX_BUF_SZ){
    14e2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <rxbp>
    14e6:	81 31       	cpi	r24, 0x11	; 17
    14e8:	20 f0       	brcs	.+8      	; 0x14f2 <__vector_21+0x24>
		rxbp = USART_RX_BUF_SZ;
    14ea:	80 e1       	ldi	r24, 0x10	; 16
    14ec:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rxbp>
		return;
    14f0:	0c c0       	rjmp	.+24     	; 0x150a <__vector_21+0x3c>
	}
	usart_RX_buf[rxbp++] = UDR0;
    14f2:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <rxbp>
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	8e 0f       	add	r24, r30
    14fa:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rxbp>
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1504:	e9 5c       	subi	r30, 0xC9	; 201
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	80 83       	st	Z, r24
}
    150a:	ff 91       	pop	r31
    150c:	ef 91       	pop	r30
    150e:	8f 91       	pop	r24
    1510:	0f 90       	pop	r0
    1512:	0b be       	out	0x3b, r0	; 59
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	0f 90       	pop	r0
    151a:	1f 90       	pop	r1
    151c:	18 95       	reti

0000151e <__vector_22>:
ISR(USART0_UDRE_vect){
    151e:	1f 92       	push	r1
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	0f 92       	push	r0
    1526:	11 24       	eor	r1, r1
    1528:	0b b6       	in	r0, 0x3b	; 59
    152a:	0f 92       	push	r0
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	ef 93       	push	r30
    1532:	ff 93       	push	r31
	UDR0 = usart_TX_buf[txbp++];
    1534:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <txbp>
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	8e 0f       	add	r24, r30
    153c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <txbp>
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	eb 5d       	subi	r30, 0xDB	; 219
    1544:	fe 4f       	sbci	r31, 0xFE	; 254
    1546:	80 81       	ld	r24, Z
    1548:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(txbp >= txend || txbp > USART_TX_BUF_SZ){
    154c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <txbp>
    1550:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <txend>
    1554:	98 17       	cp	r25, r24
    1556:	20 f4       	brcc	.+8      	; 0x1560 <__vector_22+0x42>
    1558:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <txbp>
    155c:	81 31       	cpi	r24, 0x11	; 17
    155e:	48 f0       	brcs	.+18     	; 0x1572 <__vector_22+0x54>
		UCSR0B &= ~(1 << UDRIE1);
    1560:	e1 ec       	ldi	r30, 0xC1	; 193
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	8f 7d       	andi	r24, 0xDF	; 223
    1568:	80 83       	st	Z, r24
		txbp = txend = 0;
    156a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <txend>
    156e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <txbp>
	}
}
    1572:	ff 91       	pop	r31
    1574:	ef 91       	pop	r30
    1576:	9f 91       	pop	r25
    1578:	8f 91       	pop	r24
    157a:	0f 90       	pop	r0
    157c:	0b be       	out	0x3b, r0	; 59
    157e:	0f 90       	pop	r0
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	0f 90       	pop	r0
    1584:	1f 90       	pop	r1
    1586:	18 95       	reti

00001588 <__divmodhi4>:
    1588:	97 fb       	bst	r25, 7
    158a:	07 2e       	mov	r0, r23
    158c:	16 f4       	brtc	.+4      	; 0x1592 <__divmodhi4+0xa>
    158e:	00 94       	com	r0
    1590:	06 d0       	rcall	.+12     	; 0x159e <__divmodhi4_neg1>
    1592:	77 fd       	sbrc	r23, 7
    1594:	08 d0       	rcall	.+16     	; 0x15a6 <__divmodhi4_neg2>
    1596:	58 d0       	rcall	.+176    	; 0x1648 <__udivmodhi4>
    1598:	07 fc       	sbrc	r0, 7
    159a:	05 d0       	rcall	.+10     	; 0x15a6 <__divmodhi4_neg2>
    159c:	3e f4       	brtc	.+14     	; 0x15ac <__divmodhi4_exit>

0000159e <__divmodhi4_neg1>:
    159e:	90 95       	com	r25
    15a0:	81 95       	neg	r24
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	08 95       	ret

000015a6 <__divmodhi4_neg2>:
    15a6:	70 95       	com	r23
    15a8:	61 95       	neg	r22
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255

000015ac <__divmodhi4_exit>:
    15ac:	08 95       	ret

000015ae <__udivmodsi4>:
    15ae:	a1 e2       	ldi	r26, 0x21	; 33
    15b0:	1a 2e       	mov	r1, r26
    15b2:	aa 1b       	sub	r26, r26
    15b4:	bb 1b       	sub	r27, r27
    15b6:	fd 01       	movw	r30, r26
    15b8:	0d c0       	rjmp	.+26     	; 0x15d4 <__udivmodsi4_ep>

000015ba <__udivmodsi4_loop>:
    15ba:	aa 1f       	adc	r26, r26
    15bc:	bb 1f       	adc	r27, r27
    15be:	ee 1f       	adc	r30, r30
    15c0:	ff 1f       	adc	r31, r31
    15c2:	a2 17       	cp	r26, r18
    15c4:	b3 07       	cpc	r27, r19
    15c6:	e4 07       	cpc	r30, r20
    15c8:	f5 07       	cpc	r31, r21
    15ca:	20 f0       	brcs	.+8      	; 0x15d4 <__udivmodsi4_ep>
    15cc:	a2 1b       	sub	r26, r18
    15ce:	b3 0b       	sbc	r27, r19
    15d0:	e4 0b       	sbc	r30, r20
    15d2:	f5 0b       	sbc	r31, r21

000015d4 <__udivmodsi4_ep>:
    15d4:	66 1f       	adc	r22, r22
    15d6:	77 1f       	adc	r23, r23
    15d8:	88 1f       	adc	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	1a 94       	dec	r1
    15de:	69 f7       	brne	.-38     	; 0x15ba <__udivmodsi4_loop>
    15e0:	60 95       	com	r22
    15e2:	70 95       	com	r23
    15e4:	80 95       	com	r24
    15e6:	90 95       	com	r25
    15e8:	9b 01       	movw	r18, r22
    15ea:	ac 01       	movw	r20, r24
    15ec:	bd 01       	movw	r22, r26
    15ee:	cf 01       	movw	r24, r30
    15f0:	08 95       	ret

000015f2 <__divmodsi4>:
    15f2:	05 2e       	mov	r0, r21
    15f4:	97 fb       	bst	r25, 7
    15f6:	16 f4       	brtc	.+4      	; 0x15fc <__divmodsi4+0xa>
    15f8:	00 94       	com	r0
    15fa:	0f d0       	rcall	.+30     	; 0x161a <__negsi2>
    15fc:	57 fd       	sbrc	r21, 7
    15fe:	05 d0       	rcall	.+10     	; 0x160a <__divmodsi4_neg2>
    1600:	d6 df       	rcall	.-84     	; 0x15ae <__udivmodsi4>
    1602:	07 fc       	sbrc	r0, 7
    1604:	02 d0       	rcall	.+4      	; 0x160a <__divmodsi4_neg2>
    1606:	46 f4       	brtc	.+16     	; 0x1618 <__divmodsi4_exit>
    1608:	08 c0       	rjmp	.+16     	; 0x161a <__negsi2>

0000160a <__divmodsi4_neg2>:
    160a:	50 95       	com	r21
    160c:	40 95       	com	r20
    160e:	30 95       	com	r19
    1610:	21 95       	neg	r18
    1612:	3f 4f       	sbci	r19, 0xFF	; 255
    1614:	4f 4f       	sbci	r20, 0xFF	; 255
    1616:	5f 4f       	sbci	r21, 0xFF	; 255

00001618 <__divmodsi4_exit>:
    1618:	08 95       	ret

0000161a <__negsi2>:
    161a:	90 95       	com	r25
    161c:	80 95       	com	r24
    161e:	70 95       	com	r23
    1620:	61 95       	neg	r22
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f 4f       	sbci	r24, 0xFF	; 255
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	08 95       	ret

0000162a <__umulhisi3>:
    162a:	a2 9f       	mul	r26, r18
    162c:	b0 01       	movw	r22, r0
    162e:	b3 9f       	mul	r27, r19
    1630:	c0 01       	movw	r24, r0
    1632:	a3 9f       	mul	r26, r19
    1634:	70 0d       	add	r23, r0
    1636:	81 1d       	adc	r24, r1
    1638:	11 24       	eor	r1, r1
    163a:	91 1d       	adc	r25, r1
    163c:	b2 9f       	mul	r27, r18
    163e:	70 0d       	add	r23, r0
    1640:	81 1d       	adc	r24, r1
    1642:	11 24       	eor	r1, r1
    1644:	91 1d       	adc	r25, r1
    1646:	08 95       	ret

00001648 <__udivmodhi4>:
    1648:	aa 1b       	sub	r26, r26
    164a:	bb 1b       	sub	r27, r27
    164c:	51 e1       	ldi	r21, 0x11	; 17
    164e:	07 c0       	rjmp	.+14     	; 0x165e <__udivmodhi4_ep>

00001650 <__udivmodhi4_loop>:
    1650:	aa 1f       	adc	r26, r26
    1652:	bb 1f       	adc	r27, r27
    1654:	a6 17       	cp	r26, r22
    1656:	b7 07       	cpc	r27, r23
    1658:	10 f0       	brcs	.+4      	; 0x165e <__udivmodhi4_ep>
    165a:	a6 1b       	sub	r26, r22
    165c:	b7 0b       	sbc	r27, r23

0000165e <__udivmodhi4_ep>:
    165e:	88 1f       	adc	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	5a 95       	dec	r21
    1664:	a9 f7       	brne	.-22     	; 0x1650 <__udivmodhi4_loop>
    1666:	80 95       	com	r24
    1668:	90 95       	com	r25
    166a:	bc 01       	movw	r22, r24
    166c:	cd 01       	movw	r24, r26
    166e:	08 95       	ret

00001670 <_exit>:
    1670:	f8 94       	cli

00001672 <__stop_program>:
    1672:	ff cf       	rjmp	.-2      	; 0x1672 <__stop_program>
